<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>将firefox打造成chrome</title>
    <url>/firefox-change-to-chrome/</url>
    <content><![CDATA[<p>首先下载Chrome Package 组件进行安装，再打开FF，发现已经很像chrome了，但菜单栏依然存在， 我们需要把它也去掉。接着下载Compact Menu 2 2.2.0组件，它会把菜单栏缩放在一起。然后在将FF的菜单栏隐藏即可。在看一下现在FF，是不是足以以假乱真chrome了。</p>
<p>PS：目前Chrome Package 组件有一个BUG，当标签太多时，标签上的关闭按钮会被挤得隐藏起来，你可以下载支持双击关闭标签的组件去解决这个BUG。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>chrome</tag>
        <tag>firefox</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 配置文件</title>
    <url>/mysql-config/</url>
    <content><![CDATA[<p>如果mysql不能登录，请查看mysql属性里，socket文件配置位置与实际位置是否一至，应在/etc/下查看是否存在mysql文件夹 或my.cnf文件 。删除错误的配置文件即可。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>strftime函数将时间格式化</title>
    <url>/strftime/</url>
    <content><![CDATA[<p>我们可以使用strftime（）函数将时间格式化为我们想要的格式。它的原型如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">size_t</span> <span class="token function">strftime</span><span class="token punctuation">(</span>
<span class="token keyword">char</span> <span class="token operator">*</span>strDest<span class="token punctuation">,</span>
<span class="token class-name">size_t</span> maxsize<span class="token punctuation">,</span>
<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span>
<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>timeptr
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以根据format指向字符串中格式命令把timeptr中保存的时间信息放在strDest指向的字符串中，最多向strDest中存放maxsize个字符。该函数返回向strDest指向的字符串中放置的字符数。</p>
<span id="more"></span>

<p>函数<code>strftime()</code>的操作有些类似于<code>sprintf()</code>：识别以百分号(%)开始的格式命令集合，格式化输出结果放在一个字符串中。格式化命令说明串 strDest中各种日期和时间信息的确切表示方法。格式串中的其他字符原样放进串中。格式命令列在下面，它们是区分大小写的。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">%</span>a 星期几的简写
<span class="token operator">%</span>A 星期几的全称
<span class="token operator">%</span>b 月分的简写
<span class="token operator">%</span>B 月份的全称
<span class="token operator">%</span>c 标准的日期的时间串
<span class="token operator">%</span>C 年份的后两位数字
<span class="token operator">%</span>d 十进制表示的每月的第几天
<span class="token operator">%</span>D 月<span class="token operator">/</span>天<span class="token operator">/</span>年
<span class="token operator">%</span>e 在两字符域中，十进制表示的每月的第几天
<span class="token operator">%</span>F 年<span class="token operator">-</span>月<span class="token operator">-</span>日
<span class="token operator">%</span>g 年份的后两位数字，使用基于周的年
<span class="token operator">%</span>G 年分，使用基于周的年
<span class="token operator">%</span>h 简写的月份名
<span class="token operator">%</span>H <span class="token number">24</span>小时制的小时
<span class="token operator">%</span>I <span class="token number">12</span>小时制的小时
<span class="token operator">%</span>j 十进制表示的每年的第几天
<span class="token operator">%</span>m 十进制表示的月份
<span class="token operator">%</span>M 十时制表示的分钟数
<span class="token operator">%</span>n 新行符
<span class="token operator">%</span>p 本地的AM或PM的等价显示
<span class="token operator">%</span>r <span class="token number">12</span>小时的时间
<span class="token operator">%</span>R 显示小时和分钟：hh<span class="token operator">:</span>mm
<span class="token operator">%</span>S 十进制的秒数
<span class="token operator">%</span>t 水平制表符
<span class="token operator">%</span>T 显示时分秒：hh<span class="token operator">:</span>mm<span class="token operator">:</span>ss
<span class="token operator">%</span>u 每周的第几天，星期一为第一天 （值从<span class="token number">0</span>到<span class="token number">6</span>，星期一为<span class="token number">0</span>）
<span class="token operator">%</span>U 第年的第几周，把星期日做为第一天（值从<span class="token number">0</span>到<span class="token number">53</span>）
<span class="token operator">%</span>V 每年的第几周，使用基于周的年
<span class="token operator">%</span>w 十进制表示的星期几（值从<span class="token number">0</span>到<span class="token number">6</span>，星期天为<span class="token number">0</span>）
<span class="token operator">%</span>W 每年的第几周，把星期一做为第一天（值从<span class="token number">0</span>到<span class="token number">53</span>）
<span class="token operator">%</span>x 标准的日期串
<span class="token operator">%</span>X 标准的时间串
<span class="token operator">%</span>y 不带世纪的十进制年份（值从<span class="token number">0</span>到<span class="token number">99</span>）
<span class="token operator">%</span>Y 带世纪部分的十制年份
<span class="token operator">%</span>z，<span class="token operator">%</span>Z 时区名称，如果不能得到时区名称则返回空字符。
<span class="token operator">%</span><span class="token operator">%</span> 百分号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果想显示现在是几点了，并以12小时制显示，就象下面这段程序：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">＃include <span class="token string">"time.h"</span>
＃include <span class="token string">"stdio.h"</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
<span class="token class-name">time_t</span> lt<span class="token punctuation">;</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
lt<span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ptr<span class="token operator">=</span><span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">strftime</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"It is now %I %p"</span><span class="token punctuation">,</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//其运行结果为：</span>
<span class="token comment">//It is now 4PM</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>而下面的程序则显示当前的完整日期：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">＃include
＃include

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>newtime<span class="token punctuation">;</span>
<span class="token keyword">char</span> tmpbuf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">time_t</span> lt1<span class="token punctuation">;</span>
<span class="token function">time</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
newtime<span class="token operator">=</span><span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">strftime</span><span class="token punctuation">(</span> tmpbuf<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">"Today is %A, day %d of %B in the year %Y.n"</span><span class="token punctuation">,</span> newtime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span>tmpbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//运行结果：</span>
<span class="token comment">//Today is Saturday, day 30 of July in the year 2005.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu上安装fqterm</title>
    <url>/install-fqterm-on-ubuntu/</url>
    <content><![CDATA[<p>相信在windows上用惯了fterm的你，一定很不习惯用ubuntu的shell模式去访问论坛吧。偶也一直痛苦其中。直到同事邓哥哥儿给推荐了fqterm。这个简直就是windows下的fterm。</p>
<p>安装很简单，直接sudo apt-get install fqterm就可以了。为了方便使用，可以把它添加到面板上，然后再为它找个fterm的图标。这下完美了吧。还可以最小化到系统托盘。</p>
<p><img src="//img.gagahappy.cn/blog/2009/05/003.png"></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu initrd.img 制作</title>
    <url>/ubuntu-initrdimg/</url>
    <content><![CDATA[<p>今天开机，出现_Unable to mount root fs on unknown_-<em>block</em>(<em>0</em>,<em>0</em>)，导致不能进入系统。在网上搜了一大把，全说是编译内核时，才可能出现这种情况。经分析，系统的内核本身就是好的，查看启动菜单项，发现是卡在了<code>/initrd.img-2.6.28-12-generic</code>这里，查找对应文件，发现内容居然为空。如果在启动时选择进入2.6.28-11-generic，则成功进入系统（看来在升级的时候还是把旧内核留下为上策啊。一旦出现类似情况，还可以进入老系统！）。</p>
<p>原因找到就好办多了，重新制作一个/initrd.img-2.6.28-12-generic文件即可。进入 /lib/modules下与内核对应该的文件夹，运行 <code>mkinitramfs -o /boot/initrd.img-xxx</code>然后重新启动系统。OK。又能进入Ubuntu 9.04的怀抱了。</p>
<blockquote>
<p>总结：</p>
</blockquote>
<ul>
<li>遇到问题一定要分析，不要盲目的跟随网上的解决方法，必须先分析出错原因。否则如果真是按照网上的说法去重新编译内核的话，不但麻烦，一旦失败，又会引来其它新的问题。</li>
<li>本人同样也遇到了<code>Unable to mount root fs on unknown_-_block_(_0_,_0_)</code> 这个问题，但它仅是丢失initrd.img－XXX文件造成的，所以我们只要重新生成这个文件，一切就都OK了。</li>
</ul>
<p>PS：Ubuntu 貌拟在非正常关机的情况下，对文件的保护是相当脆弱啊。居然能造成文件丢失。晕之</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>wordpress永久链接设置方式</title>
    <url>/wordpress-set-permalink/</url>
    <content><![CDATA[<p>wordpress永久链接几种很实用的设置方式</p>
<blockquote>
<p>如果说域名是一个博客在互联网上的代表一个人的话，那么永久链接地址就是门牌号码。只有通过永久链接，你才能找到找个人。由此可见，永久链接在博客中的重要性。对于wordpress 用户而言，掌握以下六个技巧，则能够让别人更好的找到你的博客。</p>
</blockquote>
<p>如何设置Wordpress的永久链接Permalinks</p>
<ul>
<li>首先得确认你的服务器支持mod_rewrite模块（现在很多php主机都支持）和主目录可写，就可以到Options -&gt;; Permalinks 里面设置了</li>
<li>然后确定你使用什么结构的Permalinks？</li>
</ul>
<blockquote>
<p>网络上流传的一种方式“/yyyy-mm/post-name.html”，这也类似Blogger和TypePad(MT)缺省使用的结构“/yyyy /mm/post-name.html”。而WordPress.com则是使用的这样的目录结构“/yyyy/mm/dd/post-name/”，另 外据说“/post-name/”比“/post-name.html”这样的结构更有排名优势（如果这样的话，那么Blogger和TypePad的 SEO都没有WordPress.com做得好？）。</p>
</blockquote>
<span id="more"></span>

<p>而一些使用WordPress自架博客的人也喜欢“/yyyy/mm/dd/post-name/”这样的结构，因为这样看起来条例比较清晰，按照年月日 来整理文章，缺点就是目录层次太深。有人建议对于个人博客这种小型网站来说，可以直接使用“/post-name/”这样的扁平式结构，对搜索引擎有利 （很多CMS也是使用这样的结构，如:Neowin、cnbeta）。</p>
<blockquote>
<p>这里指出：<br>并不是物理结构比较深的网页就不容易被搜索引擎收录，收录的容易与否是在于离主页有几次点击的距离，而不是它的物理位置，所以我们无论使用哪种 目录结构都可以，搜索引擎通常会遍历至少三层子目录。还要知道比目录层次更为重要的是，你的网页是否有很多来自其它网站的反向链接？也就是说一个高质量的 网页，就算在第4、5层子目录，搜索引擎同样会收录它。</p>
</blockquote>
<p>所以八卦粥现在使用的目录结构是“/post-name/”这样，因为我喜欢。</p>
<p>比较流行的Permalinks设置方案：</p>
<pre class="line-numbers language-none"><code class="language-none">类似“&#x2F;2007&#x2F;03&#x2F;15&#x2F;post-name&#x2F;”式目录结构（例子：WordPress.com）
Permalinks写法：&#x2F;%year%&#x2F;%monthnum%&#x2F;%day%&#x2F;%postname%&#x2F;

类似“&#x2F;2007&#x2F;03&#x2F;15&#x2F;post-name.html”式目录结构（例子：boingboing.net）
Permalinks写法：&#x2F;%year%&#x2F;%monthnum%&#x2F;%day%&#x2F;%postname%.html

类似“&#x2F;2007&#x2F;03&#x2F;post-name&#x2F;”式目录结构（例子：WordPress.org blog）
Permalinks写法：&#x2F;%year%&#x2F;%monthnum%&#x2F;%postname%&#x2F;

类似“&#x2F;2007&#x2F;03&#x2F;post-name.html”式目录结构（例子：Blogger、TypePad）
Permalinks写法：&#x2F;%year%&#x2F;%monthnum%&#x2F;%postname%.html

类似“&#x2F;123.html”式目录结构（例子：livejournal、百度空间）
Permalinks写法：&#x2F;%post_id%.html

类似“&#x2F;post-name&#x2F;”式目录结构
Permalinks写法：&#x2F;%postname%&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改友好链接（Permalinks）后要做的事:<br>如果别的网站链接的地址、搜索引擎收录的地址是你以前的，那么点击过来就会出现404错误，找不到这个文件，就是因为这个原因一直不敢修改我的Permalinks。现在有了Permalinks Migration Plugin就不用担心了，安装激活这个插件后，当有人访问你原来的地址时会自动转到新地址，需要重新设置Permalinks的人必备。</p>
<blockquote>
<p>转 自： 大芦稀饭的博客（<a href="http://www.913q.com/120.html%EF%BC%89">http://www.913q.com/120.html）</a></p>
</blockquote>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>首页总算是基本完成</title>
    <url>/finish-index/</url>
    <content><![CDATA[<p>这几天一直忙着做首页。都没时间来这里了。经过N天的忙碌，首页终于算是基本完成了，目前在ubuntu 下的firefox，及windows下的firefox,IE6,IE8下都能正常显示。但个别地方还是有细微的差别，目前已经没有精力去解决了。是不是通过了W3C认证的页面均能在各个浏览器下显示正常（无个体差异）。</p>
<p>在做首页的过程中。我简直是越来越“爱死”IE6了。痛并快乐着</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>让netbeans支持monaco字体</title>
    <url>/netbeans-monaco-fonts/</url>
    <content><![CDATA[<p>monaco字体是苹果操作系统下的一款字体，很艺术性，个人感觉比较接近手写。代码用这种字体显示相当漂亮。</p>
<p>以下操作均是在ubuntu的操作系统上，如果你是windows请自己谷歌 or 百度吧</p>
<ol>
<li>先在/usr/share/fonts/下新建一个文件夹mac<br><code>sudo mkdir /usr/share/fonts/mac</code></li>
<li>然后把下载的monaco字体复制到此文件夹下<br><code>sudo cp ［路径＋*.ttf］ /usr/share/fonts/mac</code></li>
<li>开始安装</li>
</ol>
<span id="more"></span>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/share/fonts/mac/
<span class="token function">sudo</span> mkfontscale
（创建字体的fonts.scale文件，它用来控制字体旋转缩放）
<span class="token function">sudo</span> mkfontdir
（创建字体的fonts.dir文件，它用来控制字体粗斜体产生）
<span class="token function">sudo</span> fc-cache -fv <span class="token function">sudo</span> fc-cache -fv
（建立字体缓存信息，也就是让系统认识字体）

<span class="token comment"># 然后再重新登录系统，就可以在netbeans中使用monaco字体。注：monaco的字体只有在调到18号字的时候才能完美显示，否则是相当的难看的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>删除字体，直接删除mac文件夹，然后 <code>sudo fc-cache -fv</code>如果你的代码中不需要对中文进行支持，那么你就不用再往下看了。由于monaco并不支持中文，所以页面中的中文字体全都变成了方块。解决方法如下</p>
<ol>
<li>修改$JAVA_HOME/jre/lib/目录下的fontconfig.properties文件，如果没有，可以将fontconfig.properties.src复制一份成为fontconfig.properties</li>
<li>在Font File Names下加入filename.-apple-monaco-medium-r-normal–0-0-0-0-m-0-iso8859-1=/usr/share/fonts/mac/MONACO.TTF（请根据你自己的实际情况进行修改）</li>
<li>在# Component Font Mappings下加入allfonts.monaco=-apple-monaco-medium-r-normal–0-0-0-0-m-0-iso8859-1(后经实践不用加上这个也可以)</li>
<li>修改所有monospaced.xxx.latin-1, 修改为-apple-monaco-medium-r-normal–0-0-0-0-m-0-iso8859-1<br>保存后重新启动netbeans。现在中文正常显示了吧。什么，你的还不行，那恭喜你了。请自己去谷歌 or 百度一下吧。</li>
</ol>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>netbeans</tag>
      </tags>
  </entry>
  <entry>
    <title>svn 查看提交日志</title>
    <url>/svn-commit-log/</url>
    <content><![CDATA[<p>查看某一阶段的版本提交信息 svn log -r M:n(M与n为版本号)</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>试用dropbox</title>
    <url>/try-use-dropbox/</url>
    <content><![CDATA[<p>DropBox,也是一种网络服务，可以把文件上传到服务器，并下载，就像是网络U盘。在你的PC机上可以安装一个DropBox客户端，它会在你的电脑上创那建一个特殊的文件夹，在这个文件夹里面可以创建你自己的文件及文件夹，DropBox会自动帮你把它们上传到服务器。并且DropBox还会记录你每一次对文件的操作。通过这个记录，可以很清楚的了解对某个文件进行了哪些操作。同时你还可以向他人共享你的文档。<img src="//img.gagahappy.cn/blog/2009/06/screenshot.png" alt="dropbox" title="dropbox"></p>
<p>通过DropBox你可以把经常要带回家办公的文件上传，到家DropBox会自动把文件下载到你的电脑上，你就可以像操作电脑上的其它文件一样的去操作它了。省去了每次还要把文件烤到U盘上的麻烦，也不用担心U盘被丢。</p>
<p>获取方法，去到网站注册个用户就行～</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 英文环境 中文输入法</title>
    <url>/ubuntu-ime/</url>
    <content><![CDATA[<p>如果你在安装Ubuntu9.04时选择的语言包是非英文的，那么当你切换成英文包时，而又想使用输入法。请在“使用输入法引擎（IEM）输入复杂字符”打勾，否则在切换后不能使用输入法。</p>
<p>网上还有一种解决方法，也可以实现在英文界面下，使用输入法。</p>
<ol>
<li>sudo dpkg-reconfigure locales<br>改默认locale为en_US.UTF-8，这个时候注销重启x的话应该还是中文界面。</li>
<li>sudo gedit /etc/environment</li>
</ol>
<span id="more"></span>

<p>将其改为如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">LC_CTYPE</span><span class="token operator">=</span><span class="token string">"zh_CN.UTF-8"</span>
<span class="token assign-left variable"><span class="token environment constant">LC_NUMERIC</span></span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>
<span class="token assign-left variable"><span class="token environment constant">LC_TIME</span></span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>
<span class="token assign-left variable">LC_COLLATE</span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>
<span class="token assign-left variable"><span class="token environment constant">LC_MONETARY</span></span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>
<span class="token assign-left variable">LC_MESSAGES</span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>
<span class="token assign-left variable"><span class="token environment constant">LC_PAPER</span></span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>
<span class="token assign-left variable"><span class="token environment constant">LC_NAME</span></span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>
<span class="token assign-left variable"><span class="token environment constant">LC_ADDRESS</span></span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>
<span class="token assign-left variable"><span class="token environment constant">LC_TELEPHONE</span></span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>
<span class="token assign-left variable"><span class="token environment constant">LC_MEASUREMENT</span></span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>
<span class="token assign-left variable"><span class="token environment constant">LC_IDENTIFICATION</span></span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>
<span class="token assign-left variable"><span class="token environment constant">LC_ALL</span></span><span class="token operator">=</span>
<span class="token assign-left variable"><span class="token environment constant">LANGUAGE</span></span><span class="token operator">=</span><span class="token string">"zh_CN:zh:en_US:en"</span>
<span class="token assign-left variable">GST_ID3_TAG_ENCODING</span><span class="token operator">=</span>GBK
<span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>zh_CN.UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>叵测的CSS</title>
    <url>/ugly-css/</url>
    <content><![CDATA[<p>在给表单数据排版时。例如让一个录入框和一个提交按钮对齐。最好使用表格去实现。如果用DIV的话，发现很难让提交按钮和录入框水平对齐。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>敏捷</title>
    <url>/agile/</url>
    <content><![CDATA[<p>再说一遍：敏捷已经是一个被搞烂的词，下一个将是精益。有追求的企业和个人现在就应该开始寻找新的增长点。让别人敏捷去吧。</p>
<p>转自互联网</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Chrome操作系统的官方博客全文</title>
    <url>/chromeos/</url>
    <content><![CDATA[<p><img src="//img.gagahappy.cn/blog/2009/07/bj.jpg" alt="bj" title="bj"></p>
<p>以上内容转自互联网</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>修改hosts文件翻墙登录twitter</title>
    <url>/hosts-to-gladder-twitter/</url>
    <content><![CDATA[<p>Twitter第2次遭遇GFW封锁，通过修改/etc/hosts 达到翻墙的目的，登录twitter。</p>
<blockquote>
<p>修改hosts文件</p>
</blockquote>
<ul>
<li>ubuntu /etc/hosts</li>
<li>windows WINDOWS\system32\drivers\etc\hosts</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none"># twitter
128.121.146.228 twitter.com
168.143.162.101 assets1.twitter.com
168.143.162.101 static.twitter.com
168.143.162.101 assets0.twitter.com
168.143.162.101 assets2.twitter.com
168.143.162.101 assets3.twitter.com
168.143.162.101 assets4.twitter.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>twitter</tag>
      </tags>
  </entry>
  <entry>
    <title>Hotspot Shield</title>
    <url>/hotspot-shield/</url>
    <content><![CDATA[<p>Hotspot Shield是一款国外免费自动搜索VPN代理软件，能够有效保护你的个人隐私以及访问你想访问的网站。对于苦于无法访问某些国外著名网站，以及受困于公司内部被Websense所限制的网站，甚至实现绕过国外某些网站对中国IP地址的限制的朋友，这一VPN代理软件，不仅速度快，而且稳定性强</p>
<p>安装并运行了Hotspot Shield以后，状态栏会有个红色的盾牌，这样还不行，因为红色代表disconnect，你还没连接上，你需要按一下connect那么VPN才算连接上了，此时盾牌变成绿色。连接上以后会跳出一个IE窗口，表示你已连接上并显示出连接数据，比如说你用的端口等等。接着，你就可以去上你要的网站了。用 U或FG不经特殊设置，可直接使用的是IE内核浏览器；用Tor+FF不经特殊设置，用的是Firefox，不过，一旦把Hotspot Shield连接上以后无论是IE还是FF都行，任君选择啊！不过呢，如果你此时开着Q那么就麻烦你重新登陆一下了，因为连接了VPN以后，外界所识别到你的IP地址已经改变。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Hotspot Shield</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 wine</title>
    <url>/install-wine/</url>
    <content><![CDATA[<h4 id="安装-wine"><a href="#安装-wine" class="headerlink" title="安装 wine"></a>安装 wine</h4><p>Ubuntu 官方自带了 wine ， 但是推荐用 winehq 官方提供的最新版本 wine ， 新版本解决了很多以前显得麻烦的问题， 请照下边说的来安装</p>
<p>先增加签名::</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -q http://wine.budgetdedicated.com/apt/387EE263.gpg? -O- <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>

<h4 id="增加-wine-源，按你的-Ubuntu-版本执行下边相应的程序"><a href="#增加-wine-源，按你的-Ubuntu-版本执行下边相应的程序" class="headerlink" title="增加 wine 源，按你的 Ubuntu 版本执行下边相应的程序"></a>增加 wine 源，按你的 Ubuntu 版本执行下边相应的程序</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Ubuntu Jaunty <span class="token punctuation">(</span><span class="token number">9.04</span><span class="token punctuation">)</span> 请执行这个::

<span class="token function">sudo</span> <span class="token function">wget</span> http://wine.budgetdedicated.com/apt/sources.list.d/jaunty.list? -O /etc/apt/sources.list.d/winehq.list
Ubuntu Intrepid <span class="token punctuation">(</span><span class="token number">8.10</span><span class="token punctuation">)</span> 请执行这个::

<span class="token function">sudo</span> <span class="token function">wget</span> http://wine.budgetdedicated.com/apt/sources.list.d/intrepid.list? -O /etc/apt/sources.list.d/winehq.list
Ubuntu Hardy <span class="token punctuation">(</span><span class="token number">8.04</span><span class="token punctuation">)</span> 请执行这个::

<span class="token function">sudo</span> <span class="token function">wget</span> http://wine.budgetdedicated.com/apt/sources.list.d/hardy.list? -O /etc/apt/sources.list.d/winehq.list
Ubuntu Gutsy <span class="token punctuation">(</span><span class="token number">7.10</span><span class="token punctuation">)</span> 请执行这个::

<span class="token function">sudo</span> <span class="token function">wget</span> http://wine.budgetdedicated.com/apt/sources.list.d/gutsy.list? -O /etc/apt/sources.list.d/winehq.list
Ubuntu Feisty <span class="token punctuation">(</span><span class="token number">7.04</span><span class="token punctuation">)</span> 请执行这个::

<span class="token function">sudo</span> <span class="token function">wget</span> http://wine.budgetdedicated.com/apt/sources.list.d/feisty.list -O /etc/apt/sources.list.d/winehq.list
Ubuntu Edgy <span class="token punctuation">(</span><span class="token number">6.10</span><span class="token punctuation">)</span> 请执行这个::

<span class="token function">sudo</span> <span class="token function">wget</span> http://wine.budgetdedicated.com/apt/sources.list.d/edgy.list? -O /etc/apt/sources.list.d/winehq.list
Ubuntu Dapper <span class="token punctuation">(</span><span class="token number">6.06</span><span class="token punctuation">)</span> 请执行这个::

<span class="token function">sudo</span> <span class="token function">wget</span> http://wine.budgetdedicated.com/apt/sources.list.d/dapper.list? -O /etc/apt/sources.list.d/winehq.list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接下来，可以打开一个终端，执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> wine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>来安装，或者点击</p>
<blockquote>
<p>开始菜单-&gt;; 系统-&gt;; 系统管理-&gt;; 新立得软件包管理器，在里边选中 wine ， 点安装</p>
</blockquote>
<h4 id="初始设置，加快-wine-速度"><a href="#初始设置，加快-wine-速度" class="headerlink" title="初始设置，加快 wine 速度"></a>初始设置，加快 wine 速度</h4><p>由于 X locale 的问题， 默认 wine 会轮询 x core fonts ，使得 wine 很慢，请先执行<code>sudo sed -i -e &#39;/GBK/,/^&#125;/d&#39; /usr/share/X11/locale/zh_CN.UTF-8/XLC_LOCALE</code></p>
<h4 id="修改-wine-外观"><a href="#修改-wine-外观" class="headerlink" title="修改 wine 外观"></a>修改 wine 外观</h4><p>默 认的 wine 字体、主题、颜色等不太合适，可以用这 [Hiweed] 的 wine 配置 新建一个文本文件 hiweed_green_color.reg 写入(在9.04的源中安装的wine无法导入以下reg文件，可能是由于regedit不兼容空格造成的，将下面这段中每行前的第一个空格删除可能会解 决问题)::</p>
<p>代码如下</p>
<pre class="line-numbers language-none"><code class="language-none">REGEDIT4
[HKEY_LOCAL_MACHINESystemCurrentControlSetHardware ProfilesCurrentSoftwareFonts]
&quot;FIXEDFON.FON&quot;&#x3D;&quot;&quot;
&quot;FONTS.FON&quot;&#x3D;&quot;&quot;
&quot;LogPixels&quot;&#x3D;dword:00000060
&quot;OEMFONT.FON&quot;&#x3D;&quot;&quot;
[HKEY_CURRENT_USERSoftware\Wine\Fonts\Replacements]
@&#x3D;&quot;AR PL ShanHeiSun Uni&quot;
&quot;Arial&quot;&#x3D;&quot;AR PL ShanHeiSun Uni&quot;
&quot;Fixedsys&quot;&#x3D;&quot;AR PL ShanHeiSun Uni&quot;
&quot;Microsoft Sans Serif&quot;&#x3D;&quot;AR PL ShanHeiSun Uni&quot;
&quot;MingLiU&quot;&#x3D;&quot;AR PL ShanHeiSun Uni&quot;
&quot;MS UI Gothic&quot;&#x3D;&quot;AR PL ShanHeiSun Uni&quot;
&quot;PMingLiU&quot;&#x3D;&quot;AR PL ShanHeiSun Uni&quot;
&quot;Simsun&quot;&#x3D;&quot;AR PL ShanHeiSun Uni&quot;
&quot;Songti&quot;&#x3D;&quot;AR PL ShanHeiSun Uni&quot;
&quot;System&quot;&#x3D;&quot;AR PL ShanHeiSun Uni&quot;
&quot;Tahoma&quot;&#x3D;&quot;AR PL ShanHeiSun Uni&quot;
&quot;Terminal&quot;&#x3D;&quot;AR PL ShanHeiSun Uni&quot;
&quot;宋体&quot;&#x3D;&quot;文鼎PL细上海宋Uni&quot;
[HKEY_CURRENT_USERSoftware\Wine\X11 Driver]
&quot;ClientSideAntiAliasWithRender&quot;&#x3D;&quot;N&quot;
[HKEY_LOCAL_MACHINESoftwareMicrosoftWindows NTCurrentVersionFontSubstitutes]
&quot;MS Shell Dlg&quot;&#x3D;&quot;文鼎PL细上海宋Uni&quot;
&quot;MS Shell Dlg 2&quot;&#x3D;&quot;文鼎PL细上海宋Uni&quot;
&quot;System&quot;&#x3D;&quot;AR PL ShanHeiSun Uni&quot;
[HKEY_CURRENT_USERControl Panel\Colors]
&quot;ActiveBorder&quot;&#x3D;&quot;239 235 230&quot;
&quot;ActiveTitle&quot;&#x3D;&quot;0 153 11&quot;
&quot;AppWorkspace&quot;&#x3D;&quot;128 128 128&quot;
&quot;Background&quot;&#x3D;&quot;58 110 165&quot;
&quot;ButtonAlternateFace&quot;&#x3D;&quot;180 180 180&quot;
&quot;ButtonDkShadow&quot;&#x3D;&quot;64 64 64&quot;
&quot;ButtonFace&quot;&#x3D;&quot;232 227 221&quot;
&quot;ButtonHilight&quot;&#x3D;&quot;255 255 255&quot;
&quot;ButtonLight&quot;&#x3D;&quot;239 235 230&quot;
&quot;ButtonShadow&quot;&#x3D;&quot;128 128 128&quot;
&quot;ButtonText&quot;&#x3D;&quot;0 0 0&quot;
&quot;GradientActiveTitle&quot;&#x3D;&quot;166 202 240&quot;
&quot;GradientInactiveTitle&quot;&#x3D;&quot;192 192 192&quot;
&quot;GrayText&quot;&#x3D;&quot;128 128 128&quot;
&quot;Hilight&quot;&#x3D;&quot;0 153 11&quot;
&quot;HilightText&quot;&#x3D;&quot;255 255 255&quot;
&quot;HotTrackingColor&quot;&#x3D;&quot;0 0 255&quot;
&quot;InactiveBorder&quot;&#x3D;&quot;192 192 192&quot;
&quot;InactiveTitle&quot;&#x3D;&quot;232 227 221&quot;
&quot;InactiveTitleText&quot;&#x3D;&quot;0 0 0&quot;
&quot;InfoText&quot;&#x3D;&quot;0 0 0&quot;
&quot;InfoWindow&quot;&#x3D;&quot;255 255 225&quot;
&quot;Menu&quot;&#x3D;&quot;232 227 221&quot;
&quot;MenuBar&quot;&#x3D;&quot;232 227 221&quot;
&quot;MenuHilight&quot;&#x3D;&quot;0 0 0&quot;
&quot;MenuText&quot;&#x3D;&quot;0 0 0&quot;
&quot;Scrollbar&quot;&#x3D;&quot;239 235 230&quot;
&quot;TitleText&quot;&#x3D;&quot;255 255 255&quot;
&quot;Window&quot;&#x3D;&quot;255 255 255&quot;
&quot;WindowFrame&quot;&#x3D;&quot;0 0 0&quot;
&quot;WindowText&quot;&#x3D;&quot;0 0 0&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再用 regedit 导入这个reg，执行<code> regedit hiweed_green_color.reg</code><br>如果 <code>.wine/drive_c/windows/fonts/</code>下没有文鼎的字体文件，应该用以下命令连接</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -s /usr/share/fonts/TTF/odosung.ttc ~/.wine/drive_c/windows/Fonts/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>乱码解决方法</p>
<ol>
<li>首先拷贝simsun.ttc字体进入~/.wine/drive_c/windows/Fonts/</li>
<li>修改注册表文件~/.wine/system.reg：</li>
</ol>
<p>将[Software\Microsoft\WindowsNT\CurrentVersion\FontSubstitutes] 中的：</p>
<blockquote>
<p>“MS Shell Dlg”=”Tahoma”<br>“MS Shell Dlg 2″=”Tahoma”</p>
</blockquote>
<p>改为：</p>
<blockquote>
<p>“MS Shell Dlg”=”SimSun”<br>“MS Shell Dlg 2″=”SimSun”</p>
</blockquote>
<p>当然，如果你有兴趣，也可以将这个部分的其他字体都转换成SimSun。</p>
<h4 id="中文支持"><a href="#中文支持" class="headerlink" title="中文支持"></a>中文支持</h4><p>用法：</p>
<ol>
<li>安装 winehq 官方的 wine 相应版本(请参考:<a href="http://wiki.ubuntu.org.cn/Wine)%EF%BC%9B">http://wiki.Ubuntu.org.cn/Wine)；</a><br>2）载相应版本的补丁包；</li>
<li>解压(先进入补丁包在所在目录)：<br>代码: <code>tar -xvvf wine-1.1.25_amd64_gdi32.dll.so.tar.bz2</code><br>4）然后输入命令：</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Hardy amd64:</span>
<span class="token comment"># 代码:</span>
<span class="token function">sudo</span> <span class="token function">mv</span> /usr/lib32/wine/gdi32.dll.so gdi32.dll.so.backup
<span class="token function">sudo</span> <span class="token function">cp</span> gdi32.dll.so /usr/lib32/wine

<span class="token comment"># Hardy i386:</span>
<span class="token comment"># 代码:</span>
<span class="token function">sudo</span> <span class="token function">mv</span> /usr/lib/wine/gdi32.dll.so gdi32.dll.so.backup
<span class="token function">sudo</span> <span class="token function">cp</span> gdi32.dll.so /usr/lib/wine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>补丁下在地址：<a href="http://forum.ubuntu.org.cn/viewtopic.php?f=121&amp;t=131400">http://forum.Ubuntu.org.cn/viewtopic.php?f=121&amp;t=131400</a></p>
<h4 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h4><p>如果在英文环境下使用wine，用env LANG=zh_CN.UTF-8 wine “运行的程序”。</p>
<p>wine的字体美化：</p>
<p>打开字体的防锯齿：</p>
<blockquote>
<p>REGEDIT4<br>[HKEY_CURRENT_USER\Software\Wine\X11 Driver]<br>“ClientSideAntiAliasWithCore”=”Y”<br>“ClientSideAntiAliasWithRender”=”Y”<br>“ClientSideWithRender”=”Y”</p>
</blockquote>
<p>打开字体的平滑功能：</p>
<blockquote>
<p>REGEDIT4<br>[HKEY_CURRENT_USER\Control Panel\Desktop]<br>“FontSmoothing”=”2”<br>“FontSmoothingType”=dword:00000002<br>“FontSmoothingGamma”=dword:00000578<br>“FontSmoothingOrientation”=dword:00000001</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>为gem添加源</title>
    <url>/add-gem-sources/</url>
    <content><![CDATA[<p>为gem添加源</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">sudo gem sources <span class="token operator">--</span>add http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>gems<span class="token punctuation">.</span>github<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>让netbeans支持雅黑字体</title>
    <url>/monaco-font/</url>
    <content><![CDATA[<p>将字体copy到＄JAVA_HOME/jre/lib/fonts/fallback/下即可</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>S60最强Twitter客户端 Gravity</title>
    <url>/s60-twitter-gravity/</url>
    <content><![CDATA[<p>S60最强Twitter客户端 Gravity，官方网址<a href="http://mobileways.de/">http://mobileways.de/</a></p>
<p><img src="//img.gagahappy.cn/blog/2009/08/914695395a3ceb08db19a3a392ed4dbd.jpg" alt="914695395a3ceb08db19a3a392ed4dbd" title="914695395a3ceb08db19a3a392ed4dbd"></p>
<p>Gravity提供的主要功能包括:</p>
<ul>
<li>多账户管理和完美的界面图片上传预览功能；API调整设置；短信邮件转发</li>
<li>对Tweet中的链接的多样处理</li>
<li>搜索tag的定义，保存与自动更新</li>
<li>自动更新 Timeline ， Reply ， DMs ，并可定义更新间隔</li>
<li>多类别消息的声音、振动提醒</li>
<li>支持 wifi , gprs 的无缝自动切换！</li>
<li>命令行操作的支持；延时（scheduled）发推 等等</li>
</ul>
<span id="more"></span>

<hr>
<ul>
<li>可以登录多个Twitter帐号，还支持identi.ca帐号</li>
<li>可以方便的Reply，RT，收藏Tweets，方便的Follow和Unfollow某人</li>
<li>可以直接将手机上的图片发送到MobyPicture, TwitPic, TwitGoo sterous等到Twitter进行分享，这个很不错</li>
<li>可以方便的使用左右导航键切换timeline-&gt;reply-&gt;message;</li>
<li>可以设置Timeline/Replies/DM’以及Searches铃声提醒</li>
<li>提供了全屏模式支持更换主题</li>
<li>提供组群功能，可以将Twitter好友建立不同的组群进行管理</li>
<li>可以自定义搜索引擎，也就是说twitter search可以自定义搜索api网址</li>
<li>Twitter API URL 和 Twitter Search API URL 要设置为自建的API，才能正常使用，强烈建议自建一个，速度快很多</li>
<li>要用新的源代码上传到appspot才能用自建api搜索</li>
</ul>
<hr>
<p><strong>Gravity的使用</strong>（一些不容易上手的问题）– 引自iFanr</p>
<ul>
<li>极简直接使用原则，直接按键输入就是发新Tweet，无需快捷键，无需新建，Just do it！直接输入是全局处理的，你可以在账号内的任何界面直接输入写推。这是比黑莓或是Twibble快捷键更简便的处理方式。</li>
<li>Gravity支持多个wifi，Grps，3G自动切换。比如，你在办公室有wif热点，家有wifi热点，路上有Grps，都可以自动切换。</li>
<li>支持长按和短按结合。Gravity是支持按键长按的，所以善用Gravity 追踪历史推是很爽的。想想你在电脑如何看旧推？点击@user ，Gravity 亦同，在推下面的功能条定位到某@user，长按确定键，该用户的所有推就列出来了，非常便利。</li>
<li>Gravity的设置选项与界面相关，不同位置左键弹出菜单选项不同，功能安排也一样（如1.19版本新增profile view就在功能条列表中)。</li>
<li>支持离线时直接scheduled处理，手机在线时自动发送。</li>
</ul>
<hr>
<p><strong>翻墙方法:</strong></p>
<ol>
<li>在Gravity中新建登陆帐号，用户名和密码使用原来twitter的无需更改，</li>
<li>输入twitter用户名与密码，不要选SSl，</li>
<li>类型选择identi.ca，</li>
<li>API base 填入：nest.onedd . net /api(<span style="color: blue;">Gravity v1.20.5597</span>及以前版本支持这个api。最好<span style="color: blue;">打造自己的Twitter API Proxy</span>)。</li>
</ol>
<p>就这么简单，无需SSL，无需Hosts文件，无需XX手机。你也无需担心速度，无需担心－33错误，Gravity已经放飞了你的twitter世界。设置很简单，速度很快捷，使用很顺畅。</p>
<p><strong>提示network error - 36解决方法</strong>：使用这个api ：0x00111.appspot.com/api</p>
<p>使用感受：就如上面介绍的一样，使用起来相当顺手，字体很清析，启动速度很快，总之95%是相当的满意，那5%是没有找到相关GPRS流量的信息，还有就是如何删除已经添加的账号</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>twitter</tag>
      </tags>
  </entry>
  <entry>
    <title>又上来了</title>
    <url>/twitter-gladder-again/</url>
    <content><![CDATA[<p>twitter 又被墙了。好在又上来了。真是不容易啊。不过好在手机一直能上。哈哈哈哈。这里就不做关键字了。回头变河蟹就惨了</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>twitter</tag>
      </tags>
  </entry>
  <entry>
    <title>Virtual Box 虚拟机共享主机文件</title>
    <url>/virtual-box-share-file/</url>
    <content><![CDATA[<p>先要安装“增强功能”</p>
<p><code>cd /cdrom sudo ./VboxLinuxAdditions.run</code></p>
<p>安装完毕后重启。重启完成后依然点击设备菜单，选择共享文件夹。然后添加共享文件夹。注意注意，下面便是要注意的问题所在了。</p>
<p>一定要自己手动填写一个共享文件夹的名称，千万不要用默认的名称！比如，你选择的文件夹名字是sharedfolder，其默认的共享文件夹名称也是这个，这时候一定要改掉成别的名字，否则在Ubuntu里不能使用。</p>
<p>接下来在Ubuntu系统里运行类似的命令，替换成你的共享文件夹名称和挂载点即可。</p>
<p><code>sudo mount -t vboxsf Your_folder_name Your_mount_point</code></p>
<p>OK，现在ubuntu和主机可以互传文件了。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>virtualbox</tag>
      </tags>
  </entry>
  <entry>
    <title>virtualbox  host 连接虚拟机</title>
    <url>/virtualbox-vis-host/</url>
    <content><![CDATA[<p>virtualbox host 连接虚拟机，以ADSL方式上网时。貌似要先连上ADSL，再开启虚拟机，否则虚拟机无法找到网络。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>virtualbox</tag>
      </tags>
  </entry>
  <entry>
    <title>bashrc 生效</title>
    <url>/bashrc-at-once-work/</url>
    <content><![CDATA[<p>在配置bashrc文件后，如果想使其立即生效，可以不用采用登出的方法，而直接键入下列命令即可</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ./.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>fcitx 光标不能跟随</title>
    <url>/fcitx-cursor-not-follow/</url>
    <content><![CDATA[<p>昨天安上fcitx后。发现光标不能跟随。重新安装中。</p>
<p>接上回。最后暴力解决—scim被卸载之。二者并存，因为fcitx总是莫名的消失，只能通过重新启动程序，才能继续使用输入法。暴力卸载实属无奈。之后光标正常，自动跟随，一切正常。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fcitx</tag>
      </tags>
  </entry>
  <entry>
    <title>firefox 收藏夹 导入 IE</title>
    <url>/firefox-bookmarks-import-ie/</url>
    <content><![CDATA[<p>莫莫同学打来电话，说firefox有些问题，问能不能把收藏夹里的书签导入IE。这还真给偶问住了，以前从没弄过啊（基本不用IE），上网搜索，解决方法如下</p>
<p>1、打开firefox，点击书签－管理书签－导入以及备份－导出HTML－保存（默认文件名为bookmarks.html）<br>2、用记事本打开bookmarks.html，点击 另存为－选择编码方式为ANSI，保存文件<br>3、打开IE，点击 文件－导入与导出－下一步－导入收藏夹－选择bookmarks.html －下一步－选中收藏夹－完成。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>firefox</tag>
      </tags>
  </entry>
  <entry>
    <title>CSV 导入 mysql数据库</title>
    <url>/import-csv-to-mysql/</url>
    <content><![CDATA[<p>mysql-&gt; LOAD DATA INFILE ‘file_name’<br>mysql-&gt; INTO TABLE tbl_name<br>mysql-&gt; FIELDS TERMINATED BY ‘,’</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Opera 发布预告</title>
    <url>/opera-next/</url>
    <content><![CDATA[<p>Opera 发布预告</p>
<p><img src="//img.gagahappy.cn/blog/2009/09/Screenshotaaa.png" alt="Screenshotaaa" title="Screenshotaaa"></p>
<p><a href="http://www.opera.com/next">http://www.opera.com/next</a></p>
<p>随着时间之轮的演进，拼图会不断揭开，上面的文字也不断完整。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>opera</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlserver日志文件太大解决方法</title>
    <url>/sqlserver-log-too-big/</url>
    <content><![CDATA[<p>在SQL Server数据库中事务日志起着至关重要的作用：</p>
<blockquote>
<p>它持续记录数据库所有的事务和这些事务对数据库所做的修改;一旦数据库出现灾难事件，就需要事务日志来进行近期数据的恢复操作。</p>
</blockquote>
<p>不过，要得到任何好处都要付出的相应代价：</p>
<blockquote>
<p>在活动数据库中，事务日志会消耗大量的存储空间，如果你不做任何干预，事务逻辑日志会一直增长，直到塞满存储这些日志文件的所有可用空间。SQL Server提供了两个用来平衡事务日志对空间巨大需求的操作：截断事务日志和收缩事务日志。</p>
</blockquote>
<span id="more"></span>
<h4 id="日志截断"><a href="#日志截断" class="headerlink" title="日志截断"></a>日志截断</h4><blockquote>
<p>截断事务日志操作就是清除事务日志文件中的非活动记录。一般情况下，SQL Server能够自动执行截断操作，不需要人工干预管理。截断的频率取决于数据库的使用程度。你每进行一次完整恢复模式或大容量日志恢复模式的数据库备份，SQL Server就会截断一次事务日志。如果是在简单恢复模式下(不能还原事务日志)，SQL Server会在每个检查点之后截断事务日志。</p>
</blockquote>
<p>你也可以通过间接的方式手动驱使SQL Server执行事务日志截断操作，需要运行备份操作，不过你可以给SQL Server下指示，表明你只想执行事务日志的备份操作，不做执行其他任何操作。通过以下的T-SQL命令可以达到上述效果：<code>BACKUP LOG WITH TRUNCATE_ONLY;</code></p>
<h4 id="日志收缩"><a href="#日志收缩" class="headerlink" title="日志收缩"></a>日志收缩</h4><blockquote>
<p>截断日志虽然确实从日志文件中清除了事务，但并不会真正减小物理日志文件的大小。SQL Server希望事务日志最终会扩展到其截断前的大小，所以截断不会释放已经分配给日志的硬盘空间。如果你的日志在某一时刻人为地扩展到某个大小，却再也无法恢复到这个大小的话可就麻烦大了。</p>
</blockquote>
<p>在这种情况下，要释放硬盘物理空间做其他用途，就要手动进行事务日志文件收缩操作。你可以使用以下的T-SQL命令来实现日志文件收缩：<code>DBCC SHRINKFILE(,)</code></p>
<p>上面命令中的desired_shrink_size指的是你想要回收的硬盘空间大小(以MB为单位)。你可以在执行完事务日志截断操作之后立即回收大部分的磁盘空间。</p>
<p>####SQL Server 的事务日志意外增大或充满的处理方法</p>
<p>事务日志文件Transaction Log  File是用来记录数据库更新情况的文件，扩展名为ldf。</p>
<blockquote>
<p>在 SQL Server 7.0 和 SQL Server 2000 中，如果设置了自动增长功能，事务日志文件将会自动扩展。一般情况下，在能够容纳两次事务日志截断之间发生的最大数量的事务时，事务日志的大小是稳定的，事务日志截断由检查点或者事务日志备份触发。</p>
</blockquote>
<p>然而，在某些情况下，事务日志可能会变得非常大，以致用尽空间或变满。通常，在事务日志文件占尽可用磁盘空间且不能再扩展时，您将收到如下错误消息：</p>
<blockquote>
<p>Error:9002, Severity:17, State:2<br>The log file for database ‘%.*ls’ is full.</p>
</blockquote>
<p>除了出现此错误消息之外，SQL Server 还可能因为缺少事务日志扩展空间而将数据库标记为 SUSPECT。有关如何从此情形中恢复的其他信息，请参见 SQL Server 联机帮助中的“磁盘空间不足”主题。</p>
<p>另外，事务日志扩展可能导致下列情形：</p>
<blockquote>
<ul>
<li>非常大的事务日志文件。</li>
</ul>
</blockquote>
<ul>
<li>事务可能会失败并可能开始回滚。</li>
<li>事务可能会用很长时间才能完成。</li>
<li>可能发生性能问题。</li>
<li>可能发生阻塞现象。</li>
</ul>
<p>原因：事务日志扩展可能由于以下原因或情形而发生：</p>
<blockquote>
<ul>
<li>未提交的事务</li>
</ul>
</blockquote>
<ul>
<li>非常大的事务</li>
<li>操作：DBCC DBREINDEX 和 CREATE INDEX</li>
<li>在从事务日志备份还原时</li>
<li>客户端应用程序不处理所有结果</li>
<li>查询在事务日志完成扩展之前超时，您收到假的“Log Full”错误消息</li>
<li>未复制的事务</li>
</ul>
<p>解决方法：日志文件满而造成SQL数据库无法写入文件时，可用两种方法</p>
<ul>
<li><p>一种方法：清空日志。</p>
<blockquote>
<ol>
<li>打开查询分析器，输入命令 <code>DUMP TRANSACTION 数据库名 WITH NO_LOG</code></li>
<li>再打开企业管理器–右键你要压缩的数据库–所有任务–收缩数据库–收缩文件–选择日志文件–在收缩方式里选择收缩至XXM,这里会给出一个允许收缩到的最小M数,直接输入这个数,确定就可以了。</li>
</ol>
</blockquote>
</li>
<li><p>另一种方法有一定的风险性，因为SQL SERVER的日志文件不是即时写入数据库主文件的，如处理不当，会造成数据的损失。</p>
<blockquote>
<ol>
<li>删除LOG<br>分离数据库 企业管理器－＞服务器－＞数据库－＞右键－＞分离数据库</li>
<li>删除LOG文件<br>附加数据库 企业管理器－＞服务器－＞数据库－＞右键－＞附加数据库<br>此法生成新的LOG，大小只有500多K。</li>
</ol>
</blockquote>
</li>
</ul>
<p>注意：</p>
<blockquote>
<p>建议使用第一种方法。如果以后,不想要它变大。<br>SQL2000下使用：<br>在数据库上点右键-&gt;属性-&gt;选项-&gt;故障恢复-模型-选择-简单模型。<br>或用SQL语句：<br>alter database 数据库名 set recovery simple</p>
</blockquote>
<p>另外，如上图中数据库属性有两个选项，与事务日志的增长有关：</p>
<blockquote>
<ul>
<li>Truncate log on checkpoint(此选项用于SQL7.0，SQL 2000中即故障恢复模型选择为简单模型)</li>
<li>当执行CHECKPOINT 命令时如果事务日志文件超过其大小的70% 则将其内容清除在开发数据库时时常将此选项设置为True Auto shrink</li>
<li>定期对数据库进行检查当数据库文件或日志文件的未用空间超过其大小的25%时，系统将会自动缩减文件使其未用空间等于25%</li>
<li>当文件大小没有超过其建立时的初始大小时不会缩减文件缩减后的文件也必须大于或等于其初始大小</li>
<li>对事务日志文件的缩减只有在对其作备份时或将 Truncate log on checkpoint 选项设为True 时才能进行</li>
<li>注意：一般立成建立的数据库默认属性已设好，但碰到意外情况使数据库属性被更改，请用户清空日志后，检查数据库的以上属性，以防事务日志再次充满。</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>新浪围脖 大家快去抢啊</title>
    <url>/t-sina/</url>
    <content><![CDATA[<p>刚刚注册的。大家也去体验一把吧</p>
<p>新浪围脖。大家快去抢啊。</p>
<p><a href="http://t.sina.com.cn/invite/att_reqback.php?code=kbpUkda">http://t.sina.com.cn/invite/att_reqback.php?code=kbpUkda</a></p>
<p><img src="//img.gagahappy.cn/blog/2009/09/Screenshot12.png" alt="Screenshot12" title="Screenshot12"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>让twitterfox支持API Proxy</title>
    <url>/twitterfox-proxy/</url>
    <content><![CDATA[<p>twitterfox 是firefox的一个插件，最重要的是它是twitter的客户端之一。通过它也可以访问twitter。从官方下载的twitterfox不支持api proxy设置，本人从设置里找了半天也没有找到在哪。特别提供 <a href="http://www.gagahappy.com/twitterfox-proxy/twitterfox-1-8-3-myurl-1-2/">twitterfox.1.8.3.myurl.1.2</a></p>
<p>在Customized URL 中设置API Proxy即可</p>
<p><img src="//img.gagahappy.cn/blog/2009/09/twitter.png" alt="twitter" title="twitter"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>twitter</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu flash 中文 乱码</title>
    <url>/ubuntu-flash-messy-code/</url>
    <content><![CDATA[<p>由于ubuntu9.04是英文环境，导致在flash中的文本字体全是乱码，请注意，这里所指的乱码不是一个个方框的那种，而是一些符号。网上的解决办法大都是删除/etc/fonts/conf.d/49-sansserif.conf文件、要么就是把此文件的倒数第4行的字体设置为系统所支持的中文字体，这种办法只对ubuntu是中文环境的情况下起作用，在英文环境下依旧不能解决问题。如果有谁解决了，麻烦请告之方法。在这里先谢谢了！</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>flash</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 编译安装 fcitx</title>
    <url>/ubuntu-install-fcitx/</url>
    <content><![CDATA[<blockquote>
<p>Fcitx  小企鹅输入法最大的特点是容易安装和使用，无论是拼音还是码表输入都极为强劲。在输入法的自定义使用上也极为灵活。</p>
</blockquote>
<h1 id="最为关键的是可以完美解决ubuntu切换窗口时，丢失焦点的BUG"><a href="#最为关键的是可以完美解决ubuntu切换窗口时，丢失焦点的BUG" class="headerlink" title="最为关键的是可以完美解决ubuntu切换窗口时，丢失焦点的BUG"></a>最为关键的是可以完美解决ubuntu切换窗口时，丢失焦点的BUG</h1><p>注意事项: 请删除主目录下 .fcitx文件夹（如以前安装过旧版本）</p>
<h4 id="首先安装编译环境"><a href="#首先安装编译环境" class="headerlink" title="首先安装编译环境"></a>首先安装编译环境</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> automake gettext libtool libxpm-dev libxft-dev libxtst-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>

<h4 id="下载最新文件"><a href="#下载最新文件" class="headerlink" title="下载最新文件"></a>下载最新文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://www.fcitx.org/main/?q<span class="token operator">=</span>node/9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> jxvf fcitx-xx.tar.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> fcitx
.autogen.sh
./configure --prefix<span class="token operator">=</span>/opt/fcitx 指定安装位置，默认不用指定
<span class="token function">make</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre class="line-numbers language-none"><code class="language-none">在&#x2F;etc&#x2F;X11&#x2F;xinit&#x2F;xinput.d建立文件 fcitx
内容：
XIM&#x3D;fcitx
XIM_PROGRAM&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;fcitx  &#x2F;&#x2F;这里要根据你实际安装的情况
XIM_ARGS&#x3D;&quot;&quot;
GTK_IM_MODULE&#x3D;XIM
QT_IM_MODULE&#x3D;XIM
DEPENDS&#x3D;&quot;fcitx&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">im-switch -s fcitx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果出现 Please install following packages “( fcitx )” . 不用理会</p>
<h4 id="界面美化，仅附上录入框文字配色。默认的不好看。"><a href="#界面美化，仅附上录入框文字配色。默认的不好看。" class="headerlink" title="界面美化，仅附上录入框文字配色。默认的不好看。"></a>界面美化，仅附上录入框文字配色。默认的不好看。</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">光标色<span class="token operator">=</span><span class="token number">102</span> <span class="token number">159</span> <span class="token number">66</span>
主窗口背景色<span class="token operator">=</span><span class="token number">255</span> <span class="token number">255</span> <span class="token number">255</span>
主窗口线条色<span class="token operator">=</span><span class="token number">203</span> <span class="token number">202</span> <span class="token number">186</span>
主窗口输入法名称色<span class="token operator">=</span><span class="token number">153</span> <span class="token number">153</span> <span class="token number">153</span> <span class="token number">102</span> <span class="token number">159</span> <span class="token number">66</span> <span class="token number">56</span> <span class="token number">134</span> <span class="token number">230</span>
输入窗背景色<span class="token operator">=</span><span class="token number">255</span> <span class="token number">255</span> <span class="token number">255</span>
输入窗提示色<span class="token operator">=</span><span class="token number">2</span> <span class="token number">89</span> <span class="token number">196</span>
输入窗用户输入色<span class="token operator">=</span><span class="token number">255</span> <span class="token number">0</span> <span class="token number">132</span>
输入窗序号色<span class="token operator">=</span><span class="token number">0</span> <span class="token number">66</span> <span class="token number">200</span>
输入窗第一个候选字色<span class="token operator">=</span><span class="token number">0</span> <span class="token number">99</span> <span class="token number">200</span>
<span class="token comment">#该颜色值只用于拼音中的用户自造词</span>
输入窗用户词组色<span class="token operator">=</span><span class="token number">0</span> <span class="token number">99</span> <span class="token number">200</span>
输入窗提示编码色<span class="token operator">=</span><span class="token number">255</span> <span class="token number">0</span> <span class="token number">132</span>
<span class="token comment">#五笔、拼音的单字/系统词组均使用该颜色</span>
输入窗其它文本色<span class="token operator">=</span><span class="token number">56</span> <span class="token number">134</span> <span class="token number">230</span>
输入窗线条色<span class="token operator">=</span><span class="token number">203</span> <span class="token number">202</span> <span class="token number">186</span>
输入窗箭头色<span class="token operator">=</span><span class="token number">193</span> <span class="token number">227</span> <span class="token number">151</span>
虚拟键盘窗背景色<span class="token operator">=</span><span class="token number">220</span> <span class="token number">220</span> <span class="token number">220</span>
虚拟键盘窗字母色<span class="token operator">=</span><span class="token number">80</span> <span class="token number">0</span> <span class="token number">0</span>
虚拟键盘窗符号色<span class="token operator">=</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>fcitx</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu opera 中文 字体</title>
    <url>/ubuntu-opera-font-set/</url>
    <content><![CDATA[<p>opera10默认设置的中文字体在显示时忽大忽小，而且还有些模糊，极其难看，需要将其美化一下。</p>
<p>解决方法<br>1、修改/usr/share/opera/defaults/font.ini<br>2、将日文和韩文都注释掉</p>
<span id="more"></span>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">;</span> Japanese fonts
<span class="token punctuation">;</span>family:IPA*<span class="token operator">=</span>japanese excellent try-first
<span class="token punctuation">;</span>family:kochi*<span class="token operator">=</span>japanese good try-first
<span class="token punctuation">;</span>family:VL*<span class="token operator">=</span>japanese verygood try-first

<span class="token punctuation">;</span> Korean fonts
<span class="token punctuation">;</span>family:baekmuk gulim<span class="token operator">|</span><span class="token assign-left variable">undotum</span><span class="token operator">=</span>korean sans-serif excellent try-first
<span class="token punctuation">;</span>family:baekmuk batang<span class="token operator">|</span><span class="token assign-left variable">unbatang</span><span class="token operator">=</span>korean serif verygood
<span class="token punctuation">;</span>family:baekmuk <span class="token assign-left variable">dotum</span><span class="token operator">=</span>korean sans-serif good
<span class="token punctuation">;</span>family:ungungseo<span class="token operator">|</span><span class="token assign-left variable">unshinmun</span><span class="token operator">=</span>korean serif good
<span class="token punctuation">;</span>family:baekmuk*<span class="token operator">|</span>un*<span class="token operator">=</span>korean
<span class="token punctuation">;</span> Optional Korean blacklist
<span class="token punctuation">;</span>family:bandal<span class="token operator">|</span>bangwool<span class="token operator">|</span>guseul<span class="token operator">|</span>eunjin*<span class="token operator">=</span>blacklist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3、只保留一种中文字体，其他相关设置全都注释掉</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">;</span> Chinese fonts
<span class="token punctuation">;</span>family:Simsun<span class="token operator">|</span>FZSongTi<span class="token operator">|</span>新宋体<span class="token operator">|</span>宋体<span class="token operator">|</span>方正宋体<span class="token operator">|</span>文泉驿正黑<span class="token operator">|</span>文泉驛正黑<span class="token operator">|</span>WenQuanYi Zen <span class="token assign-left variable">Hei</span><span class="token operator">=</span>chinese-s excellent try-first
<span class="token punctuation">;</span>family:WenQuanYi Bitmap <span class="token assign-left variable">Song</span><span class="token operator">=</span>chinese-s verygood try-first
family:微软雅黑
<span class="token punctuation">;</span>family:文鼎ＰＬ简报宋<span class="token operator">|</span>AR PL UMing*<span class="token operator">|</span>AR PL SungtiL <span class="token assign-left variable">GB</span><span class="token operator">=</span>chinese-s good try-first，你也可以直接使用?family:WenQuanYi Bitmap <span class="token assign-left variable">Song</span><span class="token operator">=</span>chinese-s verygood try-first也是可以的。在本文中是把opera的字体设置为微软雅黑了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>4、删除~/.opera文件夹，此步非常重要。如果没删除的话，刚才所做的修改将不能生效。</p>
<p>5、重新打开opera。字体正常了吧，如果还不正常，那你就再去接着google吧。</p>
<p>6、点击 工具－首选项－高级－字体，把里面的字体全都设置成你喜欢的字体就可了，这样opera的工具栏及菜单栏上的文字也变成了你喜欢的字体。起到了美化效果</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>opera</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 输入法 光标跟随</title>
    <url>/ubuntu-scim-follow/</url>
    <content><![CDATA[<p>在scim输入法中进行如下设定：</p>
<p>scim设置－&gt;全局设置－&gt;将预编辑字符串嵌入到客户端中 前的勾去掉</p>
<p>scim设置-&gt;gtk-&gt;嵌入式候选词标的勾去掉</p>
<p>重启scim</p>
<p>打开终端,输入 pkill scim</p>
<p>然后输入 scim -d </p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>wordpress wap</title>
    <url>/wordpress-wap/</url>
    <content><![CDATA[<p> mobilepress 是一款非常优秀的wordpress插件，安装之后可以让你的blog瞬间支持wap手机版，并且手机版的页面也是相当的美观，有iphone和default两种主题供你选择。</p>
<p>现在越来越多的年青人喜欢用手机上网，mobilepress可以让你的blog轻松的支持，而又不至于花掉他们大量的流量。</p>
<p><img src="//img.gagahappy.cn/blog/2009/09/wordpress_wap.png" alt="wordpress_wap" title="wordpress_wap"></p>
<p>PS：在亮亮同学的帮助下终于完成安装，咱也有wap版的网站了！</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>belongs_to选项中的primary_key</title>
    <url>/belongs-to-primary-key/</url>
    <content><![CDATA[<p>在定义mode时给belongs_to加入了:primary_key选项，运行时报错，提示Unknown primary-key。去网上寻找答案，在rubyonrails的官方网站的关于rails2.3.3新特性介绍中看到有这么一段描述</p>
<blockquote>
<p>:primary_key option for belongs_to for broader support of legacy schemas and those using a separate UUID primary key: belongs_to :employee, :primary_key =&gt; ‘SSN’, :foreign_key =&gt; ‘EMPID’</p>
</blockquote>
<p>原来直到rails2.3.3时primary_key才被belongs_to支持，偶用的是rails2.3.2，难怪会出现Unknown primary-key错误。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>安装dabr必要条件</title>
    <url>/dabr-install-require/</url>
    <content><![CDATA[<p>在你安装dabr时，请确认已满足以下必要条件</p>
<ol>
<li>php版本 5.2＋因为要用到 json_decode() function)</li>
<li>确保主机支持 mcrypt 模块</li>
<li>确保主机支持 mod_rewrite 模块</li>
</ol>
<p>偶在安装后运行时遇到</p>
<ol>
<li><code>Parse error: syntax error, unexpected &#39;=&#39;, expecting &#39;)&#39; in /data/home/zz43d1/htdocs/dabr/common/user.php on line 52</code><br>可能就是php版本低于5.2造成的，偶用的是万网的主机，为php4.4.9。</li>
<li>如果主机不支持 mcrypt 模块，可以用第三方方法解决。这个在网上已经有方案了。</li>
</ol>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>twitter</tag>
      </tags>
  </entry>
  <entry>
    <title>Discuz URL 静态化</title>
    <url>/discuz-url-rewrite/</url>
    <content><![CDATA[<p>Apache Web Server（独立主机用户）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>IfModule mod_rewrite.c<span class="token operator">></span>
    RewriteEngine On
    RewriteRule ^<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>/archiver/<span class="token punctuation">((</span>fid<span class="token operator">|</span>tid<span class="token punctuation">)</span>-<span class="token punctuation">[</span><span class="token punctuation">\</span>w<span class="token punctuation">\</span>-<span class="token punctuation">]</span>+<span class="token punctuation">\</span>.html<span class="token punctuation">)</span>$ <span class="token variable">$1</span>/archiver/index.php?<span class="token variable">$2</span>
    RewriteRule ^<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>/forum-<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>+<span class="token punctuation">)</span>-<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>+<span class="token punctuation">)</span><span class="token punctuation">\</span>.html$ <span class="token variable">$1</span>/forumdisplay.php?fid<span class="token operator">=</span><span class="token variable">$2</span><span class="token operator">&amp;</span><span class="token assign-left variable">page</span><span class="token operator">=</span><span class="token variable">$3</span>
    RewriteRule ^<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>/thread-<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>+<span class="token punctuation">)</span>-<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>+<span class="token punctuation">)</span>-<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>+<span class="token punctuation">)</span><span class="token punctuation">\</span>.html$ <span class="token variable">$1</span>/viewthread.php?tid<span class="token operator">=</span><span class="token variable">$2</span><span class="token operator">&amp;</span><span class="token assign-left variable">extra</span><span class="token operator">=</span>page<span class="token punctuation">\</span>%3D<span class="token variable">$4</span><span class="token operator">&amp;</span><span class="token assign-left variable">page</span><span class="token operator">=</span><span class="token variable">$3</span>
    RewriteRule ^<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>/space-<span class="token punctuation">(</span>username<span class="token operator">|</span>uid<span class="token punctuation">)</span>-<span class="token punctuation">(</span>.+<span class="token punctuation">)</span><span class="token punctuation">\</span>.html$ <span class="token variable">$1</span>/space.php?<span class="token variable">$2</span><span class="token operator">=</span><span class="token variable">$3</span>
    RewriteRule ^<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>/tag-<span class="token punctuation">(</span>.+<span class="token punctuation">)</span><span class="token punctuation">\</span>.html$ <span class="token variable">$1</span>/tag.php?name<span class="token operator">=</span><span class="token variable">$2</span>
<span class="token operator">&lt;</span>/IfModule<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>Apache Web Server（虚拟主机用户）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>IfModule mod_rewrite.c<span class="token operator">></span>
    <span class="token comment"># 将 RewriteEngine 模式打开</span>
    RewriteEngine On
    <span class="token comment"># 修改以下语句中的/discuz 为你的论坛目录地址，如果程序放在根目录中，请将 /discuz 修改为 /</span>
    RewriteBase /discuz
    <span class="token comment"># Rewrite 系统规则请勿修改</span>
    RewriteRule ^archiver/<span class="token punctuation">((</span>fid<span class="token operator">|</span>tid<span class="token punctuation">)</span>-<span class="token punctuation">[</span><span class="token punctuation">\</span>w<span class="token punctuation">\</span>-<span class="token punctuation">]</span>+<span class="token punctuation">\</span>.html<span class="token punctuation">)</span>$ archiver/index.php?<span class="token variable">$1</span>
    RewriteRule ^forum-<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>+<span class="token punctuation">)</span>-<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>+<span class="token punctuation">)</span><span class="token punctuation">\</span>.html$ forumdisplay.php?fid<span class="token operator">=</span><span class="token variable">$1</span><span class="token operator">&amp;</span><span class="token assign-left variable">page</span><span class="token operator">=</span><span class="token variable">$2</span>
    RewriteRule ^thread-<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>+<span class="token punctuation">)</span>-<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>+<span class="token punctuation">)</span>-<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>+<span class="token punctuation">)</span><span class="token punctuation">\</span>.html$ viewthread.php?tid<span class="token operator">=</span><span class="token variable">$1</span><span class="token operator">&amp;</span><span class="token assign-left variable">extra</span><span class="token operator">=</span>page<span class="token punctuation">\</span>%3D<span class="token variable">$3</span><span class="token operator">&amp;</span><span class="token assign-left variable">page</span><span class="token operator">=</span><span class="token variable">$2</span>
    RewriteRule ^space-<span class="token punctuation">(</span>username<span class="token operator">|</span>uid<span class="token punctuation">)</span>-<span class="token punctuation">(</span>.+<span class="token punctuation">)</span><span class="token punctuation">\</span>.html$ space.php?<span class="token variable">$1</span><span class="token operator">=</span><span class="token variable">$2</span>
    RewriteRule ^tag-<span class="token punctuation">(</span>.+<span class="token punctuation">)</span><span class="token punctuation">\</span>.html$ tag.php?name<span class="token operator">=</span><span class="token variable">$1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>gem你咋开始自做主张了呢</title>
    <url>/gem-autoupdate-bug/</url>
    <content><![CDATA[<p>刚用gem给rails安装一插件，哪知道gem顺手居然把activesupport给升级至2.3.4了，谁让你升级的，卸之~</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>netbeans 6</title>
    <url>/netbeans-6-7-1/</url>
    <content><![CDATA[<p>刚刚安装了netbeans 6.7.1，目前的感觉是启动速度比以前的版本都要快</p>
<p><img src="//img.gagahappy.cn/blog/2009/10/netbeans6.7.1.png" alt="netbeans6.7.1" title="netbeans6.7.1"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>netbeans 回车换行</title>
    <url>/netbeans-wrapping/</url>
    <content><![CDATA[<p>netbeans怎么没有回车换行的选项啊，找了半天没找到！</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>netbeans</tag>
      </tags>
  </entry>
  <entry>
    <title>修复损坏的winrar文件</title>
    <url>/repair-zip-file/</url>
    <content><![CDATA[<p>在解压zip或rar文件时，如果可以看到压缩文件内的文件列表，却不能解压时（通常提示压缩文件头或压缩文件尾损坏），可以用下面的方法解决多数不能解压的文件</p>
<p>点击winrar工具栏上的工具菜单-修复压缩文件，然后一路Next，一般都会大功造成。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>射手播放器3正式版</title>
    <url>/splayer/</url>
    <content><![CDATA[<p>《射手播放器3.0正式版》(SPlayer V3.0)自动下载字幕的播放器[安装包]</p>
<p><img src="//img.gagahappy.cn/blog/2009/10/thumb4.jpg" alt="射手播放器" title="射手播放器"></p>
<p>软件介绍：<br>射手影音播放器是由射手网创建与维护的开源播放器项目。内核基于MPC（感谢Gabest）、MPC-HC与ffmpeg。采用最新DirectX硬件加速技术，特有画面增益，清晰播放720p、1080p高清。是真正属于中文用户的开源播放器。</p>
<p>PS：试用后发现可以记忆播放的影片进度，即再次打开此影片时，可以从你上次关闭的地方接着播放影片。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu的下载加速器</title>
    <url>/ubuntu-axel/</url>
    <content><![CDATA[<p>在ubuntu中，当你通过源更新系统时，如果此源比较慢的话，可以考虑使用axel ，它可以进行分段下载，从而加快你的下载速度。本人在更新某个国外源软件时下载速度非常慢，大概10K左右，在使用axel后，下载速度为56K（本人ADSL 512），效果还是相当明显滴！</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> --print-uris -y dist-upgrade <span class="token operator">|</span> <span class="token function">grep</span> http <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print <span class="token variable">$1</span>&#125;'</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s/'//g"</span> <span class="token operator">|</span> <span class="token function">xargs</span> -l1 <span class="token function">sudo</span> axel -n5 -a -o /var/cache/apt/archives/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu gedit 乱码</title>
    <url>/ubuntu-gedit-garbled/</url>
    <content><![CDATA[<p>在ubuntu中用gedit打开gb2312的文件时，会出现乱码。</p>
<p>解决方法a</p>
<ol>
<li>进入终端</li>
<li>shell&gt;gconf-editor</li>
<li>依次点击apps-&gt;gedit-2-&gt;preference-&gt;encodings</li>
<li>在auto_detected和show_in_menu两个list类型的键中加入GBK或GB18030（注意：要把这两个值调到列表最前面）</li>
</ol>
<p>解决方法b<br>在终端录入 gedit –encoding=编码 filename也可以解决打开gb2312文件乱码问题</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu mount u盘</title>
    <url>/ubuntu-mount-u-driv/</url>
    <content><![CDATA[<p>如果是ubuntu桌面环境的话，不用mount，接入的U盘就可以直接被系统识别，访问起来非常方便，但如果没有桌面环境呢，比如在ubuntu server端，如何访问U盘呢？</p>
<p>第一步：查看U盘信息</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">fdisk</span> -l 得到类似下面这样的信息

Disk /dev/sdb: <span class="token number">8027</span> MB, <span class="token number">8027897856</span> bytes
<span class="token number">14</span> heads, <span class="token number">22</span> sectors/track, <span class="token number">50907</span> cylinders
Units <span class="token operator">=</span> cylinders of <span class="token number">308</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">157696</span> bytes

Device Boot      Start         End      Blocks   Id  System
/dev/sdb1               <span class="token number">8</span>       <span class="token number">50908</span>     <span class="token number">7838628</span>    <span class="token number">7</span>  HPFS/NTFS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>很容易看出来，这是一块U盘，并且只有一个分区 sdb1，且文件系统为NTFS</p>
<p>第二步：挂载U盘到指定节点</p>
<pre class="line-numbers language-bsh" data-language="bsh"><code class="language-bsh">sudo mount -t ntfs-3g &#x2F;dev&#x2F;sdb1 &#x2F;mnt&#x2F;windows&#x2F;u （／mnt&#x2F;windows&#x2F;u为你要挂载到的节点，这个你可以随便指定。）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后你就可以通过 cd /mnt/windows/u 对U盘上的内容进行访问了。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 2003 授权方式</title>
    <url>/windows-2003-cal/</url>
    <content><![CDATA[<p>windows 2003 授权方式有两种授权模式:</p>
<p>每服务器:该许可证是为每一台服务器购买的许可证,许可证的数量由”同时”连接到服务器的用户的最大数量来决定；每服务器的许可证模式适合用于网络中拥有很多客户端,但在同一时间”同时”访问服务器的客户端数量不多时采用，并且每服务器的许可证模式也适用于网络中服务器的数量不多时采用.在“每服务器”模式许可中，每个连接到特定服务器的并发连接都需要一个单独的客户端访问许可证。</p>
<span id="more"></span>
<p>也就是说，这台服务器在任何时刻都只能支持固定数量的连接。例如，如果您选择具有 5 个许可证的每服务器客户端许可模式，那么这台服务器在任何时刻都只能拥有 5 个并发连接。使用这些连接的客户端不需要其他的许可证。如果组织的专用服务器只有一个用途，而大量不同的用户对其进行访问，那么它们通常偏好每服务器许可模式。例如，一台单独的专用 Extranet 服务器拥有 100 个授权访问该服务器的帐户，但是在任何时刻同时登录的用户都不超过 20 个；</p>
<p>每客户:该许可证模式是为网络中每一个客户端购买一个许可证,这样网络中的客户端就可以合法地访问网络中的任何一台服务器,而不需要考虑”同时”有多少客户端访问服务器；该许可证模式适用于企业中有多台服务器,并且客户端”同时”访问服务器的情况较多时采用.在每设备或每用户模式中，每个访问或使用服务器的设备或用户都需要单独的客户端访问许可证。使用一个客户端访问许可证，特定的设备或用户可以连接到环境中任何数量的服务器。例如，如果您选择具有 5 个许可证的每设备或每用户模式，那么它将允许 5 个用户或设备访问任意数量的服务器，建立任意数量的并发连接。如果组织在环境中拥有承载多种服务的服务器，这就是它们最常用的许可模式</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>www域名终于被google收录</title>
    <url>/www-indexed-by-google/</url>
    <content><![CDATA[<p>前段时间由于网站的域名设置错误，造成google对非www域名的URL进行了收录，虽然网址也被收录了。但效果没有www的好，更改为www域名后，等待被google收录，过了许多天仍不见效果，急人啊，但终于在今天被收录了，虽然只有10条，但终究还是被收录了，哈哈，等待着被google继续收录！</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>php Cannot modify header information 错误解决办法</title>
    <url>/apachecannot-modify-header-information/</url>
    <content><![CDATA[<p>打开 php.ini 然后把 output_buffering 设为 on 。重起apache。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>fcitx 乱码</title>
    <url>/fcitx-garbled/</url>
    <content><![CDATA[<p>设置如下：</p>
<p><code>sudo gedit ~/.fcitx/config</code></p>
<blockquote>
<p>[程序]<br>显示字体(中)=WenQuanYi Bitmap Song<br>显示字体(英)=WenQuanYi Bitmap Song<br>显示字体大小=12<br>主窗口字体大小=12<br>字体区域=zh_CN.UTF-8<br>是否使用AA字体=1<br>是否使用粗体=1</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fcitx</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ri查看Rails的API</title>
    <url>/ri-rails-api/</url>
    <content><![CDATA[<p>使用ri查看Rails的API，首先要进行安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gem <span class="token function">install</span> fastri<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>生成索引</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fastri-server -b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>文档还显示彩色。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>格式化U盘为NTFS</title>
    <url>/u-drive-format-to-ntfs/</url>
    <content><![CDATA[<ol>
<li><p>默认情况下,我们的U盘不能格成NTFS格式</p>
</li>
<li><p>右键U盘属性, 选择硬件,选择U盘,再选择下面的属性</p>
</li>
<li><p>弹出的属性对话框,选择 策略,选择第二个,&quot;为提高性能而优化&quot;然后确定</p>
</li>
<li><p>再选择格式化,就可以选择NTFS格式了</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu 9 Network Manager ADSL无法上网</title>
    <url>/ubuntu-9-10-network-manager-adsl/</url>
    <content><![CDATA[<p>安装了ubuntu 9.10后，用network-manager无法进行adsl连接，折腾了好一阵子，最终解决办法如下：</p>
<p>Linux里面有两套管理网络连接的方案：</p>
<blockquote>
<ol>
<li>/etc/network/interfaces（/etc/init.d/networking）</li>
<li>/Network-Manager</li>
</ol>
</blockquote>
<p>两套方案是冲突的，不能同时共存</p>
<blockquote>
<p>第一个方案适用于没有X的环境，如：服务器；或者那些完全不需要改动连接的场合。<br>第二套方案使用于有桌面的环境，特别是笔记本，搬来搬去，网络连接情况随时会变的。</p>
</blockquote>
<span id="more"></span>

<hr>
<p>他们两个为了避免冲突，又能共享配置，就有了下面的解决方案：</p>
<blockquote>
<ol>
<li>当Network-Manager发现/etc/network/interfaces被改动的时候，则关闭自己（显示为未托管），除非managed设置成真。</li>
<li>当managed设置成真时，/etc/network/interfaces，则不生效。</li>
</ol>
</blockquote>
<p>升级至ubuntu 9.10后，启用network-manager，adsl无法上网，网上说这是ubuntu升级至9.10后的一个bug，解决方法如下</p>
<blockquote>
<ol>
<li>从PPA更新network-manager<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BC8EBFE8
在/etc/apt/sources.list最后加上
deb http://ppa.launchpad.net/network-manager/trunk/ubuntu karmic main
deb-src http://ppa.launchpad.net/network-manager/trunk/ubuntu karmic main
<span class="token function">sudo</span> <span class="token function">aptitude</span> update
<span class="token function">sudo</span> <span class="token function">aptitude</span> safe-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>删除文件<br>把/etc/network/interfaces和/etc/resolv.conf备份一下都删除。（interfaces会在使用pppoeconf配置后生成）</li>
<li>通过Network Manager配置网络链接</li>
<li>重新启动电脑</li>
</ol>
</blockquote>
<p>如果还不行可以修改DSL里的PPP的协议设置</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 9.10 源太慢</title>
    <url>/ubuntu-9-10-sources-list/</url>
    <content><![CDATA[<p>终于升级到ubuntu9.10，总体来说感觉还是不错的，新版本UI设计的更好看了。美中不足的是更新软件源太慢了。找了半天，发现下面二个源的速度还可以</p>
<p>官方源<br>Archive.ubuntu.com更新服务器（欧洲，此为官方源，电信网通用户使用)：</p>
<span id="more"></span>

<blockquote>
<p>deb <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> karmic main restricted universe multiverse<br>deb <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> karmic-security main restricted universe multiverse<br>deb <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> karmic-updates main restricted universe multiverse<br>deb <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> karmic-proposed main restricted universe multiverse<br>deb <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> karmic-backports main restricted universe multiverse<br>deb-src <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> karmic main restricted universe multiverse<br>deb-src <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> karmic-security main restricted universe multiverse<br>deb-src <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> karmic-updates main restricted universe multiverse<br>deb-src <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> karmic-proposed main restricted universe multiverse<br>deb-src <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> karmic-backports main restricted universe multiverse</p>
</blockquote>
<p>苏州源</p>
<blockquote>
<p>deb <a href="http://debian.nctu.edu.tw/ubuntu/">http://debian.nctu.edu.tw/ubuntu/</a> karmic main restricted universe multiverse<br>deb <a href="http://debian.nctu.edu.tw/ubuntu/">http://debian.nctu.edu.tw/ubuntu/</a> karmic-security main restricted universe multiverse<br>deb <a href="http://debian.nctu.edu.tw/ubuntu/">http://debian.nctu.edu.tw/ubuntu/</a> karmic-updates main restricted universe multiverse<br>deb <a href="http://debian.nctu.edu.tw/ubuntu/">http://debian.nctu.edu.tw/ubuntu/</a> karmic-proposed main restricted universe multiverse<br>deb <a href="http://debian.nctu.edu.tw/ubuntu/">http://debian.nctu.edu.tw/ubuntu/</a> karmic-backports main restricted universe multiverse<br>deb-src <a href="http://debian.nctu.edu.tw/ubuntu/">http://debian.nctu.edu.tw/ubuntu/</a> karmic main restricted universe multiverse<br>deb-src <a href="http://debian.nctu.edu.tw/ubuntu/">http://debian.nctu.edu.tw/ubuntu/</a> karmic-security main restricted universe multiverse<br>deb-src <a href="http://debian.nctu.edu.tw/ubuntu/">http://debian.nctu.edu.tw/ubuntu/</a> karmic-updates main restricted universe multiverse<br>deb-src <a href="http://debian.nctu.edu.tw/ubuntu/">http://debian.nctu.edu.tw/ubuntu/</a> karmic-proposed main restricted universe multiverse<br>deb-src <a href="http://debian.nctu.edu.tw/ubuntu/">http://debian.nctu.edu.tw/ubuntu/</a> karmic-backports main restricted universe multiverse</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu mysql 自动启动</title>
    <url>/ubuntu-mysql-add-to-service/</url>
    <content><![CDATA[<p>编译安装mysql后，用chkconfig令命将其加入随机启动</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> mysql.server /etc/init.d/mysql
<span class="token function">chmod</span> +x /etc/init.d/mysql
<span class="token function">chkconfig</span> --add mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>出现下面的错误</p>
<span id="more"></span>
<blockquote>
<p><code>insserv: warning: script &#39;K20acpi-support&#39; missing LSB tags and overrides insserv: warning: current start runlevel(s) (0 6) of script umountfs&#39; overwrites defaults (empty). insserv: warning: current start runlevel(s) (0 6) of script sendsigs&#39; overwrites defaults (empty). insserv: warning: script &#39;gdm&#39; missing LSB tags and overrides insserv: warning: script &#39;acpid&#39; missing LSB tags and overrides insserv: warning: script &#39;hal&#39; missing LSB tags and overrides insserv: warning: script &#39;udevmonitor&#39; missing LSB tags and overrides insserv: warning: script &#39;cron&#39; missing LSB tags and overrides insserv: warning: script &#39;sreadahead&#39; missing LSB tags and overrides insserv: warning: script &#39;anacron&#39; missing LSB tags and overrides insserv: warning: script &#39;httpd2&#39; missing LSB tags and overrides insserv: warning: script &#39;procps&#39; missing LSB tags and overrides insserv: warning: script &#39;hwclock&#39; missing LSB tags and overrides insserv: warning: script &#39;usplash&#39; missing LSB tags and overrides insserv: warning: script &#39;hwclock-save&#39; missing LSB tags and overrides insserv: warning: script &#39;dbus&#39; missing LSB tags and overrides insserv: warning: script &#39;apport&#39; missing LSB tags and overrides insserv: warning: current start runlevel(s) (6) of script reboot&#39; overwrites defaults (empty). insserv: warning: current start runlevel(s) (0 6) of script umountnfs.sh&#39; overwrites defaults (empty). insserv: warning: script &#39;ufw&#39; missing LSB tags and overrides insserv: warning: current start runlevel(s) (0 6) of script umountroot&#39; overwrites defaults (empty). insserv: warning: script &#39;avahi-daemon&#39; missing LSB tags and overrides insserv: warning: script &#39;network-manager&#39; missing LSB tags and overrides insserv: warning: script &#39;atd&#39; missing LSB tags and overrides insserv: warning: script &#39;module-init-tools&#39; missing LSB tags and overrides</code></p>
</blockquote>
<p>很明显，加入自动启动失败。到网上查询无果，最终用ubuntu自带的update-rc.d解决（chkconfig为linux自带，在部分ubuntu版本中（如8.04）被移去）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> update-rc.d mysql defaults
<span class="token function">chkconfig</span> --list mysql

<span class="token operator">=</span><span class="token operator">></span> mysql <span class="token number">0</span>:off  <span class="token number">1</span>:off  <span class="token number">2</span>:on   <span class="token number">3</span>:on   <span class="token number">4</span>:on   <span class="token number">5</span>:on   <span class="token number">6</span>:off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>终于正常了。</p>
<p>疑问：在虚拟机中可以成功用chkconfig将mysql加入到随机启动中，不知道为什么在主机中不能实现，以前在主机上也可以成功将mysql加入随机启动的啊（现在用的是ubuntu9.10）</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>goole wave 头像 不显示</title>
    <url>/wave-picture-not-sho/</url>
    <content><![CDATA[<p>天朝屏蔽了picasa的相册, 因此你只需添加hosts即可,</p>
<p>picasaweb.google.com</p>
<blockquote>
<p>203.208.39.104 picadaweb.google.com<br>203.208.39.104 lh1.ggpht.com<br>203.208.39.104 lh2.ggpht.com<br>203.208.39.104 lh3.ggpht.com<br>203.208.39.104 lh4.ggpht.com<br>203.208.39.104 lh5.ggpht.com<br>203.208.39.104 lh6.ggpht.com</p>
</blockquote>
<p>按照上面的方法，在我重新刷新网页后，所有的头像基本上都正常显示了，包括我刚刚上传的。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>wave不能显示头像原因</title>
    <url>/why-wave-picture-not-show/</url>
    <content><![CDATA[<p>关于wave不能显示头像的问题，在网上搜索后终于找到了答案。</p>
<p>wave上的头像默认读取的是goole account里的配置头像，所以，你的wave头像可以正常显示，自己和别人都能正常看到你的头像。但是，如果你一旦从wave里上传了头像，上传的图片会被传到Picasa，而Picasa是被屏蔽的，所以在wave上传像后，不能正确显示。但最糟糕的是，一旦你从wave里上传了头像，那么wave将不再从google account里读取头像信息，而是直接从Picasa读取，这样，你的头像就再也不能正常显示了。</p>
<p>目前没有什么好的解决方法，有网友说可以在wave里选择搜索互联网上的图片，也可以让头像正常显示，本人试了一下这个方法，依然没有成功。如果您已经解决了这个问题，望告之。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>chrome 不能安装 google工具栏</title>
    <url>/chrome-install-google-tools/</url>
    <content><![CDATA[<p>本来想给chrome安装google工具栏，结果被提示说目前只支持IE和Firefox浏览器。google居然不支持自己的浏览器？ORZ！</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义google chrome安装路径</title>
    <url>/custom-google-chrome-install-path/</url>
    <content><![CDATA[<p>google-chrome在安装时不能选择安装路径，默认是被安装在C盘，所有网页缓存也会被保存在C盘，C盘的空间就会不断的被占用，产生的磁盘碎片也会降低系统的性能，所以，我们务必要把google chrome请出C盘，安装到其它分区。</p>
<ol>
<li><p>把chrome从系统目录提取出来: Vista下，Win+R运行</p>
<blockquote>
<p>%UserProfile%\AppData\Local\Google\Chrome<br>XP下，Win+R运行 %UserProfile%\Local Settings\Application Data\Google\Chrome</p>
</blockquote>
</li>
<li><p>然后把application文件夹复制出来，把文件夹改名为“chrome”(随便什么你喜欢的名字)。然后进入这个文件夹，新建一个文件夹，名字叫做c_profile(随便什么你喜欢的名字)</p>
</li>
<li><p>最后把3.0.195.33,（这是个目录，在你刚刚复制的application文件夹下，其名子会随着chrome的版本而不同，具体视你的文件而定）目录下的所有文件、文件夹移动到chrome.exe同级目录下。</p>
<span id="more"></span></li>
<li><p>在chrome.exe目录初始化配置文件<br>然后Win+R打开命令行，cd 到你复制出来的chrome.exe所在路径，运行</p>
<blockquote>
<p>chrome.exe –first-run –user-data-dir=c_profile</p>
</blockquote>
</li>
<li><p>建立快捷方式，随时呼叫绿色版的Google Chrome<br>好了。Google Chrome已经在当前目录下的est_profile初始化用户配置文件完毕了。</p>
</li>
<li><p>在桌面建立个chrome.exe的快捷方式；右击这个快捷方式，属性，在“目标”后面添加<code>--user-data-dir=c_profile</code></p>
<blockquote>
<p>注意添加的命令行启动参数最前面有个空格。完整路径例子：<br>T:\chrome\chrome.exe –user-data-dir=c_profile</p>
</blockquote>
</li>
<li><p>Google Chrome的精简</p>
<blockquote>
<p>Chrome目录下（原来3.0.195.33目录下的）<br>Installer子目录可以直接删除掉<br>Locales下面只保留en-US.dll和zh-CN.dll就可以了</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>用find和grep查找文件内容</title>
    <url>/find-grep-to-search/</url>
    <content><![CDATA[<p>查找 包含alias字符串的*.conf的文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / -name <span class="token string">"*.conf"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> <span class="token string">"alias"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol>
<li>grep -R -l 一些也可以实现，但是通过管道 | 比单纯用grep 复杂的参数更有效率。</li>
<li>xargs是用来展开find获得的结果，使其作为grep的参数。</li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>google chrome 屏蔽 hotspot shield 广告</title>
    <url>/google-chrome-hotspot-shield-ad/</url>
    <content><![CDATA[<p>突然发现google chrome 可以屏蔽在使用HotSpot Shield时，出现在网页顶端上的广告。吼吼，这不是真的吧。这下在用HotSpot Shield上网时，感觉爽多了。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>chrome</tag>
        <tag>google</tag>
        <tag>Hotspot Shield</tag>
      </tags>
  </entry>
  <entry>
    <title>google docs revision</title>
    <url>/google-docs-revision/</url>
    <content><![CDATA[<p>用google docs已经有一段时间了，感觉它真的是很好用，很人性化，更喜欢它的快捷键，就在刚才， 我发现我更喜欢它了。</p>
<p>刚才打开一个已经写了好久的文档，平时经常对其进行维护，发现以前写的内容全不见了，开始还以为是文档没有加载完所至，于是重新刷新了好几次页面，依旧不起作用，文档依然没有被恢复。当场石化～～～。感觉google docs应该提供了类似版本恢复的功能，经过一番查找，果然被我找到了，它就在 file-&gt;see revision history那里躺着呢！点开后有一个历史版本列表，找到最近的一个进行恢复，丢失的文档终于找了回来。再次被goole的产品所折服。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>终于有PR值了</title>
    <url>/have-pr-value/</url>
    <content><![CDATA[<p>刚刚查了一下本博的PR值，在历经了5个月后，终于有PR值了。虽然目前的值仅仅为1，但毕竟是有了啊，兴奋！（某童鞋不许嘲笑俺）</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 Sphinx</title>
    <url>/install-sphinx/</url>
    <content><![CDATA[<p>Sphinx是什么?<br>简单引用一下官方wiki的文章：</p>
<blockquote>
<p>Sphinx是一个基于SQL的全文检索引擎，可以结合MySQL,PostgreSQL做全文搜索，它可以提供比数据库本身更专业的搜索功能，使得应用程序更容易实现专业化的全文检索。Sphinx特别为一些脚本语言设计搜索API接口，如PHP,Python,Perl,Ruby等，同时为MySQL也设计了一个存储引擎插件。</p>
</blockquote>
<span id="more"></span>

<p>Sphinx的特性：</p>
<blockquote>
<ul>
<li>高速索引 (在新款CPU上,近10 MB/秒);</li>
</ul>
</blockquote>
<ul>
<li>高速搜索 (2-4G的文本量中平均查询速度不到0.1秒);</li>
<li>高可用性 (单CPU上最大可支持100 GB的文本,100M文档);</li>
<li>提供良好的相关性排名</li>
<li>支持分布式搜索;</li>
<li>提供文档摘要生成;</li>
<li>提供从MySQL内部的插件式存储引擎上搜索</li>
<li>支持布尔,短语, 和近义词查询;</li>
<li>支持每个文档多个全文检索域(默认最大32个);</li>
<li>支持每个文档多属性;</li>
<li>支持断词;</li>
<li>支持单字节编码与UTF-8编码;</li>
</ul>
<p>目前安装失败中，郁闷啊！谁知道在已经安装了mysql下怎么安装Sphinx，为什么我重新编译安装mysql后还是不行啊~</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql my.cnf</title>
    <url>/mysql-my-cnf-01/</url>
    <content><![CDATA[<p>在这里加入其它 的 MySQL 服务器配置</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">innodb_flush_log_at_trx_commit&#x3D;1
set-variable &#x3D; innodb_lock_wait_timeout&#x3D;50
#innodb_flush_method&#x3D;fdatasync
#set-variable &#x3D; innodb_thread_concurrency&#x3D;5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>rails2.0快速体验</title>
    <url>/rails-2-quick-show/</url>
    <content><![CDATA[<p>rails2.0快速体验</p>
<p>1、 新建一个Rails程序</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rails todo
<span class="token comment"># 这时使用的是默认的sqlite3做数据库。如果你希望使用mysql，则输入</span>
rails todo -d mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>2、 修改数据库配置文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> todo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>进入项目所在文件夹，找config目录下的database.yml 数据库配置文件,修改数据库用户名与密码配置</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">development<span class="token punctuation">:</span>
   adapter<span class="token punctuation">:</span> mysql
   encoding<span class="token punctuation">:</span> utf8
   database<span class="token punctuation">:</span> todo_development
   username<span class="token punctuation">:</span> root
   password<span class="token punctuation">:</span> root

test<span class="token punctuation">:</span>
  adapter<span class="token punctuation">:</span> mysql
   encoding<span class="token punctuation">:</span> utf8
   database<span class="token punctuation">:</span> todo_test
   username<span class="token punctuation">:</span> root
   password<span class="token punctuation">:</span> root

production<span class="token punctuation">:</span>
   adapter<span class="token punctuation">:</span> mysql
   encoding<span class="token punctuation">:</span> utf8
   database<span class="token punctuation">:</span> todo_production
   username<span class="token punctuation">:</span> root
   password<span class="token punctuation">:</span> root
<span class="token comment">#注意：“：”与后面的字符串之间要有一个空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3、创建数据库</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">rake db<span class="token symbol">:create</span><span class="token symbol">:all</span>
<span class="token comment"># 又一个新东西“rake db:create:all”，它将给你建立起各个数据库，现在不需要你自己去手工搞了。是不是比以前爽了。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>后如果什么反应都没有，则说明数据库创建成功。</p>
<p>4、rails的魔法就在这里开始。</p>
<blockquote>
<p>用脚手架生成一个关于todo的应用<br><code>ruby script/generate scaffold todo title:string body:text done:boolean due:datetime</code></p>
</blockquote>
<blockquote>
<p>运行后会发现生成许多文件，rails帮助我们做了许多事件</p>
</blockquote>
<blockquote>
<p>它生成了todo这个应用的model,view,controller,这不就是MVC吗，已经帮助你生成了最基本的框架，下面你要做的事情就是不断向这个框架里填充东西。</p>
</blockquote>
<p>脚手架又为我们生成了一个创建表的migration(迁移任务)，让我们再次运行迁移任务<br><code>rake db:migrate</code></p>
<p>提示：当你已经熟练掌握rails的开发时，就可以不用脚手架了。</p>
<p>5、让我们使用下rails的魔法吧</p>
<blockquote>
<p>启动我们的项目<br><code>ruby script/server</code><br>然后用浏览器访问下面的链接<a href="http://127.0.0.1:3000/todos">http://127.0.0.1:3000/todos</a><br>搞定了一个todolist</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby 连接字符串</title>
    <url>/ruby-connect-string-method/</url>
    <content><![CDATA[<p>发现如果要把两个字符串连接在一起。如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">a <span class="token operator">=</span> <span class="token string">"abc"</span>
b <span class="token operator">=</span> a + <span class="token string">"de"</span>
<span class="token comment"># 此时b的值为"abcde", 但如果a = nil时，就会抛出未定义“+”的异常，因为此时a为nil。但如果我们改变一下b右边的表达式，将其改为b = "#&#123;a&#125;de"。这时就不会抛出错误了，此时b=> "de"。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>rubymine keymap</title>
    <url>/rubymine-keymap/</url>
    <content><![CDATA[<p>rubymine keymap<br><img src="//img.gagahappy.cn/blog/2009/12/ruby_mine_keymap_view.JPG" alt="ruby_mine_keymap_view" title="ruby_mine_keymap_view"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>rubymine</tag>
      </tags>
  </entry>
  <entry>
    <title>rubymine2 subversion</title>
    <url>/rubymine2-0-subversion/</url>
    <content><![CDATA[<p>发现rubymine2.0默认情况下没有开启subversion管理，更改项目中的一个文件时，即没有修改提示，也不方便提交，记得在rubymine1.0的时候是有这个功能的，于是在rubymine2.0的界面上一顿乱找，总算还是给找到了。</p>
<p>操作方法：打开项目后，点击version control -&gt; enable version control integration 启用即可。这时右击项目属性，就可以看到subversion 选项了。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>rubymine</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 更改mysql默认引擎为Innodb</title>
    <url>/ubuntu-mysql-engineinnodb/</url>
    <content><![CDATA[<p>1 . 查看mysql存储引擎情况： mysql&gt;show engines。 InnoDB | YES，说明此mysql数据库服务器支持InnoDB引擎。<br>2. 设置InnoDB为默认引擎：在配置文件my.cnf中的 [mysqld] 下面加入default-storage-engine=INNODB<br>3. 重启mysql服务器<br>4. 登录mysql数据库，mysql&gt;show engines。如果出现 InnoDB |DEFAULT，则表示设置InnoDB为默认引擎成功。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是PR值</title>
    <url>/what-is-pr/</url>
    <content><![CDATA[<p>PR值全称为PageRank，PageRank(网页级别)是Google用于评测一个网页“重要性”的一种方法。在揉合了诸如Title标识和Keywords标识等所有其它因素之后，Google通过PageRank来调整结果，使那些更具“重要性”的网页在搜索结果中令网站排名获得提升，从而提高搜索结果的相关性和质量。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>wordpress2 升级失败</title>
    <url>/wordpress2-9-upgrade-fails/</url>
    <content><![CDATA[<p>刚刚把WordPress升级到2.9.1，访问后台时提示升级数据库，点继续后提示 “WordPress 2.9 requires MySQL 4.1.2 or higher”，意思就是说WordPress 2.9 至少需要MySQL4.1.2支持。莫非是万网的数据库不支持？查询host数据库版本，上面赫然写着“4.0.27”，果然是数据库版本问题啊？无奈之下只好把ySQL还原到2.8.6了。哎，万网啥时能让低端主机也支持下MySQL5.0啊！</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu jdk 字体反锯齿处理</title>
    <url>/jdk-fontsettings/</url>
    <content><![CDATA[<p>所有的Java程序都使用反锯齿，在~/.profile后面再加上<br>export _JAVA_OPTIONS=’-Dawt.useSystemAAFontSettings=on’ </p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery find children</title>
    <url>/jquery-find-children/</url>
    <content><![CDATA[<p>var objImg = $(this).children(“img”);<br>var objImg = $(this).find(“img”);</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery  object is hidden</title>
    <url>/jquery-object-is-hidden/</url>
    <content><![CDATA[<p>if (objDiv.is(“:hidden”)) {}</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>Got a packet bigger than max_allowed_packet bytes</title>
    <url>/max-allowed-packet-bytes/</url>
    <content><![CDATA[<p>mysql导入数据失败，用命令行导入数据时，mysql提示Got a packet bigger than ‘max_allowed_packet’ bytes错误，意思是说数据包大小超过mysql限制，解决方法如下</p>
<p>修改mysql配置文件</p>
<ol>
<li>在[mysqld]中找到max_allowed_packet，将其值改大即可。</li>
<li>重新启动mysql，再次导入数据，成功！</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>render partial</title>
    <url>/render-partial/</url>
    <content><![CDATA[<p>Renders the same partial with a local variable.<br>render :partial =&gt; “person”, :locals =&gt; { :name =&gt; “david” }</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby与rails版本差异不能连接mysql</title>
    <url>/ruby-rails-not-conn-mysql/</url>
    <content><![CDATA[<blockquote>
<p>由于ruby与rails版本差异，可能会出现在使用低版本的rails时，出现不能连接mysql的情况。</p>
</blockquote>
<p>现象：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">ruby<span class="token operator">/</span>lib<span class="token operator">/</span>ruby<span class="token operator">/</span>gems<span class="token operator">/</span><span class="token number">1.8</span><span class="token operator">/</span>gems<span class="token operator">/</span>activerecord<span class="token operator">-</span><span class="token number">1.15</span><span class="token number">.2</span><span class="token operator">/</span>lib<span class="token operator">/</span>active_record<span class="token operator">/</span>vendor<span class="token operator">/</span>mysql<span class="token punctuation">.</span>rb<span class="token punctuation">:</span><span class="token number">566</span><span class="token symbol">:in</span> initialize<span class="token punctuation">:</span> wrong number of arguments <span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">for</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">ArgumentError</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>解决方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">scramble41</span></span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> message<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0x00</span><span class="token punctuation">.</span>chr <span class="token keyword">if</span> password<span class="token punctuation">.</span><span class="token keyword">nil</span><span class="token operator">?</span> <span class="token keyword">or</span> password<span class="token punctuation">.</span>empty<span class="token operator">?</span>
    buf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x14</span><span class="token punctuation">]</span>
    <span class="token comment">#s1 = Digest::SHA1.new(password).digest</span>
    s1 <span class="token operator">=</span> <span class="token constant">Digest</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">SHA1</span><span class="token punctuation">.</span><span class="token keyword">new</span>
    s1 <span class="token operator">&lt;</span><span class="token operator">&lt;</span> password
    s1 <span class="token operator">=</span> s1<span class="token punctuation">.</span>digest
    <span class="token comment">#s2 = Digest::SHA1.new(s1).digest</span>
    s2 <span class="token operator">=</span> <span class="token constant">Digest</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">SHA1</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> s1
    s2 <span class="token operator">=</span> s2<span class="token punctuation">.</span>digest
    <span class="token comment">#x = Digest::SHA1.new(message + s2).digest</span>
    x <span class="token operator">=</span> <span class="token constant">Digest</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">SHA1</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span>message <span class="token operator">+</span> s2<span class="token punctuation">)</span>
    x <span class="token operator">=</span> x<span class="token punctuation">.</span>digest
    <span class="token punctuation">(</span><span class="token number">0.</span><span class="token punctuation">.</span>s1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>i<span class="token operator">|</span> buf<span class="token punctuation">.</span>push<span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
    buf<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"C*"</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu9 install fcitx</title>
    <url>/ubuntu9-10-install-fcitx-3-6-3/</url>
    <content><![CDATA[<blockquote>
<p>由于9.10自带的fcitx默认版本为3.6，在本人的机子上经常出现CPU满载的情况，不得不更换其它输入法，但都没有fcitx好用（本人用五笔），发现其官网上已经提供了3.6.3的稳定版，决定自行进行安装。</p>
</blockquote>
<p>一、下载<br>首先从fcitx的官网下载fcitx-3.6.3.tar.bz2，更新日期为2010-02-13</p>
<p>二、安装</p>
<ol>
<li><p>手动编译安装<br>安装必须的库文件：<br><code>sudo apt-get install libxpm-dev libxft-dev libxtst-dev</code></p>
<blockquote>
<p>安装过程就不多说了，说说安装后出现的问题</p>
<ul>
<li>问题1、启动后输入法栏为灰色，即不能使用，从网上找了N多方法也没有解决。</li>
<li>问题2、不能随机启动。至今没有解决</li>
</ul>
<p>总结：用这种方法安装的难度还是满大的，不建议使用。</p>
</blockquote>
</li>
<li><p>生成deb包，进入安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">安装必须的库文件：
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> debhelper
进入解压后的文件夹
<span class="token builtin class-name">cd</span> fcitx-3.6.3
fakeroot debian/rules binary
待程序运行结束后，会在当前目录的上层生成fcitx_3.6~rc-1_i386.deb文件，双击安装即可，然后再重新登入下，即可使用。
优点：安装相对简单，易上手<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<blockquote>
<p>使用感受：fcitx-3.6.3还是比较另人满意的，在输入速度和界面美观上表现的都不错。</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fcitx</tag>
      </tags>
  </entry>
  <entry>
    <title>validates_inclusion_of</title>
    <url>/validates-inclusion-of/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&lt;</span> <span class="token constant">ActiveRecord</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Base</span>
  validates_inclusion_of <span class="token symbol">:gender</span><span class="token punctuation">,</span> <span class="token symbol">:in</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">%w( m f )</span>
  validates_inclusion_of <span class="token symbol">:age</span><span class="token punctuation">,</span> <span class="token symbol">:in</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0.</span><span class="token number">.99</span>
  validates_inclusion_of <span class="token symbol">:format</span><span class="token punctuation">,</span> <span class="token symbol">:in</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">%w( jpg gif png )</span><span class="token punctuation">,</span> <span class="token symbol">:message</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"extension &#123;&#123;value&#125;&#125; is not included in the list"</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>gmail of google stuff</title>
    <url>/gmail-of-google-stuff/</url>
    <content><![CDATA[<p>发现这样一个现象，在使用igoogle提供的小工具时，英文页面可以通过搜索gmail关键字获取gmail工具（其实默认就有），中文页面却不行，在搜索结果中看不到gmail工具，感觉中文页面的igoogle提供的小工具比英文页面的少多了。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>google chrome for ubuntu</title>
    <url>/google-chrome-for-ubuntu/</url>
    <content><![CDATA[<p>google 官方终于支持 google chrome 的linux版了，之前，我们只能通过第三方编译的 Chromium 版本体验 Google Chrome。google给使用非windows的用户带来了福音！<br><img src="//img.gagahappy.cn/blog/2010/01/sendpix01.jpg" alt="google chrome for ubuntu" title="google chrome for ubuntu"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Google 产品使用教程大全</title>
    <url>/google-products/</url>
    <content><![CDATA[<p>Google 产品使用教程大全<br><img src="//img.gagahappy.cn/blog/2010/01/Screenshot1.png" alt="Google " title="Google "></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>nero-burn</title>
    <url>/nero-burn/</url>
    <content><![CDATA[<p>发现在用nero烧录文件时，如果是烧录影象之类的文件，烧录成功率非常高，但如果是烧录ISO光盘镜像等文件，每三张就会失败一次。</p>
<p>PS：仅针对本博机子。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>终于上来了</title>
    <url>/overthe-wall-02/</url>
    <content><![CDATA[<p>历经数月，终于上来了。哈哈，光说无用，有图有真相<br><img src="//img.gagahappy.cn/blog/2010/01/sendpix12.jpg" alt="sendpix1" title="sendpix1"></p>
<p>我目前的位置：波士顿，马萨诸塞州 美国</p>
<span id="more"></span>

<p><img src="//img.gagahappy.cn/blog/2010/01/sendpix21.jpg" alt="sendpix2" title="sendpix2"></p>
<p>全靠它了，看到那棵洋葱头了吗？<br><img src="//img.gagahappy.cn/blog/2010/01/sendpix0.jpg" alt="sendpix0" title="sendpix0"></p>
<p>还得感谢一下foxyfroxy，比起IE及FF自带的代理，它可以指定某个需要使用代理的页面，这样，当你访问指定的需要代理的网页时，就会自动启用foxyfroxy，而当你浏览可以正常访问的网页时，foxyfroxy不会被启用，访问正常页面的速度不会受到代理的影响而变慢。</p>
<blockquote>
<p>PS：关于“出逃”的方法，本博就不做介绍了，因为那些介绍相关方法的站点绝大多数都不能访问了，本博可不想变成那样！</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>搜狗五笔输入法</title>
    <url>/sogou-wubi/</url>
    <content><![CDATA[<p>本来想安装万能五笔输入法的，突然发现在它的下载链接下面居然有一个叫做“搜狗五笔输入法”，开始以为是看错了，因为只听说过有搜狗拼音输入法，仔细看一了遍，真的是“搜狗五笔输入法”。</p>
<p>国内目前五笔输入法除了“万能五笔输入法”做的还有点用户体验的感觉，其它五笔输入法都差强人意。之所以决定试用一下“搜狗五笔输入法”，还是因为被它的“搜狗拼音输入法”所折服，拼音输入法都做的那么好，五笔输入法多少也应该继承些它的优点啊</p>
<p>现在正在试用中，感觉无论是界面还是操作，都是令人比较满意的，同时也具有自动更新词库的功能，并且支持大多数词组及四字成语，可以很方便的打出来。喜欢用五笔打字的朋友不妨一试哦！</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>搜狗五笔输入法快捷键</title>
    <url>/sogouwubi-short-key/</url>
    <content><![CDATA[<p>安装了搜狗五笔输入，为了方便调用给其设置了快捷键，通过系统输入法设置的，设置后即时生效。可是每次在重启后，设置的快捷键就失效了，发现搜狗五笔自身有快捷键设置功能，可以用搜狗五笔自身的功能进行设置，如果用系统提供的功能设置，在每次系统启动后，快捷键都会被设置成搜狗五笔自身默认的。在使用搜狗五笔自带的设置功能后，问题解决。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>svn更换仓库地址</title>
    <url>/svn-change-ur/</url>
    <content><![CDATA[<p>因为IP地址的变更，造成项目不能更新与提交，解决方法如下</p>
<ol>
<li>从新的仓库地址重新检出项目文件（费时，费力）</li>
<li>如果你使用了TortoiseSVN，在项目上点击右键，选择TortoiseSVN  –&gt; Relocate，输入新的仓库地址，又可以更新与提交文件了吧！</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 9 启动菜单</title>
    <url>/ubuntu-9-10-menu/</url>
    <content><![CDATA[<p>ubuntu升级到9.10后，原本在/boot/grub/menu.lst下的启动菜单文件已经找不到了，取而代之的是/boot/grub/grub.cfg。修改启动菜单顺序的时候需要把bengin与end之间的菜单内容统一移动到你想要放置的位置。并且在修改菜单前要注意备份以及为/boot/grub/grub.cfg文件添加可写属性。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu apt-get</title>
    <url>/ubuntu-apt-get/</url>
    <content><![CDATA[<p>apt-cache search package 搜索包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-cache</span> show package 获取包的相关信息，如说明、大小、版本等
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> package 安装包
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> package - - reinstall 重新安装包
<span class="token function">sudo</span> <span class="token function">apt-get</span> -f <span class="token function">install</span> 修复安装<span class="token string">"-f = ——fix-missing"</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> remove package 删除包
<span class="token function">sudo</span> <span class="token function">apt-get</span> remove package - - purge 删除包，包括删除配置文件等
<span class="token function">sudo</span> <span class="token function">apt-get</span> update 更新源
<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade 更新已安装的包
<span class="token function">sudo</span> <span class="token function">apt-get</span> dist-upgrade 升级系统
<span class="token function">sudo</span> <span class="token function">apt-get</span> dselect-upgrade 使用 dselect 升级
<span class="token function">apt-cache</span> depends package 了解使用依赖
<span class="token function">apt-cache</span> rdepends package 是查看该包被哪些包依赖
<span class="token function">sudo</span> <span class="token function">apt-get</span> build-dep package 安装相关的编译环境
<span class="token function">apt-get</span> <span class="token builtin class-name">source</span> package 下载该包的源代码
<span class="token function">sudo</span> <span class="token function">apt-get</span> clean <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt-get</span> autoclean 清理无用的包
<span class="token function">sudo</span> <span class="token function">apt-get</span> check 检查是否有损坏的依赖<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>如何在ubuntu下面直接查找想要安装的软件。比如我想安装tomcat.但是我又不知道里面有哪种版本，也不知道都需要装什么，但是我能确认我装的是tomcat那么我就可以用搜索命令：</p>
<p>例如：apt-cache search tomcat,这样就知道ubuntu的软件库里面有tomcat5,那么就可以用$apt-get install tomcat5去安装了APT 源自 Debian GNU/Linux，Debian 在同一个版本编号下，依套件成熟度又分 stable、testing、unstable。</p>
<ul>
<li><p>若我们现在用的是 Debina 3.0r2 stable，使用 apt-get upgrade<br>就可以升级for stable 的软件，而使用 apt-get dist-upgrade 则可以选择将系统由 stable 升级到 testing 或是 unstable</p>
</li>
<li><p>使用 apt-get upgrade 和 apt-get dist-upgrade 的结果，基本上是一样的，不过apt-get dist-upgrade</p>
</li>
<li><p>在升级的同时会为了解决相依性而安装新套件，而 apt-get upgrade 并不会，因此要升级的话，建议还是用 apt-get dist-upgrade 较佳<br>apt-cache search</p>
</li>
</ul>
<p>搜寻：我们可以用这个指令来搜寻升级包，</p>
<blockquote>
<p><code>apt-cache search httpd</code>，<br><code>apt-cache depends</code><br>相依性：我们可以用这个指令来看到软件包的所有相依性档案，<br>例如：<code>apt-cache depends httpd</code>，<br><code>apt-get install</code></p>
</blockquote>
<p>安装：安装软件包</p>
<blockquote>
<p><code>apt-get install httpd</code>，这样 apt 就会自动上网下载httpd 回来安装，若httpd 有相依性套件的时候，apt 也会自动下载安装<br><code>apt-get clean</code></p>
</blockquote>
<p>清除：</p>
<blockquote>
<p>当使用<code>apt-get install</code> 指令安装套件，下载下来的 rpm 会放置於 /var/cache/apt/archives，使用 <code>apt-get clean</code> 指令可以将之清除，避免占用硬碟空间<br><code>apt-get remove</code></p>
</blockquote>
<p>移除：</p>
<blockquote>
<p><code>apt-get remove httpd</code>，就会移除 httpd 了，假如有相依性套件的时候，apt 也会一并移除<br>以上这几个指令应该就够用了，若想要得到更进一步的指令，请善用 man：）<br><code>apt-get update</code></p>
</blockquote>
<p>更新：</p>
<blockquote>
<p>这指令是用来取得记录在 <code>/etc/apt/sources.list</code> 内的远端服务器的套件档案清单 在使用 「apt-get dist-upgrade」指令升级套件前，一定要记得先用这条指令将套件档案清单更新<br><code>apt-get dist-upgrade</code></p>
</blockquote>
<p>升级：</p>
<blockquote>
<p>这里的升级主要是根据已有的软件包更新而言，并不是更新整个系统，也可以使用图形界面的新立得包管理器：）<br>如果没有安装这个管理器的话，可以执行以下指令<br><code>apt-get install synaptic</code></p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 取消 mysql开机启动服务</title>
    <url>/ubuntu-remove-mysql-service/</url>
    <content><![CDATA[<p>Ubuntu 取消 mysql开机启动服务<br>sudo update-rc.d -f mysql remove</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu scim 光标跟随</title>
    <url>/ubuntu-scim-cursor-follow/</url>
    <content><![CDATA[<p>安装scim输入法后，有时候会出现光标不能自动跟随录入框的现象，即没有开启动光标自动跟随的功能。解决办法如下。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打开/etc/X11/xinit/xinput.d/scim文件，找到其中的</span>
<span class="token assign-left variable">GTK_IM_MODULE</span><span class="token operator">=</span>xim
<span class="token assign-left variable">QT_IM_MODULE</span><span class="token operator">=</span>xim
<span class="token comment"># 把它们改成</span>
<span class="token assign-left variable">GTK_IM_MODULE</span><span class="token operator">=</span>scim
<span class="token assign-left variable">QT_IM_MODULE</span><span class="token operator">=</span>scim
<span class="token comment">#即可。最后注销一下或者是重启X。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>升级gem提示缺少no such file to load zlib</title>
    <url>/update-gem-zlib/</url>
    <content><![CDATA[<p>升级gem提示 no such file to load zlib，按照以前的经验，马上安装了zlib1g-dev，运行后问题依旧存在，无奈。突然起ruby source中包含zlib文件，最终解决办法如下。</p>
<ol>
<li>进行ruby源码包</li>
<li>安装ruby自身提供的zlib包<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ext/zlib
ruby ./extconf.rb
<span class="token function">make</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>
<span class="token function">sudo</span> gem update --system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>virtualbox3.1.2 new</title>
    <url>/virtualbox3-1-2-new/</url>
    <content><![CDATA[<p>刚刚装上了virtualbox3.1.2，发现这个版本在操作流程上有了一些小变化，最明显的地方就是对host主机的设置选项，光驱部分没有了，它被放在了”storage”里。</p>
<p><img src="//img.gagahappy.cn/blog/2010/01/sendpix2.jpg" alt="virtualbox3.1.2" title="virtualbox3.1.2"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>virtualbox</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware BIOS设置</title>
    <url>/vmware-bios-set/</url>
    <content><![CDATA[<p>当虚拟机安装好之后，如果想改变虚拟机设备的启动顺序，要在虚拟机启动，屏幕出现VMware logo的时候迅速按下F2键，之后你就进入bios的设置界面了，把要设置成第一启动的设备移动到顶端即可。</p>
<p>小技巧：</p>
<ol>
<li>一定要在虚拟机捕捉到鼠标和键盘后再按F2，否则按了也是白按。</li>
<li>如果你按下F2后没有反应，依然进入了系统，说明你按F2的速度太慢了，要快一点，特别是在重新启动虚拟机的时候尤其要快，所以本人还是建议把虚拟机正常开机一下比较好掌握。</li>
</ol>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么识别被染色的草莓(转)</title>
    <url>/find-strawberry/</url>
    <content><![CDATA[<p>草莓的籽，应该是金黄色的（类似炒熟的白芝麻），如果你看到市场上卖的草莓，籽也是红色的，甚至是深紫色的，那就说明有可能是染色的。</p>
<p>图中右侧的草莓，是我用淡盐水浸泡过的（非常抱歉给大家带来视觉不悦感）<br><img src="//img.gagahappy.cn/blog/2010/03/54a625bft80f92b1de1b9690690-300x225.jpg" alt="怎么识别被染色的草莓" title="怎么识别被染色的草莓"></p>
]]></content>
  </entry>
  <entry>
    <title>gmail彻底删除邮件</title>
    <url>/gmail-delete-mail/</url>
    <content><![CDATA[<p>在gmail里删除邮件后，邮件全部被转移到了“已经删除的邮箱”中，里面已经有上千封订阅而没有看的邮件，想彻底删除却找不到“永久删除邮件”按钮，突然发觉坐在旁边的小孟同学的gmail里居然有这个标签，向他请教后才知道，原来需要在左侧列表的“其它标签中”将 “永久删除邮件”选中后，才能在邮件列表中显示出来。我晕啊！简直快要被旁边的小孟同学笑死了。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>辣子鸡</title>
    <url>/laziji/</url>
    <content><![CDATA[<p>从北京台的生活频道看了辣子鸡人做法，马上抄起笔记了下来，发现由于长时间不写字，提笔忘字相当严重，决定还是把记在本上的内容转记到网上。一是已经习惯了打字。二是日后查找起来也方便。</p>
<p>做法</p>
<blockquote>
<ol>
<li>辣椒 要4元一斤的那种，今天去菜市场，本来想买一些回来的，结果遇到是15元一斤的那种，贵先不说，主要是那种辣椒不适合做辣子鸡。</li>
<li>腌制：放盐、胡椒粉、料酒。</li>
<li>炸的时候要加入水淀粉。油七成热。</li>
<li>炸的时候要热锅冷油。</li>
<li>鸡肉（北京的朋友用三黄鸡就可以了）750克 辣椒500克 花椒50克，总体比例为15：10：1</li>
<li>要先放花椒后放辣椒。因为辣椒比较容易糊。</li>
</ol>
</blockquote>
<p>目前只是记下来做法，还没有动手做呢，就看哪天有时间啦！</p>
<blockquote>
<p>PS:判断油7成热的办法<br>把筷子放入油中，筷子周围冒气泡、油冒烟</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>MySQL server has gone away</title>
    <url>/mysql-server-has-gone-away/</url>
    <content><![CDATA[<p>在对windows下的mysql 进行数据库还原的时候出现这个错误。</p>
<ol>
<li><p>最有可能的原因是服务器超时，比如说在一个脚本里连接上服务器后进行了一些数据库操作后，就开始冷落了数据库，执行起其他一些非数据库操作的耗时操作，数据库等啊等等啊等，结果超时了，只好关闭连接。如果是这个原因，请加大wait_timeout。</p>
</li>
<li><p>还有可能是因为SQL语句太长所致，比如插入一个BLOB列，或者用一条INSERT语句同时插入很多行，因为SQL太长，数据库可能就无法接收到完整的SQL，结果数据库就会觉得客户端出错了，从而关闭连接。如果是这个原因，请加大max_allowed_packet。</p>
</li>
</ol>
<p>解决方案</p>
<blockquote>
<p>如果是第一种情况：将wait_timeout加大<br>如果是第二种情况：将max_allowed_packet加大，如果max_allowed_packet=800M</p>
</blockquote>
<p>注意事项</p>
<blockquote>
<p>在重新配置mysql配置文件后，请重新启动mysql服务，使当前配置生效。<br>windows下重新启动mysql的方法：net stop mysql; net start mysql</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 导入慢的解决方法</title>
    <url>/mysqldump-import-slow/</url>
    <content><![CDATA[<p>MySQL导出的SQL语句在导入时有可能会非常非常慢。在导出时合理使用几个参数，可以大大加快导 入的速度。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-e 使用包括几个VALUES列表的多行INSERT语法<span class="token punctuation">;</span>
--max_allowed_packet<span class="token operator">=</span>XXX 客户端/服务器之间通信的缓存区的最大大小<span class="token punctuation">;</span>
--net_buffer_length<span class="token operator">=</span>XXX  TCP/IP和套接字通信缓冲区大小,创建长度达net_buffer_length的行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>注意：max_allowed_packet和net_buffer_length不能比目标数据库的设定数值 大，否则可能出错。</p>
<p>首先确定目标库的参数值</p>
<pre class="line-numbers language-none"><code class="language-none">show variables like &#39;max_allowed_packet&#39;;
show variables like &#39;net_buffer_length&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>根据参数值书写mysqldump命令，如：<br><code>mysqldump -uroot -p eis_db goodclassification -e --max_allowed_packet=1048576 --net_buffer_length=16384 &gt;good3.sql</code></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>svn export</title>
    <url>/svn-export/</url>
    <content><![CDATA[<p>原本以为 svn expor命令只会把工作复本导出，后来发现如果修改了工作复本，导出的文件则是修改后文件。对这种设计思路很不理解。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>小试重构</title>
    <url>/try-reconstruction/</url>
    <content><![CDATA[<p>试着把开发项目的一个子模块重构了一下，可能也算不上重构，除了时间上比不重构时花的要长外，也更加的累人。难道是重构的思路不对？</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>XPath</title>
    <url>/xpath/</url>
    <content><![CDATA[<p>XPath即为XML路径语言（XML Path Language），它是一种用来确定XML文档中某部分位置的语言。</p>
<p>XPath基于XML的树状结构，提供在数据结构树中找寻节点的能力。起初 XPath 的提出的初衷是将其作为一个通用的、介于XPointer與XSL间的语法模型。但是 XPath 很快的被開發者採用來當作小型查詢語言。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 字符串转换成数字</title>
    <url>/mysql-string-cast-to-number/</url>
    <content><![CDATA[<p>在mysql中使用cast 函数将数字转换字符时，发现这样一个现象，将字符串“6,666”转换为数字时，预期值应该为6666，但实际值为6，并且rails的1.22版本也存在同样的问题。</p>
<p>解决方法，很无奈，将“6,666”中的”,”去掉，再进行转换。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>rails项目开发环境一定要与服务器生产环境一致</title>
    <url>/rails-dev-production/</url>
    <content><![CDATA[<p>在使用ruby1.8.6时，发现字段串也有.last方法，即取出字符串的最后一位，后来在ruby1.8.7的环境下调用此代码，被告之没有定义last方法，查询api实确没有找到last方法，开发环境下使用的是ruby1.8.6版本，而ruby1.8.7是生产环境下的版本，还好发现的早，错误及时在发生前被终止。</p>
<p>由于开发环境在windows下，所以使用的ruby版本为1.8.6二进制发行版，而服务器为linux环境，ruby版本为1.8.7，从而导致出现上述不兼容问题，所以开发环境务必要与生产环境一致，否则你写的每一行代码都将会成为一串串定时炸弹，不定在什么时候就会炸开， 所以为了我们项目的安全，我们在开发时的环境必须与服务器生产环境一致。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>rails redirect_to</title>
    <url>/rails-redirect-to/</url>
    <content><![CDATA[<p>做了一个出错后跳转的页面，运行后发现程序进入死循环，查看日志发现页面被回指到了自己，原因是在redirect_to的时候自动继承了链接中的参数，由此得出结论，在带参数的情况下将页面回指到自己时，如果只指定了action，链接的参数会被自动继承，若要去掉参数，需要在redirect_to的时候重新定义。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>奇怪的ruby case</title>
    <url>/ruby-case-bug/</url>
    <content><![CDATA[<p>ruby中的条件判断语句case我们都不应该陌生吧，在view层使用时出现了这样一个怪现象。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 如果这样写</span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">case</span> 条件表达示 <span class="token string">%>
&lt;% when "条件1"%></span>
标题
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">when</span> <span class="token string">"条件2"</span><span class="token string">%>
标题
&lt;% end %></span>

<span class="token comment"># 被告知有语法错误。 如果写成</span>
<span class="token operator">&lt;</span><span class="token operator">%</span>
<span class="token keyword">case</span> 条件表达示
<span class="token keyword">when</span> <span class="token string">"条件1"</span>
<span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>程序顺利通过。即将case 与第一个when写在一起，这时程序不会出错。难道分开放在<code>&lt;%%&gt;</code>里会出错。差点被这个bug折腾死！ORG</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby 安装 rmagick</title>
    <url>/ruby-install-rmagick/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libmagick9-dev ruby1.8-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> imagemagick
<span class="token function">sudo</span> gem <span class="token function">install</span> rmagick<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 10 source.list</title>
    <url>/ubuntu-10-04-source-list/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deb http://mirrors.sohu.com/ubuntu/ lucid main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ lucid-security main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ lucid-updates main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ lucid-proposed main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ lucid-backports main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ lucid main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ lucid-security main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ lucid-updates main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ lucid-proposed main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ lucid-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>red hat enterprise linux 5 被vmware6 自动安装</title>
    <url>/vmware-auto-install-red-had-5/</url>
    <content><![CDATA[<p>打算用vwmare 练习一下安装red hat ,配置好所有设置后，出现录入用户名与密码（这项功能好像是vmware的一个特色功能），录入完成后，进入复制文件阶段，于是就把窗口最小化做别的事情去了，由于事情太多，把装redhat这事就忘到一边了，过了大概40分钟吧，才想起还装着redhat呢，打开窗口一看， 我靠，居然已经到了登录界面了，登录后发现，系统已经被安装好了，这这这，这不是只有windows才一带的功能吗，无人值守安装。本来打算熟悉一下redhat的安装过程呢，这到好，连机会都不给。哎，只好再装一遍了。这有时候太智能了也不好</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>升级wordpress mysql备份乱码成功解决</title>
    <url>/wordpress-mysql-backup-encoding/</url>
    <content><![CDATA[<p>首先要感谢平平同学提供新的空间，新空间已经可以支持php5.0了，博客因此也顺利升级至最新版本。升级中遇到的主要问题是备份数据库时数据表编码乱码问题，本博的表使用了两种编码,gb2312与utf8，解决要点为连接数据库的客户端编码要与要备份的表编码一致，这样在备份的时候就不会有乱码问题了。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora 添加httpd服务</title>
    <url>/fedora-add-http/</url>
    <content><![CDATA[<p>在编译安装httpd后，将其放到/etc/init.d/目录下，使其可以随开机自动启动，命令如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chkconfig</span> --add httpd，执行此命令后报错，提示“service apache does not support chkconfig“

<span class="token comment"># 这是因为在httpd中没有相关的chkconfig信息，导致chkconfig不能识别，所以要在httpd中添chkconfig的描述信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>方法如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">编辑httpd文件。加入chkconfig描述信息:
<span class="token comment"># description:http apache  service</span>
<span class="token comment"># chkconfig: 2345 98 98</span>
以上信息均为注释信息，前面一定要有<span class="token comment">#</span>
这时，再次执行chkconfig --add httpd，httpd被成功加入服务，可以随机自动启动了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora 安装 zlib库</title>
    <url>/fedora-instal-zlib/</url>
    <content><![CDATA[<p>fedora 安装 zlib<br>yum install zlib-devel</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora 编译安装 SSL_SESSION_cmp</title>
    <url>/fedora-install-subversion-neon/</url>
    <content><![CDATA[<p>fedora 编译安装 subversion 出现 undefined reference to `SSL_SESSION_cmp’，被这个问题困扰了很多天，从网上也查阅了很多资料，发现在安装subversion.1.6.11时，如果对应的neon版本为 neon-0.25.5.tar.gz，就会出现这个错误，根据网上的资料得知，在neon的高版本上已经修复这个错误，于是到其官方网站<a href="http://www.webdav.org/neon/%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84neon-0.29.3%EF%BC%8C%E5%B0%86%E5%85%B6%E8%A7%A3%E5%8E%8B%E5%88%B0subversion%E7%9A%84%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E4%B8%AD%EF%BC%8C%E5%B9%B6%E6%94%B9%E5%90%8D%E4%B8%BAneon%EF%BC%8C%E5%86%8D%E6%AC%A1%E7%BC%96%E8%AF%91%EF%BC%8C%E6%88%90%E5%8A%9F%EF%BC%81">http://www.webdav.org/neon/下载最新版的neon-0.29.3，将其解压到subversion的源码目录中，并改名为neon，再次编译，成功！</a></p>
<p>总结：不知疲倦的探索 ，才能获取那来之不易的喜悦！</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora 编译安装subvision error</title>
    <url>/fedora-installsubvision/</url>
    <content><![CDATA[<p>在编译安装subvision时，提示configure: error: Subversion requires SQLite， 原因是：1.6.11需要依赖Sqlite。</p>
<p>解决方法：下载sqlite-3.6.13 ，解压后，复制sqlite3.c到subvision源码文件sqlite-amalgamation目录下，如果没有sqlite-amalgamation目录，手动新建一个即可。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora 使用 sudo</title>
    <url>/fedora-sudo/</url>
    <content><![CDATA[<blockquote>
<p>在ubuntu下执行某条命令时如果需要root权限，我们只需要在此命令的前面加上sudo，转到fedora后如果要执行root权限的命令，需要先切换到root用户，才能使用，感觉用起来十分不顺手。在网上搜索后，发现可以通过配置sudo的方式来决定这个问题。方法如下</p>
</blockquote>
<p>fedora 默认新建的用户不在sudo组，但可以编辑/etc/sudoers文件将普通用户加入sudo组。要注意的是修改该文件只能使用visudo命令</p>
<ol>
<li><p>首先切换到 root<br><code>su -</code></p>
<blockquote>
<p>(注意有- ，这和su不同，在用命令”su”的时候只是切换到root，但没有把root的环境变量传过去，还是当前用户的环境变量，而使用带横线参数的”su -“命令则将环境变量也一起转换过去，就象用root登录一样)</p>
</blockquote>
</li>
<li><p>然后visudo</p>
<blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这个和vi的用法一样，移动光标，到最后一行，按a，进入append模式，输入以下这行内容</span>
yourname <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>
<span class="token comment"># 然后按Esc，再输入:wq保存文件并退出，这样就把自己加入了sudo组，可以使用sudo命令了。</span>
<span class="token comment"># 如果不想在sudo的时候输入密码，干脆就把上面那行换成下面这行即可：</span>
yourname <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>NOPASSWD: ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>
</li>
<li><p>测试 sudo</p>
<blockquote>
<p>测试以上是否正确配置了 sudo ,只需要在普通用户权限下输入<br><code>sudo whoami</code><br>如果配置正确,则命令会返回“root”字样。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora13 编译安装 mysql exec: g++: not found</title>
    <url>/fedora13-mysql-exec-g-not-found/</url>
    <content><![CDATA[<p>在fedora13下编译安装mysql时出现 exec: g++: not found，即没有安装gcc-c++</p>
<p>解决方法 ：yum install gcc-c++</p>
<p>安装完后再make，出现error: redeclaration of C++ built-in type ‘bool’<br>是因为gcc-c++是在configure之后安装的，此时只需重新configure后再编译make即可。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora13 编译安装 mysql innodb引擎</title>
    <url>/fedora13-mysql-innodb/</url>
    <content><![CDATA[<p>fedora13 编译安装 mysql innodb引擎，需要在配置时加入 –with-plugins=innobase 选项。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora13 编译安装 mysql no curses termcap library found</title>
    <url>/fedora13-mysql-no-cursestermcap-library-found/</url>
    <content><![CDATA[<p>在fedora13下编译安装mysql时出现no curses/termcap library found错误，即缺少ncurses-devel包。</p>
<p>解决方法 ：yum install  ncurses-devel</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>成功安装fedora13</title>
    <url>/fedora13/</url>
    <content><![CDATA[<p>觉得用fedora的人越来越多（自我感觉），于是也安装了一个，虽然是第一次安装，但之前使用过ubuntu，对安装还是比较有信心的，安装过程挺顺利的，安装完成后一个比较担心的就是ADSL上网问题，在设置好ADSL的帐号信息后，居然能够上网啦。YEAH。对fedroa的使用目前绝对是学习阶段，开始以为能从ubuntu顺利过度呢，没想到和ubuntu还是有一定差别的，对于基本的使用还是要学习啊学习啊！</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 横向扩展性</title>
    <url>/mysql-scale-out/</url>
    <content><![CDATA[<p>mysql 横向扩展性的优点</p>
<ol>
<li>成本低，很容易通过低廉的PC Server搭建一个处理能力非常强大的计算集群</li>
<li>不太容易遇到瓶颈，因为很容易通过添加主机来增加处理能力</li>
<li>单个节点故障对系统整体影响较小</li>
</ol>
<p>mysql 横向扩展性的缺点</p>
<ol>
<li>处理节点多，造成系统架构整体复杂度提高，应用程度提高</li>
<li>集群维护难易程度更高，维护成本更大。</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 纵向扩展性</title>
    <url>/mysql-scale-up/</url>
    <content><![CDATA[<p>mysql 纵向扩展性 优点</p>
<ol>
<li>处理节点少，维护相对简单</li>
<li>所有数据都集中在一起，应用系统架构简单，开发相对容易。</li>
</ol>
<p>mysql 纵向扩展性 缺点</p>
<ol>
<li>高端设备成本高，且竞争少，容易受到厂商限制</li>
<li>受到硬件设备发展速度的限制，单台主机的处理能力总是有极限的，容易遇到最终无法解决的性能瓶颈</li>
<li>设备和数据集中，发生故障后影响较大</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql用户创建授权以及删除</title>
    <url>/mysql-create-user/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CREATE <span class="token environment constant">USER</span> yy IDENTIFIED BY <span class="token string">'123'</span><span class="token punctuation">;</span>

如果要限制在固定地址登陆，比如localhost 登陆：
CREATE <span class="token environment constant">USER</span> yy@localhost IDENTIFIED BY <span class="token string">'123'</span><span class="token punctuation">;</span>

grant:
GRANT ALL PRIVILEGES ON *.* TO user@localhost<span class="token punctuation">;</span>

grant select,insert,update,delete on *.* to test1@<span class="token string">"%"</span> Identified by <span class="token string">"abc"</span><span class="token punctuation">;</span>
格式：grant <span class="token keyword">select</span> on 数据库.* to 用户名@登录主机 identified by <span class="token string">"密码"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby 类测试</title>
    <url>/ruby-test-class/</url>
    <content><![CDATA[<p>如题</p>
<p><img src="//img.gagahappy.cn/blog/2010/04/ruby_test.jpg" alt="ruby_test" title="ruby_test"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>try use nginx</title>
    <url>/try-use-nginx/</url>
    <content><![CDATA[<p>晚上临下班前，按照日常流程，需要把服务器重启，有同事建议让我这个新手试一把，好在有好几位同事在场，在他们的监督下，怀着惊心动魄的心情，成功重启了服务器。吼吼。重启的过程真是吓人啊！</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>阻止wordpress more链接跳转到页面的中间</title>
    <url>/stop-wordpress-more-jump-link/</url>
    <content><![CDATA[<p>阻止wordpress more链接跳转到页面的中间</p>
<p>默认情况下，点击more链接将会将读者带到单篇文章浏览的形式，并且会转到more标签指定的位置。这样，如果你使用默认的more标签功能，读者点击more链接之后将会被带入到文章的半中间。曾经一段时间，大家比较接受这样的做法，不过，现在越来越人觉得还是直接打开文章页面不跳转到其他位置比较好。</p>
<p>总之一句话，如果你希望点击more标签后，打开进入的是文章页面的顶部，那么请在当前主题的functions.php文件，添加下面的代码:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> remove_more_jump_link<span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$offset</span>  <span class="token operator">=</span> strpos<span class="token punctuation">(</span><span class="token variable">$link</span>, <span class="token string">'#more-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span>  <span class="token punctuation">(</span><span class="token variable">$offset</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$end</span>  <span class="token operator">=</span> strpos<span class="token punctuation">(</span><span class="token variable">$link</span>, <span class="token string">'"'</span>,<span class="token variable">$offset</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span>  <span class="token punctuation">(</span><span class="token variable">$end</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$link</span>  <span class="token operator">=</span> substr_replace<span class="token punctuation">(</span><span class="token variable">$link</span>, <span class="token string">''</span>, <span class="token variable">$offset</span>, <span class="token variable">$end</span>-<span class="token variable">$offset</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token builtin class-name">return</span>  <span class="token variable">$link</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
add_filter<span class="token punctuation">(</span><span class="token string">'the_content_more_link'</span>,  <span class="token string">'remove_more_jump_link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>原文地址：<a href="http://www.wordpress.la/WordPress-more-tag-tips.html">http://www.wordpress.la/WordPress-more-tag-tips.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>申请GoogleAdSense</title>
    <url>/apply-for-google-adsense/</url>
    <content><![CDATA[<p>申请了GoogleAdSense，希望可以顺利通过审核！</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>修改firefox配置文件到其它盘</title>
    <url>/change-firefox-profile-postion/</url>
    <content><![CDATA[<p>默认火狐的配置都会在系统盘，如何设置配置文件到其它盘，以避免重装系统后配置丢失？</p>
<p>其实只要修改下火狐的快捷方式就行了</p>
<p>1、现在D盘创建”firefox\profile”文件夹，作为配置文件的位置。</p>
<p>即 d:\firefox\profile</p>
<p>2、右击火狐的快捷方式——“属性”</p>
<p>修改目标项目，在firefox.exe后面添加 -profile “D:\firefox\profile” 的选项</p>
<span id="more"></span>

<p>情况1<br>如果你已经为firefox安装了插件，并进行了个人喜好设置，请复制%AppData%\Mozilla\Firefox\Profiles\xxxx.default文件夹下的全部内容到D:\firefox\profile下(在这之前要把firefox关闭)。</p>
<p>经实践，发现有些插件在更改profile文件夹位置后失效，例如firebug，只能重新安装了，所以建议在使用一个纯净的firefox时就更改profile的位置。</p>
<p>情况2<br>全新安装的firefox，没有进行任何插件的安装及个人喜好设置，恭喜您，不用再做任何操作,直接使用吧。</p>
<p>最后，重新启动firefox，使设置生效。以后随便重装系统，所有配置都在D盘。不过打开火狐要用这个修改过的快捷方式。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>firefox</tag>
      </tags>
  </entry>
  <entry>
    <title>feed测试</title>
    <url>/feed-test-on-google-reader-display-related-post/</url>
    <content><![CDATA[<p>feed测试，不知道相关文章能不能在google reader 上显示。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>google reader 阅读方式改变</title>
    <url>/google-reader-view-change/</url>
    <content><![CDATA[<p>这段时间没怎么上google reader ，发现阅读方式发生了变化，新的阅读方式只显示未读条目，不再显示已读条目了，对于新的阅读方式这一上来还真有点不适应。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>如何修改Firefox 3缓存Cache的位置</title>
    <url>/how-to-change-firefox-3-cache-postion/</url>
    <content><![CDATA[<p>如何修改Firefox 3缓存Cache的位置<br>安装了firefox，在进行设置的时候，发现没有临时文件夹位置的修改.<br>通过搜索引擎发现Firefox 3的缓存Cache原来是放在系统盘(C:)＼Documents and Settings＼[你的用户名]＼Local Settings＼Application Data＼Mozilla＼Firefox＼Profiles＼[随机数].default＼Cache</p>
<p>为了避免使系统盘产生磁盘碎片，我们最好把所有临时文件夹都放到非系统盘，如E盘。</p>
<span id="more"></span>
<p>详细修改步骤如下：<br>1、打开Firefox浏览器<br>2、在地址栏输入  about:config<br>3、查找 browser.cache.disk.parent_directory<br>4、如果没有找到  browser.cache.disk.parent_directory ，则新建这个“字符串”<br>5、修改到你需要存放的位置，例如我修改到E:\firefox\Cache<br>6、重新启动 Firefox 程序<br>7、在地址栏输入  about:cache ，可以发现Cache位置已经成功修改<br>Cache Directory:    E:\firefox\Cache</p>
<p>记住：输入文件夹的名字中不要带有空格！<br>重启firefox，第一次打开网页，E盘就会新建firefox\Cache的文件夹！<br>firefox的临时文件夹内部储存的文件是猜不到意义的文件名！</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>firefox</tag>
      </tags>
  </entry>
  <entry>
    <title>I am in twitter</title>
    <url>/im-in-twitter/</url>
    <content><![CDATA[<p>终于上来啦，哈哈哈</p>
<p><img src="//img.gagahappy.cn/blog/2010/10/im-in-twitter2.png" title="im-in-twitter"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>twitter</tag>
      </tags>
  </entry>
  <entry>
    <title>限制Firefox中urlclassifier3.sqlite文件大小</title>
    <url>/limit-firefox-urlclassifier3-sqlite-size/</url>
    <content><![CDATA[<p>urlclassifier3.sqlite文件用于记录Firefox从Google抓取的反钓鱼网站和恶意站点数据的,但是这个文件大小在默认情况下会不断地增长,通过设置”urlclassifier.updatecachemax”可以限制 urlclassifier3.sqlite的大小.</p>
<p>在Linux版本下”urlclassifier.updatecachemax”默认为104857600 (100 MB)</p>
<p>而Windows下的Firefox3中”urlclassifier.updatecachemax”默认为-1,即不限制urlclassifier3.sqlite的大小。</p>
<span id="more"></span>

<p>所以即不希望彻底禁止Firefox的反钓鱼功能，又不希望urlclassifier3.sqlite增长得疯狂的朋友可以把Firefox3中”urlclassifier.updatecachemax”的大小设置为一个合理的值。</p>
<p>不过经过测试Firefox3并不会把urlclassifier3.sqlite的大小严格限制在”urlclassifier.updatecachemax”设置的大小之内，估计是为了保证反钓鱼数据的完整性。</p>
<p>例如，我把”urlclassifier.updatecachemax”设置为”20971520”(20MB),实际的urlclassifier3.sqlite文件大小在 24MB左右。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>firefox</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程--高内聚,低耦合</title>
    <url>/software-engineering-about-high-cohesion-and-loose-coupling/</url>
    <content><![CDATA[<ul>
<li>高内聚,低耦合在软件工程里有,主要是说模块之间和模块内部之间的关系紧密程度</li>
<li>高内聚就是提高模块内部的关联程度,低耦合当然就是降低模块之间的关联程度</li>
<li>耦合性比较高的话，模块代码不易分离，是不好的编程模式</li>
<li>内聚是越高越好，内聚个人认为是只是实现一个功能，不是很多的功能</li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>从Ubuntu 10.04升级到Ubuntu 10.10</title>
    <url>/to-upgrade-to-ubuntu-10-10-from-ubuntu-10-04-lts/</url>
    <content><![CDATA[<p>从Ubuntu 10.04升级到Ubuntu 10.10</p>
<p>press Alt+F2 and type in “update-manager -d” (without the quotes) into the command box. Update Manager should open up and tell you: New distribution release ‘10.10’ is available. Click Upgrade and follow the on-screen instructions. </p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Ubuntu10.04“网络已禁用”的问题</title>
    <url>/ubuntu-10-04-restart-network-manger-repair/</url>
    <content><![CDATA[<p>本博在<a href="http://www.gagahappy.com/ubuntu-10-04-restart-network-manger/">ubuntu 10.04 重启网络服务</a>一文中介绍了怎样重启网络服务，后来在使用过程中发现此方法并不正确，后经网上搜索，更正如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> network-manager stop
<span class="token function">sudo</span> <span class="token function">rm</span> /var/lib/NetworkManager/NetworkManager.state
<span class="token function">sudo</span> <span class="token function">service</span> network-manager start
<span class="token function">sudo</span> gedit /etc/NetworkManager/nm-system-settings.conf
<span class="token comment"># 把false改成true</span>
<span class="token function">sudo</span> <span class="token function">service</span> network-manager restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 10.04 重启网络服务</title>
    <url>/ubuntu-10-04-restart-network-manger/</url>
    <content><![CDATA[<p>ubuntu 10.04 重启网络服务<br>sudo restart network-manager</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Ubuntu 10.04 DNS解析慢、上网速度慢</title>
    <url>/ubuntu-10-04-speed-dns/</url>
    <content><![CDATA[<p>自从ubuntu升级到10.04后，上网速度感觉变慢了很多（ADSL），原因也众说分云，有说是firefox浏览器造成的，于是用chrome访问，速度依然很慢，可见不是由于浏览器造成的。</p>
<p>网速慢， 是因为浏览器在对DNS解析上花费了大量的时间，所以我们要做的工作就是加速DNS的解析。</p>
<span id="more"></span>
<p>安装dnsmasq</p>
<p>第1步<br><code>sudo apt-get install dnsmasq</code></p>
<p>第2步<br><code>sudo gedit /etc/dnsmasq.conf</code>，找到 <code>#resolv-file=，用resolv-file=/etc/resolv.dnsmasq.conf</code>替换，确保你没有更改过<code>/etc/resolv.conf</code>文件，如果改过，恢复原状</p>
<p>第3步<br><code>sudo cp /etc/resolv.conf /etc/resolv.dnsmasq.conf</code></p>
<p>第4步<br>修改ADSL ip4的DNS服务器地址为127.0.0.1这里一定要从图型界面修改，否则重启后resolv.conf会被重写</p>
<blockquote>
<p>图一<br><img src="//img.gagahappy.cn/blog/2010/10/sendpix01.jpg" title="dns"></p>
<p>图二<br><img src="//img.gagahappy.cn/blog/2010/10/sendpix11.jpg" title="sendpix1"></p>
</blockquote>
<p>第5步<br>重新启动 <code>dnsmasq sudo /etc/init.d/dnsmasq restart</code><br>再次访问网页，你会发现解析速度比以前快了N个数量级。</p>
<p>小测试，访问gagahappy.com，调用 dig gagahappy.com 两次</p>
<p>第一次</p>
<blockquote>
<p>Query time: 21 msec<br>SERVER: 127.0.0.1#53(127.0.0.1)<br>WHEN: Sun Oct 17 22:18:00 2010<br>MSG SIZE  rcvd: 47</p>
</blockquote>
</blockquote>

<p>第二次</p>
<blockquote>
<p>Query time: 0 msec<br>SERVER: 127.0.0.1#53(127.0.0.1)<br>WHEN: Sun Oct 17 22:18:49 2010<br>MSG SIZE  rcvd: 47</p>
</blockquote>
<p>你会发现使用dnsmasq快了N个数量级</p>
<p>注意：在这里要说一下修改resolv.conf的问题，网上的方法是在第3步后</p>
<blockquote>
<ol>
<li><p>编辑resolv.conf sudo gedit /etc/resolv.conf</p>
</li>
<li><p>将其中的域名服务器全部去掉，加入nameserver 127.0.0.1</p>
</li>
<li><p>执行命令sudo gedit /etc/ppp/peers/provider（Ubuntu 10.04的文件名是provider，其他版本可能不同）</p>
</li>
<li><p>在 usepeerdns 前面增加＃ ，也就是把这条语句覆盖掉，以防resolv.conf的设置被pppoe覆盖</p>
</li>
</ol>
</blockquote>
<p>以上方法经本人实践，在ubuntu10.04 + ADSL上网环境中无效，经重新启动后，resolv.conf文件依然会被重写，即加入的127.0.0.1丢失，造成dnsmasq失效，访问速度依然很慢</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 10.10(Maverick Meerkat) RC</title>
    <url>/ubuntu-10-10maverick-meerkat-rc/</url>
    <content><![CDATA[<p>Ubuntu 10.10(Maverick Meerkat) RC 于当地时间9.30晚/北京时间10.1发布。</p>
<p>相比 10.04，Ubuntu Desktop Edition (GNOME 版) 带来以下新特性：</p>
<ul>
<li>为 Ubuntu 设计的 Ubuntu font；正式发布时可能会被用作默认字体。</li>
<li>GNOME 升级到刚刚发布的 2.32；Evolution 升级到 2.30，相比 10.4 中的版本性能明显提升；Shotwell 代替 F-Spot 成为默认照片管理器；Gwibber 升级到最新版以支持 Twitter 新的身份验证系统。</li>
<li>现在可以点开通知区域的小喇叭(Sound Indicator)控制音乐播放器。</li>
<li>Ubuntu 软件中心大幅改进：主界面增加“Feature 和 What’s New”两栏，推介优秀的和最新的软件；可以通过软件中心购买付费软件 (Get Software-&gt;For Purchase，不过目前只有一个用于测试的包)；</li>
<li>Ubunto One: Ubuntu One 的登入登出集成到了桌面右上角的 Indicator Applet Session；增加了 Ubuntu SSO 的集成度；Nautilus 中管理文件夹同步的选项得到改进；文件同步速度提升；现在可以在 Ubuntu One 音乐商店中分享音乐链接。</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>wordpress feed设置</title>
    <url>/wordpress-feed-config/</url>
    <content><![CDATA[<p>wordpress的feed的设置默认是只显示文章摘要，而不是全文。而做为feed应该显示文章的全部内容，只显示摘要会造成文章在feed中无排版、图片、视频、相关文章都等不能显示。</p>
<p>本博开始的时候也没有注意到这一点，造成文章在google reader等RSS订阅工具中显示时版排丢失，在设置成显示全文后，所有版排、图片、视频、相关文章均可正常显示啦。</p>
<p>本博feed输出到google reader的效果</p>
<p><img src="//img.gagahappy.cn/blog/2010/10/googlereader2.png" title="googlereader"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>Python于Web 2.0网站的应用</title>
    <url>/hqn-python-web2-0/</url>
    <content><![CDATA[<p>概要<br>著名Web2.0网站，豆瓣网，从初期便选用Python作为网站构建所用的语言，而它也是目前在豆瓣网中使用最广泛，基础最深厚的语言。而在网站的开发过程中，技术团队也总结出了许多Python语言在使用上的经验。洪强宁作为豆瓣网的首席架构师，将在此次演讲中将和观众分享他眼中Python语言的特点、文化及优势，并结合豆瓣开发过程中的多个实际案例，阐述Python这门语言是如何简化一些常见场景的开发，并使豆瓣网及其技术团队能够充分适应 Web 2.0时代所带来的快速变化。</p>
<span id="more"></span>

<p>个人简介<br>洪强宁：2002年毕业于清华大学，现任北京豆瓣互动科技有限公司首席架构师。洪强宁和他带领的技术团队致力于用技术改善人们的文化和生活品质，在网站架构、性能、可伸缩性上进行深入研究。豆瓣网曾获软件中国2006年度最佳技术应用网站。</p>
<p>关于会议<br>QCon全球企业开发大会（QCon Enterprise Software Development Conference）是由C4Media媒体集团InfoQ网站主办的全球顶级技术盛会，每年在伦敦、旧金山、东京、北京召开。自2007年3月份在伦敦召开首次举办以来，已经有包括金融、电信、互联网、航空航天等领域的近万名架构师、项目经理、团队领导者和高级开发人员参加过QCon大会。</p>
<blockquote>
<p>转自:<a href="http://www.infoq.com/cn/presentations/hqn-python-web2.0">http://www.infoq.com/cn/presentations/hqn-python-web2.0</a></p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>rails3.0 安装mysql2 失败，发生lmysqlclient 错误</title>
    <url>/rails3-0-gem-mysql2-lmysqlclient/</url>
    <content><![CDATA[<p>rails3.0使用的mysql驱动是mysql2，默认安装使用 bundle install，在安装过程中出现如下错误</p>
<blockquote>
<p>/opt/ruby/bin/ruby extconf.rb<br>checking for rb_thread_blocking_region()… no<br>checking for mysql_query() in -lmysqlclient… no<br>checking for main() in -lm… yes<br>checking for mysql_query() in -lmysqlclient… no<br>checking for main() in -lz… yes<br>checking for mysql_query() in -lmysqlclient… no<br>checking for main() in -lsocket… no<br>checking for mysql_query() in -lmysqlclient… no<br>checking for main() in -lnsl… yes<br>checking for mysql_query() in -lmysqlclient… no<br>checking for main() in -lmygcc… no<br>checking for mysql_query() in -lmysqlclient… no<br>*** extconf.rb failed ***<br>Could not create Makefile due to some reason, probably lack of<br>necessary libraries and/or headers.  Check the mkmf.log file for more<br>details.  You may need configuration options.</p>
</blockquote>
<p>解决方法</p>
<p>既然要安装 mysql2 驱动，我们完全可以抛开bundle，而使用传统的gem的安装方式，并指明mysql的以下几个选项即可<br><code>sudo gem install mysql2 -- --with-mysql-dir=/opt/mysql --with-mysql-include=/opt/mysql/include/mysql --with-mysql-lib=/opt/mysql/lib/mysql/</code></p>
<p>然后再运行 bundle intall顺利完成其它gem组件的安装。看到网上有的解决方法是安装mysql-deve这个库，其实知道原因后对症下药即可，本博没有安装mysql-deve，仅是指明了mysql的相关选项，即可解决问题。</p>
<blockquote>
<p>PS：bundle这个gem真的被集成到rails3.0里了。</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 10.10 grub 修复</title>
    <url>/ubuntu-10-10-grub-repair/</url>
    <content><![CDATA[<p>ubuntu从9.10起开始使用grub2.0，修复方法与grub1.5有较大不同，所以就不能用修复ubuntu 9.04的grub方法去修复ubuntu9.10以后的版本了。</p>
<p>修复ubuntu 10.10 grub 的方法如下</p>
<p>使用10.10的live CD 引导系统，进入live 模式，即试用ubuntu模式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span>

<span class="token function">fdisk</span> -l <span class="token comment">#查看你的linux所在分区，如果你把/boot单独分了区，请查看/boot所在分区，本人没有将/boot单独分区，所以查看的是linux所在分区，被安装在了sda10上（实际操作中请以你的为准）</span>

<span class="token function">mount</span> /dev/sda10 /mnt
<span class="token function">mount</span> /dev/sda10 /mnt/boot  <span class="token comment">#/boot单独分区，没有单独分区的请跳过这一步</span>

<span class="token function">mount</span> –bind /proc /mnt/proc  <span class="token comment">#（bind前面是两个减号）</span>
<span class="token function">mount</span> –bind /dev /mnt/dev
<span class="token comment">#以上这两步很重要，如果不挂载，系统会找不到proc无法顺利重新安装Grub</span>

<span class="token function">chroot</span> /mnt  <span class="token comment">#进入虚拟系统，如果不行请尝试 chroot /mnt /bin/bash</span>
update-grub2 <span class="token comment">#可以省略</span>
grub-install /dev/sda <span class="token comment">#如果看到Installation finished.No Error Reported.说明已经成功啦</span>

<span class="token builtin class-name">exit</span> <span class="token comment">#这里是退出虚拟系统</span>

<span class="token function">umount</span> /mnt/sys
<span class="token function">umount</span> /mnt/dev

<span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重新启动后就可以看到grub菜单了</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu qq 自动退出</title>
    <url>/ubuntu-qq-auto-quit/</url>
    <content><![CDATA[<p>QQ莫名其妙退出的问题可以通过下面的方法解决：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit /usr/bin/qq
<span class="token comment">#!/bin/sh</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GDK_NATIVE_WINDOWS</span><span class="token operator">=</span>true  <span class="token comment">#把这行加入就能解决自动退出的问题</span>
<span class="token builtin class-name">cd</span> /usr/share/tencent/qq/
./qq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>APR version 1.2.0 or later is required</title>
    <url>/apr-version-1-2-0-or-later-is-required/</url>
    <content><![CDATA[<p>以前还确实没有遇到过这种情况，出现configure: error: APR version 1.2.0 or later is required错误，查了一下资料，好像是在安装apache之前安装过系统地默认地apr会导致这种问题，解决办法从新编译安装apr和apr-util<code>configure中添加–with-apr=/aprpath/ –with-apr-util=/aprutilpath –with-included-apr</code>参数，编译通过，OK</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>rails3.0怪异的数据库密码配置</title>
    <url>/rails3-passwd-must-to-be-string-format/</url>
    <content><![CDATA[<p>发现rails3.0在配置数据库密码这里有一个要注意的地方，当你的密码完全是纯数字的时候，会引发can’t convert Fixnum into String 错误，这时如果你非要用数字做密码，请给数字密码加上引号。当密码是以字母开头的时候，不会出现这种现象，rails会顺利的启动。</p>
<p><a href="//img.gagahappy.cn/blog/2010/10/sendpix1.jpg" title="rails3"></a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Macbuntu，Ubuntu变身苹果</title>
    <url>/macbuntu-make-ubuntu-to-mac-osx/</url>
    <content><![CDATA[<p>记得以前把ubuntu美化成mac要安装许多软件，不但时间长，而且相当的复杂，上手比较困难，使得许多人望而却步，其中也包括本博，终于Macbuntu的出现使得这一问题变得相当简单，下载后一健安装就可以完成ubuntu界面向MAC OSX的转变。</p>
<p>目前，Macbuntu有两种版本，分别针对ubuntu10.04和ubuntu10.10，下载的时候一定要选对版本，否则不能正常安装。</p>
<p>安装步骤：</p>
<ol>
<li>下载：<a href="http://sourceforge.net/projects/macbuntu/files/macbuntu-10.04/v2.3/Macbuntu-10.04.tar.gz/download">http://sourceforge.net/projects/macbuntu/files/macbuntu-10.04/v2.3/Macbuntu-10.04.tar.gz/download</a></li>
<li>安装：解压后进入文件夹，执行./install.sh。注意，这里不用加sudo</li>
<li>选择安装内容：<br><img src="//img.gagahappy.cn/blog/2010/10/sendpix0.jpg" title="Macbuntu"></li>
</ol>
<p>在这个过程中会让你选择一些特效，例如show desktop，scale等类似Mac os X的Expose特效。</p>
<p>等待安装完成后，界面会自动变成MAC OSX，怎么样，简单吧，相信你已经安装好了，尽情的使用吧！</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>puts 返回值</title>
    <url>/puts-back-value/</url>
    <content><![CDATA[<p>对puts有了新的认识，其返回值是nil，而不是别的什么。。。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>fcitx 配置文件位置改变</title>
    <url>/fcitx-change-config-postion/</url>
    <content><![CDATA[<p>新版的fcitx(3.6以上svn版的)的配置文件config换位置 了，原来的都是在~/.fcitx，现在是/usr/share/fcitx/data/config</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fcitx</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby p3p协议</title>
    <url>/ruby-p3p-def/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">p3p</span></span>
  headers<span class="token punctuation">[</span><span class="token string">'P3P'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"policyref=\"/w3c/p3p.xml\", CP=\"ALL DSP COR CURa ADMa DEVa TAIa OUR BUS IND UNI COM NAV INT\""</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>如何查看 ActiveRecord::Base.connection.executes 的执行结果？</title>
    <url>/activerecordbase-connection-executes/</url>
    <content><![CDATA[<p>拿mysql2这个gem来说：ActiveRecord::Base.connection.execute执行结果是Mysql2::Result的一个实例，这个类提供很多将执行结果解析出来的方法，例如：to_set、each、collect等，Mysql2::Result这些返回的一般都是数组，直接里面的元素的排序是按照数据库中字段的顺序排列的，按照数组的index直接取。 例如:</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">results <span class="token operator">=</span> <span class="token constant">ActiveRecord</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Base</span><span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token string">"SELECT * FROM `users`"</span><span class="token punctuation">)</span>
results<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>result<span class="token operator">|</span>
   <span class="token punctuation">(</span><span class="token number">0.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>size <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>index<span class="token operator">|</span>
      puts result<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
   <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Eager load application classes</title>
    <url>/eager-load-application-classes/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># Eager load application classes</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">load_application_classes</span></span>
  <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token variable">$rails_rake_task</span>
  <span class="token keyword">if</span> configuration<span class="token punctuation">.</span>cache_classes
    configuration<span class="token punctuation">.</span>eager_load_paths<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>load_path<span class="token operator">|</span>
      matcher <span class="token operator">=</span> <span class="token regex">/\A#&#123;Regexp.escape(load_path)&#125;(.*)\.rb\Z/</span>
      <span class="token builtin">Dir</span><span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>load_path<span class="token delimiter tag">&#125;</span></span>/**/*.rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>file<span class="token operator">|</span>
        require_dependency file<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>matcher<span class="token punctuation">,</span> <span class="token string">'\1'</span><span class="token punctuation">)</span>
      <span class="token keyword">end</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Error loading gem paths on load path in gem_prelude</title>
    <url>/error-loading-gem-paths-on-load-path-in-gem-prelude/</url>
    <content><![CDATA[<p>在用rvm安装ruby后运行gem，出现</p>
<blockquote>
<p>Error loading gem paths on load path in gem_prelude<br>can’t modify frozen string<br><a href="internal:gem_prelude">internal:gem_prelude</a>:69:in <code>force_encoding&#39; &lt;internal:gem_prelude&gt;:69:in </code>set_home’<br><a href="internal:gem_prelude">internal:gem_prelude</a>:38:in <code>dir&#39; &lt;internal:gem_prelude&gt;:76:in </code>set_paths’<br><a href="internal:gem_prelude">internal:gem_prelude</a>:47:in <code>path&#39; &lt;internal:gem_prelude&gt;:286:in </code>push_all_highest_version_gems_on_load_path’<br><a href="internal:gem_prelude">internal:gem_prelude</a>:355:in `<compiled>‘</p>
</blockquote>
<p>解决方法：找到 your/home/.rvm/src/ruby-your-version/gem_prelude.rb文件 编辑</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">set_home</span></span><span class="token punctuation">(</span>home<span class="token punctuation">)</span>
 home <span class="token operator">=</span> home<span class="token punctuation">.</span>gsub <span class="token builtin">File</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ALT_SEPARATOR</span><span class="token punctuation">,</span> <span class="token builtin">File</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">SEPARATOR</span> <span class="token keyword">if</span> <span class="token builtin">File</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ALT_SEPARATOR</span>
<span class="token operator">-</span> <span class="token variable">@gem_home</span> <span class="token operator">=</span> home<span class="token punctuation">.</span>force_encoding<span class="token punctuation">(</span><span class="token constant">Encoding</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'filesystem'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">+</span> <span class="token variable">@gem_home</span> <span class="token operator">=</span> home<span class="token punctuation">.</span>dup<span class="token punctuation">.</span>force_encoding<span class="token punctuation">(</span><span class="token constant">Encoding</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'filesystem'</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Rack::Builder  rackup</title>
    <url>/rackbuilder-rackup/</url>
    <content><![CDATA[<p>rackup converts the supplied rack config file to an instance of Rack::Builder. This is how is happens under the hood ( just so you get an idea ) :</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">config_file <span class="token operator">=</span> <span class="token builtin">File</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span>config<span class="token punctuation">)</span>
rack_application <span class="token operator">=</span> eval<span class="token punctuation">(</span><span class="token string">"Rack::Builder.new &#123; <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>config_file<span class="token delimiter tag">&#125;</span></span> &#125;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>And then rackup supplies rack_application to the respective webserver :</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">server<span class="token punctuation">.</span>run rack_application<span class="token punctuation">,</span> options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>Very straight forward! In short, rack config files are evaluated within the context of a Rack::Builder object. So if we convert infinity to a rack config file which rackup can understand :</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># infinity.ru</span>

infinity <span class="token operator">=</span> <span class="token builtin">Proc</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>env<span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"Content-Type"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"text/html"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> env<span class="token punctuation">.</span>inspect<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>

use <span class="token constant">Rack</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">CommonLogger</span>

map <span class="token string">'/'</span> <span class="token keyword">do</span>
  run infinity
<span class="token keyword">end</span>

map <span class="token string">'/version'</span> <span class="token keyword">do</span>
  map <span class="token string">'/'</span> <span class="token keyword">do</span>
    run <span class="token builtin">Proc</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>env<span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"Content-Type"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"text/html"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"infinity 0.1"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">end</span>

  map <span class="token string">'/last'</span> <span class="token keyword">do</span>
    run <span class="token builtin">Proc</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>env<span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"Content-Type"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"text/html"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"infinity beta 0.0"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>And now run it :<br><code>rackup infinity.ru</code></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>rack</tag>
      </tags>
  </entry>
  <entry>
    <title>rails Rails::OrderedOptions</title>
    <url>/rails-railsorderedoptions/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Rails</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">OrderedOptions</span> <span class="token operator">&lt;</span> <span class="token builtin">Array</span> <span class="token comment">#:nodoc:</span>
  <span class="token keyword">def</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    key <span class="token operator">=</span> key<span class="token punctuation">.</span>to_sym

    <span class="token keyword">if</span> pair <span class="token operator">=</span> find_pair<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      pair<span class="token punctuation">.</span>pop
      pair <span class="token operator">&lt;</span><span class="token operator">&lt;</span> value
    <span class="token keyword">else</span>
      <span class="token keyword">self</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    pair <span class="token operator">=</span> find_pair<span class="token punctuation">(</span>key<span class="token punctuation">.</span>to_sym<span class="token punctuation">)</span>
    pair <span class="token operator">?</span> pair<span class="token punctuation">.</span>last <span class="token punctuation">:</span> <span class="token keyword">nil</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">method_missing</span></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span>
    <span class="token keyword">if</span> name<span class="token punctuation">.</span>to_s <span class="token operator">=</span><span class="token operator">~</span> <span class="token regex">/(.*)=$/</span>
      <span class="token keyword">self</span><span class="token punctuation">[</span>$<span class="token number">1.</span>to_sym<span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">.</span>first
    <span class="token keyword">else</span>
      <span class="token keyword">self</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token keyword">private</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">find_pair</span></span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token punctuation">&#123;</span> <span class="token operator">|</span>i<span class="token operator">|</span> <span class="token keyword">return</span> i <span class="token keyword">if</span> i<span class="token punctuation">.</span>first <span class="token operator">==</span> key <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>resque Priorities and Queue Lists</title>
    <url>/resque-priorities-and-queue-lists/</url>
    <content><![CDATA[<p>Priorities and Queue Lists</p>
<p>Resque doesn’t support numeric priorities but instead uses the order of queues you give it. We call this list of queues the “queue list.”</p>
<p>Let’s say we add a warm_cache queue in addition to our file_serve queue. We’d now start a worker like so:</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">$ <span class="token constant">QUEUES</span><span class="token operator">=</span>file_serve<span class="token punctuation">,</span>warm_cache rake resque<span class="token symbol">:work</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>When the worker looks for new jobs, it will first check file_serve. If it finds a job, it’ll process it then check file_serve again. It will keep checking file_serve until no more jobs are available. At that point, it will check warm_cache. If it finds a job it’ll process it then check file_serve (repeating the whole process).</p>
<p>Resque doesn’t support numeric priorities but instead uses the order of queues you give it. We call this list of queues the “queue list.”</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>resque</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby 正则表达式脱字符</title>
    <url>/ruby-character-class-up/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">re <span class="token operator">=</span> <span class="token regex">/[^aeiou]/</span>
<span class="token comment"># Match any character except a, e, i, o, u</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby escape</title>
    <url>/ruby-escape/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">'cgi'</span>
url <span class="token operator">=</span> <span class="token string">'http://www.gagahappy.com/美食大下'</span>
url_escape <span class="token operator">=</span> <span class="token constant">CGI</span><span class="token punctuation">:</span><span class="token punctuation">:</span>escape<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
url_unescape <span class="token operator">=</span> <span class="token constant">CGI</span><span class="token punctuation">:</span><span class="token punctuation">:</span>unescape<span class="token punctuation">(</span>url_escape<span class="token punctuation">)</span>
puts url_escape
puts url_unescape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>如何理解ruby中的__FILE__</title>
    <url>/ruby-file-name-file/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token builtin">File</span><span class="token punctuation">.</span>expand_path<span class="token punctuation">(</span>__FILE__ <span class="token operator">+</span> <span class="token string">'/../filename'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby 正则表达式获取匹配字符串前后部分</title>
    <url>/ruby-match-pre-post-match/</url>
    <content><![CDATA[<p>ruby 正则表达式获取匹配字符串前后部分</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">a <span class="token operator">=</span> <span class="token string">"Hello gagahappy Hi"</span>
refs <span class="token operator">=</span> a<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token regex">/gagahappy/</span><span class="token punctuation">)</span>
refs<span class="token punctuation">.</span>pre_match  <span class="token comment"># => "Hello "</span>
refs<span class="token punctuation">.</span>post_match <span class="token comment"># => " Hi"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby 正则表达式中的全局变量</title>
    <url>/ruby-regular-expression-in-sub-gsub/</url>
    <content><![CDATA[<p>在使用sub,gsub 时，正则表达式不中不能使用全局变量</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">str <span class="token operator">=</span> <span class="token string">"a123b456c789"</span>
str<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token regex">/(a\d+)(b\d+)(c\d+)/</span><span class="token punctuation">,</span><span class="token string">"a=<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>$<span class="token number">1</span><span class="token delimiter tag">&#125;</span></span>, b=<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>$<span class="token number">2</span><span class="token delimiter tag">&#125;</span></span>, c=<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>$<span class="token number">3</span><span class="token delimiter tag">&#125;</span></span>"</span><span class="token punctuation">)</span>
<span class="token operator">=</span><span class="token operator">></span>
<span class="token string">"a=, b=, c="</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以使用</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">str <span class="token operator">=</span> <span class="token string">"a123b456c789"</span>
str<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token regex">/(a\d+)(b\d+)(c\d+)/</span><span class="token punctuation">,</span><span class="token string">'a=\1, b=\2, c=\3'</span><span class="token punctuation">)</span>
<span class="token operator">=</span><span class="token operator">></span>
<span class="token string">"a=123, b=456, c=789"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>或</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">str <span class="token operator">=</span> <span class="token string">"a123b456c789"</span>
str<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token regex">/(a\d+)(b\d+)(c\d+)/</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token string">"a=<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>$<span class="token number">1</span><span class="token delimiter tag">&#125;</span></span>, b=<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>$<span class="token number">2</span><span class="token delimiter tag">&#125;</span></span>, c=<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>$<span class="token number">3</span><span class="token delimiter tag">&#125;</span></span>"</span><span class="token punctuation">&#125;</span>
<span class="token operator">=</span><span class="token operator">></span>
<span class="token string">"a=123, b=456, c=789"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>rvm gemset </title>
    <url>/rvm-gemset-pic/</url>
    <content><![CDATA[<p><code>rvm gemset</code></p>
<p><a href="//img.gagahappy.cn/blog/2012/02/Screenshot-at-2012-02-20-222952.png"><img src="//img.gagahappy.cn/blog/2012/02/Screenshot-at-2012-02-20-222952.png" title="Screenshot at 2012-02-20 22:29:52"></a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>rvm</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 11.10 rvm 安装版ruby openssl解决</title>
    <url>/ubuntu-11-10-rvm-ruby-openssl/</url>
    <content><![CDATA[<p>用rvm 安装ruby1.9.1时，需要openssl的版本为0.98，而系统自带为1.0，造成RUNERR,解决方法如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rvm pkg <span class="token function">install</span> openssl
rvm remove <span class="token number">1.9</span>.2
rvm <span class="token function">install</span> <span class="token number">1.9</span>.2 --with-openssl-dir<span class="token operator">=</span><span class="token variable">$rvm_path</span>/usr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>rvm</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx proxy configration</title>
    <url>/nginx-proxy-configration/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">proxy_set_header Host <span class="token variable">$http_host</span><span class="token punctuation">;</span>
proxy_redirect <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span>/index.html<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> <span class="token variable">$1</span>/index.html <span class="token builtin class-name">break</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span>.html<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> <span class="token variable">$1</span>.html <span class="token builtin class-name">break</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>-f <span class="token variable">$request_filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
proxy_pass http://thin_cluster<span class="token punctuation">;</span>
<span class="token builtin class-name">break</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>POLL SELECT  EPOLL 原理比较分析</title>
    <url>/compare-poll-select-epoll/</url>
    <content><![CDATA[<blockquote>
<p>因为需要了解底层设备访问的原理，所以惯用高层应用语言的我，需要了解一下Linux的设备访问机制，尤其是处理一组非阻塞IO的原理方法，标准的术语好像是叫多路复用。以下文章部分句子有引用之处，恕没有一一指出出处。</p>
</blockquote>
<blockquote>
<p>对于接触过Linux内核或设备驱动开发的读者，一定清楚poll和select系统调用，以及从2.5版本引入的epoll机制（epoll机制包含三个系统调用）。网上关于它们的文章，有说用法的，甚为详细，更有分析源代码的，又比较深入，且枝节颇多。经过几篇文章的阅读，我把觉得比较核心的东西写下来吧。我的用意是尽可能以简单的概念，比对他们三者的异同。</p>
</blockquote>
<span id="more"></span>

<p>几经查找我才确定下来，poll和select应该被归类为这样的系统调用，它们可以阻塞地同时探测一组支持非阻塞的IO设备，是否有事件发生（如可读，可写，有高优先级的错误输出，出现错误等等），直至某一个设备触发了事件或者超过了指定的等待时间——也就是它们的职责不是做IO，而是帮助调用者寻找当前就绪的设备。同类型的产品是Windows的IOCP，它也是处理多路复用，只是把IO和探测封装在了一起了。</p>
<p>准备的知识有两点：1、fd；2、op-&gt;poll。</p>
<blockquote>
<p>在Linux里面，设备都被抽象为文件，一系列的设备文件就有自己独立的虚拟文件系统，所以，设备在系统调用参数中的表示就是file description。fd其实就是一个整数（特别地，标准输入，输出，错误输出分别对应的fd是0，1，2）。与内核打交道的时候，传递整数的fd可以在自己的文件系统中作进一步的检查是否合法，如果只是返回指针就不能这样操作了，毕竟指针是无差别无意义的。</p>
</blockquote>
<blockquote>
<p>通过fd访问file，通过file可以访问其fileOperator，这里面我们要关心的一个fileOp就是poll。因为系统调用poll和select，就是依靠这个文件操作poll实现的。poll文件操作有两个参数，一个是文件本身，一个可以看做是当设备尚未就绪时调用的回调函数，这个函数是把设备自己特有的等待队列传给内核，让内核把当前的进程挂载到其中（因为当设备就绪时，设备就应该去唤醒在自己特有等待队列中的所有节点，这样当前进程就获取了完成的信号了）。poll文件操作返回的必须是一组标准的掩码，其中的各个位指示当前的不同的就绪状态（全0为没有任何事件触发）。</p>
</blockquote>
<p>再谈谈早期多路复用的版本poll和select。</p>
<blockquote>
<p>本质而言，poll和select的共同点就是，对全部指定设备做一次poll，当然这往往都是还没有就绪的，那就会通过回调函数把当前进程注册到设备的等待队列，如果所有设备返回的掩码都没有显示任何的事件触发，就去掉回调函数的函数指针，进入有限时的睡眠状态，再恢复和不断做poll，再作有限时的睡眠，直到其中一个设备有事件触发为止。只要有事件触发，系统调用返回，回到用户态，用户就可以对相关的fd作进一步的读或者写操作了。当然，这个时候还不是所有的设备都就绪的喔，那就得不断地poll或者select了，而做一次这样的系统调用都得轮询所有的设备，次数是设备数*（睡眠次数-1），也就是时间复杂度是O（n），还得做几次O（n）呢。可见，对于现在普遍的服务器程序，需要同时并发监听数千个连接，并且连接需要重复使用的情况，poll和select就存在这样的性能瓶颈。另外，数千个设备fd在每次调用时，都需要将其从用户空间复制到内核空间，这里的开销不可忽略。</p>
</blockquote>
<p>poll和select放在一起，是因为其机制一致，而参数和数据结构就略有不同。</p>
<blockquote>
<p>select一次性传入三组作用于不同信道的设备fd，分别是输入，输出和错误异常。各组的fd期待各组所特有的，由代码指定的一组事件，如输入信道期待输入就绪，输入挂起和错误等事件。 然后，select就挑选调用者关心的fd做poll文件操作，检测返回的掩码，看看是否有fd所属信道感兴趣的事件，比如看看这个属于输出信道的fd有没有输出就绪等一系列的事件发生，一样地，如果有一个fd发生感兴趣事件就返回调用了。select，为了同时处理三组使用不同的事件判断规则的fd，采用了位图的方式表示，一组一个位图，位长度是当中最大的fd值，上限是1024，三组就是3072，而且这还只是传入的位图，还有一样大小的传出的位图。当fd数越来越多时，所需的存储开销比较大。</p>
</blockquote>
<p>既然，一组fd处理起来比较粗放，那就各个fd自己准备好了。poll()系统调用是System V的多元I/O解决方案。它有三个参数，第一个是pollfd结构的数组指针，也就是指向一组fd及其相关信息的指针，因为这个结构包含的除了fd，还有期待的事件掩码和返回的事件掩码，实质上就是将select的中的fd，传入和传出参数归到一个结构之下，也不再把fd分为三组，也不再硬性规定fd感兴趣的事件，这由调用者自己设定。这样，不使用位图来组织数据，也就不需要位图的全部遍历了。按照一般队列地遍历，每个fd做poll文件操作，检查返回的掩码是否有期待的事件，以及做是否有挂起和错误的必要性检查，如果有事件触发，就可以返回调用了。</p>
<p>回到poll和select的共同点，面对高并发多连接的应用情境，它们显现出原来没有考虑到的不足，虽然poll比起select又有所改进了。除了上述的关于每次调用都需要做一次从用户空间到内核空间的拷贝，还有这样的问题，就是当处于这样的应用情境时，poll和select会不得不多次操作，并且每次操作都很有可能需要多次进入睡眠状态，也就是多次全部轮询fd，我们应该怎么处理一些会出现重复而无意义的操作。</p>
<p>这些重复而无意义的操作有：</p>
<blockquote>
<ol>
<li>从用户到内核空间拷贝，既然长期监视这几个fd，甚至连期待的事件也不会改变，那拷贝无疑就是重复而无意义的，我们可以让内核长期保存所有需要监视的fd甚至期待事件，或者可以再需要时对部分期待事件进行修改；</li>
<li>将当前线程轮流加入到每个fd对应设备的等待队列，这样做无非是哪一个设备就绪时能够通知进程退出调用，聪明的开发者想到，那就找个“代理”的回调函数，代替当前进程加入fd的等待队列好了（这也是我后来才总结出来，Linux的等待队列，实质上是回调函数队列吧，也可以使用宏来将当前进程“加入”等待队列，其实就是将唤醒当前进程的回调函数加入队列）。</li>
</ol>
</blockquote>
<p>这样，像poll系统调用一样，做poll文件操作发现尚未就绪时，它就调用传入的一个回调函数，这是epoll指定的回调函数，它不再像以前的poll系统调用指定的回调函数那样，而是就将那个“代理”的回调函数加入设备的等待队列就好了，这个代理的回调函数就自己乖乖地等待设备就绪时将它唤醒，然后它就把这个设备fd放到一个指定的地方，同时唤醒可能在等待的进程，到这个指定的地方取fd就好了。我们把1和2结合起来就可以这样做了，只拷贝一次fd，一旦确定了fd就可以做poll文件操作，如果有事件当然好啦，马上就把fd放到指定的地方，而通常都是没有的，那就给这个fd的等待队列加一个回调函数，有事件就自动把fd放到指定的地方，当前进程不需要再一个个poll和睡眠等待了。</p>
<p>epoll机制就是这样改进的了。诚然，fd少的时候，当前进程一个个地等问题不大，可是现在和尚多了，方丈就不好管了。以前设备事件触发时，只负责唤醒当前进程就好了，而当前进程也只能傻傻地在poll里面等待或者循环，再来一次poll，也不知道这个由设备提供的poll性能如何，能不能检查出当前进程已经在等待了就立即返回，当然，我也不明白为什么做了一遍的poll之后，去掉回调函数指针了，还得再做，不是说好了会去唤醒进程的吗？</p>
<p>现在就让事件触发回调函数多做一步。本来设备还没就绪就调用一个回调函数了，现在再在这个回调函数里面做一个注册另一个回调函数的操作，目的就是使得设备事件触发多走一步，不仅仅是唤醒当前进程，还要把自己的fd放到指定的地方。就像收本子的班长，以前得一个个学生地去问有没有本子，如果没有，它还得等待一段时间而后又继续问，现在好了，只走一次，如果没有本子，班长就告诉大家去那里交本子，当班长想起要取本子，就去那里看看或者等待一定时间后离开，有本子到了就叫醒他，然后取走。这个道理很简单，就是老师和班干们常说的，大家多做一点工作，我的工作就轻松很多了，尤其是需要管理的东西越来越多时。</p>
<p>这种机制或者说模式，我想在Java的FutureTask里面应该也会用到的，一堆在线程池里面跑着的线程（当然这是任务，不是线程，接口是Callable<V>，不是Runnable.run，是Callable.call，它是可以返回结果的），谁先做好就应该先处理呀，可是难道得一个个问吗？干脆就谁好了，谁就按照既定的操作暴露自己，这样FutureTask的get方法就可以马上知道当前最先完成的线程了，就可以取此线程返回结果了。</p>
<p>epoll由三个系统调用组成，分别是epoll_create，epoll_ctl和epoll_wait。epoll_create用于创建和初始化一些内部使用的数据结构；epoll_ctl用于添加，删除或者修改指定的fd及其期待的事件，epoll_wait就是用于等待任何先前指定的fd事件。</p>
<blockquote>
<p>原文地址：<a href="http://www.cnblogs.com/sharra/archive/2010/12/30/1921287.html">http://www.cnblogs.com/sharra/archive/2010/12/30/1921287.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>iphone 删除同步相册</title>
    <url>/iphone-delete-sycn-album/</url>
    <content><![CDATA[<p>iphone 删除同步相册,只要把电脑上，同步相册对应的文件夹里的图片清空，再从iTunes里同步这个文件夹，iphone里对应的相册就会被删除啦</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>iphone</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby 操作 excel</title>
    <url>/ruby-access-excel-with-spreadsheet/</url>
    <content><![CDATA[<p><a href="http://spreadsheet.rubyforge.org/">http://spreadsheet.rubyforge.org/</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>linux split 命令</title>
    <url>/linux-split-file/</url>
    <content><![CDATA[<p>linux split 命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">功能说明：切割文件。

语法：split <span class="token punctuation">[</span>--help<span class="token punctuation">]</span><span class="token punctuation">[</span>--version<span class="token punctuation">]</span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>行数<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>-b <span class="token operator">&lt;</span>字节<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>-C <span class="token operator">&lt;</span>字节<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>-l <span class="token operator">&lt;</span>行数<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>要切割的文件<span class="token punctuation">]</span><span class="token punctuation">[</span>输出文件名<span class="token punctuation">]</span>

补充说明：split可将文件切成较小的文件，预设每1000行会切成一个小文件。

参数：

-<span class="token operator">&lt;</span>行数<span class="token operator">></span>或-l<span class="token operator">&lt;</span>行数<span class="token operator">></span> 　指定每多少行就要切成一个小文件。

-b<span class="token operator">&lt;</span>字节<span class="token operator">></span> 　指定每多少字就要切成一个小文件。支持单位:m,k

-C<span class="token operator">&lt;</span>字节<span class="token operator">></span> 　与-b参数类似，但切割时尽量维持每行的完整性。

--help 　显示帮助。

--version 　显示版本信息。

<span class="token punctuation">[</span>输出文件名<span class="token punctuation">]</span> 　设置切割后文件的前置文件名，split会自动在前置文件名后再加上编号。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用例子：<br><code>split -b 100m filename</code></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何关闭SELinux</title>
    <url>/close-selinux/</url>
    <content><![CDATA[<p>修改/etc/selinux/config</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">This <span class="token function">file</span> controls the state of SELinux on the system.
<span class="token assign-left variable">SELINUX</span><span class="token operator">=</span> can take one of these three values:
enforcing - SELinux security policy is enforced.
permissive - SELinux prints warnings instead of enforcing.
disabled - SELinux is fully disabled.
<span class="token operator">></span> <span class="token assign-left variable">SELINUX</span><span class="token operator">=</span>enforcing

<span class="token assign-left variable">SELINUXTYPE</span><span class="token operator">=</span> <span class="token builtin class-name">type</span> of policy <span class="token keyword">in</span> use. Possible values are:
targeted - Only targeted network daemons are protected.
strict - Full SELinux protection.
<span class="token assign-left variable">SELINUXTYPE</span><span class="token operator">=</span>targeted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>把 SELINUX设定为disable, 下次启动系统后将会停止SElinux。</p>
<p>检查SELinux现时况态,要知到你现在是否使用 SELinux:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">getenforce
Enforcing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora 让服务随机启动</title>
    <url>/fedora-app-start-with-system/</url>
    <content><![CDATA[<p>在我们安装完一些应用后，如mysql,httpd等，如果需要其随机启动，有一个比较简单的办法，在终端运行 ntsysv，然后选中你要随机启动的程序就可以了。</p>
<p><img src="//img.gagahappy.cn/blog/2010/07/pic.asp_.jpg" alt="随机启动" title="随机启动"></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora ssh 访问</title>
    <url>/fedora-instal-ssh/</url>
    <content><![CDATA[<p>为fedora 安装 ssh<br><code>yum install openssh-server</code></p>
<p>启动ssh<br><code>/etc/init.d/sshd start</code></p>
<p>ps:如果启用了防火墙，请打开ssh 22端口，遇到一个很奇怪的问题，设置防火墙后似乎没有生效，在关闭防火墙再次打开时，应用设置才生效，叵测！</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora 安装 subversion前的准备工作</title>
    <url>/fedora-install-subversion-preparations/</url>
    <content><![CDATA[<p>在安装fedora请先确认以下库文件都已经安装<br><code>$ sudo yum install subversion-devel openssl-devel libssh-devel firebird-devel ncpfs-devel postgresql-devel gtk2-devel</code></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora 编译安装前的准备</title>
    <url>/fedora-make-install-prepare/</url>
    <content><![CDATA[<p>安装gcc编译工具</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc
yum <span class="token function">install</span> gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>为Fedora右键添加打开终端快捷菜单</title>
    <url>/fedora-nautilus-open-termina/</url>
    <content><![CDATA[<p>为我们的Fedora右键添加打开终端快捷菜单，打开终端，输入命令：</p>
<p>yum install nautilus-open-terminal</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora13 openssl1.0.0 兼容性</title>
    <url>/fedora13-openssl1-0-0/</url>
    <content><![CDATA[<p>fedora13将 openssl的版本由0.98升级到了1.0，自从这东西出现后，许多软件都不好用了。</p>
<ol>
<li>subversion与apache不能集成，subversion感觉在编译安装时就有问题，虽然可以成功安装，但与apache集成在一起时，svn仓库不能访问。</li>
<li>ruby1.8.7中安装openssl库编译出错。</li>
</ol>
<p>openssl1.0.0实在是令人太痛苦了，暂时决定不使用fedora13，先回到ubuntu10.04上面吧。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>Gravatar 服务</title>
    <url>/gravatar/</url>
    <content><![CDATA[<p>Gravatar(Globally Recognized Avatar的缩写) 是一项用于提供在全球范围内使用的头像服务。只要你在Gravatar的服务器上上传了你自己的头像，你便可以在其他任何支持Gravatar的博客、论坛等地方使用它。</p>
<p>在Gravatar上，用户可以用他们的电子邮件注册一个帐号，并且上传一个与之绑定的头像。 许多流行的博客程序都支持Gravatar， 当用户发布一个评论并填写了他的电子邮件地址时，博客程序会自动查找在Gravatar上是否有与之绑定的头像。如果有，则这个头像将会与评论一起显示出来。WordPress v2.5  开始原生地提供对Gravatar的支持。此外还有许多程序通过插件来支持Gravatar，例如国内的著名论坛程序Discuz!。</p>
<p>一个Gravatar头像可以使用高达512像素的图片,并且默认地以80*80的尺寸显示出来。 如果上传的头像大了或了小了，它会自动地进行跳转。每个头像都会按照MPAA分级制度来进行平等，这样网站管理员可以控制在他们的站点上显示合适的头像。</p>
<p>为了防止用户的电子邮件地址遭到泄漏而收到大量垃圾邮件，Gravatar在传递用户的邮箱地址时采用的是通过MD5加密的邮件地址。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>rake db:migrate CREATE TABLE schema_migrations</title>
    <url>/rake-dbmigrate-create-table-schema-migrations/</url>
    <content><![CDATA[<p>在使用rails 2.3.8与mysql 5.1 开发时，运行rake db:migrate 出现</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;schema_migrations&#96; (&#96;version&#96;varchar(255) NOT NULL) ENGINE&#x3D;InnoDB错误提示
# 原因是新版mysql的客户端连接库对rails 2.3的支持不够好导致的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>解决方法，换一个旧版本的mysql的libmySQL.dll文件，复制到ruby目录下的bin文件夹中就可以解决这个问题了。</p>
<blockquote>
<p><a href="http://instantrails.rubyforge.org/svn/trunk/InstantRails-win/InstantRails/mysql/bin/libmySQL.dll">附libmySQL.dll下载地址：</a></p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>网站301重定向</title>
    <url>/redirect-301-apache/</url>
    <content><![CDATA[<p>gagahappy.com这个域名已经用了一段时间了，想把gagahappy.cn自动重定向到gagahappy.com上面，本来打算用万网的服务去做（收费要200元），想到自己的主机是apache的，可以用其自身的重定向功能。</p>
<p>由于用的是虚拟主机，修改.htaccess文件即可。</p>
<blockquote>
<p>RewriteCond %{HTTP_HOST} ^<a href="http://www.gagahappy.cn/">www.gagahappy.cn</a> [NC]<br>RewriteRule ^(.*)$ <a href="http://www.gagahappy.com/$1">http://www.gagahappy.com/$1</a> [L,R=301]</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用360镜像解决WordPress访问速度慢的问题</title>
    <url>/how-to-use-360-mirrors-cdn-to-speed-up-your-wordpress/</url>
    <content><![CDATA[<blockquote>
<p><strong>最近几天因 Google 服务器无法访问，造成国内几十万 WordPress 网站打开超级缓慢、甚至无法打开。不管你使用的国内主机，还是国外主机，只要你的网站中调用了Google Fonts字体，或者使用了Google Ajax前端库，在国内访问时都会卡得比较严重。今天，WordPress非官方中文站再次撰文，详细告诉你如何使用 360 的镜像服务，来给你的 WordPress 网站提速。</strong></p>
</blockquote>
<span id="more"></span>

<p>这次 Google 服务无法访问造成 WordPress 网站打开速度缓慢的情况，WordPress非官方中文站前面已经两次撰文，介绍了如何使用插件来禁用 WordPress 核心程序和自带主题中调用的 Open Sans 等 Google Fonts 字体，以及如何使用 360 镜像的 Google Fonts 字体服务给 WordPress 网站加速。</p>
<p>根据这两篇教程的介绍，有些网友跟我们反馈，他们的网站已经恢复了正常，包括著名的左岸读书；但是也有一些网友的网站访问速度尚未完全恢复，也有一些网友不知道该如何操作。</p>
<p>因此，我们这次教程将更为详细地介绍一下，如何使用 360 公司提供的镜像服务，来给你的 WordPress 网站提速。本文主要针对 WordPress 新手，介绍得比较细致（也可以理解为啰嗦^-^）；如果你是 WordPress 高手，可以快速跳过具体操作步骤的介绍。</p>
<hr>
<blockquote>
<p>Google Fonts 和 Google Ajax 服务器的作用<br>Google Fonts 是 Google 公司提供的字体库服务（fonts.googleapis.com），Google Ajax 是 Google 公司提供的前端开发用的 js 库服务（ajax.googleapis.com）。</p>
</blockquote>
<p>一般来说，使用 Google 公司提供的公共服务，可以有效减少网站流量，加快网站的访问速度。但由于我们的国情不同，这类服务一旦访问出现困难，依赖这些服务的网站打开反而会极其缓慢。</p>
<p>哪些文件调用了 Google Fonts 和 Google Ajax 的服务</p>
<ul>
<li>WordPress 3.5 之前的版本中，核心程序和自带主题都没有调用 Google Fonts 和 Google Ajax 服务。</li>
<li>WordPress 3.5 ~ WordPress 3.7 各版本中（含类似 3.5.1 这样的小版本），核心程序文件 wp-includes/script-loader.php 和自带主题的函数文件 functions.php 文件调用了以上服务：</li>
</ul>
<ol>
<li>wp-includes/script-loader.php</li>
<li>wp-content/themes/twentytwelve/functions.php</li>
<li>wp-content/themes/twentythirteen/functions.php</li>
</ol>
<ul>
<li>WordPress 3.8 各版本中（含类似 3.8.1 这样的小版本），除了核心程序文件 script-loader.php 文件和自带主题的函数文件 functions.php 文件外，WordPress 自带编辑器的样式文件也调用了 Google Fonts 服务：</li>
</ul>
<ol>
<li>wp-includes/script-loader.php</li>
<li>wp-includes/js/tinymce/themes/advanced/skins/wp_theme/dialog.css</li>
<li>wp-content/themes/twentytwelve/functions.php</li>
<li>wp-content/themes/twentythirteen/functions.php</li>
<li>wp-content/themes/twentyfourteen/functions.php</li>
</ol>
<ul>
<li>WordPress 3.9 各版本中（含类似 3.9.1 这样的小版本），和 WordPress 3.8 版本一样，只是 WordPress 自带编辑器的样式文件更换了位置：</li>
</ul>
<ol>
<li>wp-includes/script-loader.php</li>
<li>wp-includes/js/tinymce/plugins/compat3x/css/dialog.css</li>
<li>wp-content/themes/twentytwelve/functions.php</li>
<li>wp-content/themes/twentythirteen/functions.php</li>
<li>wp-content/themes/twentyfourteen/functions.php</li>
</ol>
<p>举个例子，比如我的网站 mydomain.com 使用的是 WordPress 3.9.1 版本（最新版本总是增加安全），和自带的 Twenty Fourteen 主题；那么我只需要修改 WordPress 3.9 版本中的1、2、5这三项。不过万一哪天我想要使用另外两款主题呢？如果你不想以后麻烦的话，我们建议你将这个5个文件一次都修改掉。</p>
<p>将 Google Fonts 和 Google Ajax 替换为 360 的镜像库服务<br>360公司及时推出了 Google Fonts 和 Google Ajax 的镜像服务。虽然我们一向对这个公司缺乏好感，但毫无疑问这项服务做得非常及时。其实 Google Fonts 服务对中文字体意义不大；Google Ajax 在国内也有很多类似的服务，比如新浪也提供类似的库服务。但是 360 完全镜像了 Google 的这两项服务，做了一个很不错的营销。</p>
<p>我们还是以网站 mydomain.com 为例，我们来依次修改上面 WodPress 3.9 版本对应的5个文件：</p>
<blockquote>
<ol>
<li>使用 FTP 软件将 wp-includes/script-loader.php 文件下载到本地；同时，建议将服务器上 script-loader.php 文件改名为 script-loader.php.backup 作为备份，</li>
<li>使用你常用的文本编辑器，比如 EverEdit 编辑器，打开 script-loader.php 文件，将其中 googleapis.com 全部替换为 useso.com ，<br>这样，fonts.googleapis.com 就变成了 fonts.useso.com ， ajax.googleapis.com 就变成了 ajax.useso.com 。</li>
<li>保存对 script-loader.php 文件所做修改，然后上传到 wp-includes 目录下。</li>
<li>对于另外4个文件，重复以上动作，完成修改。</li>
</ol>
</blockquote>
<p>这样，我们就将 Google Fonts 字体库和 Google Ajax JS资源库全部换成了360网站提供的服务上了。现在重新打开你的网站，速度是不是快了很多？</p>
<blockquote>
<p>转载: <a href="http://wpchina.org/how-to-use-360-mirrors-cdn-to-speed-up-your-wordpress-1564/">http://wpchina.org/how-to-use-360-mirrors-cdn-to-speed-up-your-wordpress-1564/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax尽量使用get</title>
    <url>/ajax-use-get-first/</url>
    <content><![CDATA[<blockquote>
<p>When using the XMLHttpRequest object, the browser implements POST in two steps: (1) send the headers, and (2) send the data. It is better to use GET instead of POST since GET sends the headers and the data together (unless there are many cookies). IE’s maximum URL length is 2 KB, so if you are sending more than this amount of data you may not be able to use GET.</p>
</blockquote>
<p>Post先发送head，再发送data<br>Get是 head/data一起发送</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>字幕文件可以自动发送到kindle设备</title>
    <url>/auto-email-subtitle-to-kindle/</url>
    <content><![CDATA[<p>字幕文件可以自动发送到kindle设备啦，目前就是还不能自动下载，因为目标网站上的文件命名还不太有规则。</p>
<p>一个一个下载还比较好解决，批量下载还待解决。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>动态库在不同平台命名</title>
    <url>/dynamic-library-name-on-different-os/</url>
    <content><![CDATA[<p>动态库在不同平台的扩展名不同</p>
<ul>
<li>windows: dll</li>
<li>linux: so</li>
<li>mac: dylib</li>
</ul>
<p>外部驱动就是很好的例子，如显卡驱动（更新驱动），只要正确编译了驱动程序，显示器程序就能正确显示，不用再管显示器的程序了（厂商已经编译好了）。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>facebook彻底删除账号</title>
    <url>/facebook-permanently-delete-account/</url>
    <content><![CDATA[<p>facebook删除账号 <a href="https://www.facebook.com/help/224562897555674">https://www.facebook.com/help/224562897555674</a></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>facebook</tag>
      </tags>
  </entry>
  <entry>
    <title>ftp 命令行删除多个文件</title>
    <url>/ftp-command-mdelete/</url>
    <content><![CDATA[<p>使用 ftp 命令行删除多个文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mdelete files<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux awk 内置字符串函数</title>
    <url>/linux-awk-function-substr/</url>
    <content><![CDATA[<p>linux awk 内置字符串函数</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> -e <span class="token string">'192.187.126.42.*POST'</span> apache_20141117.log <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print substr(<span class="token variable">$4</span>,14,2)&#125;'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 命令行awk sort uniq 统计日志</title>
    <url>/linux-command-statistics-from-log/</url>
    <content><![CDATA[<p>使用命令行简单统计网站日志，$1为ip地址，统计前20位来访最多的IP</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'&#123;print <span class="token variable">$1</span>&#125;'</span> apache_20141115.log  <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> -c <span class="token operator">|</span> <span class="token function">sort</span> -k <span class="token number">1</span> -n -r <span class="token operator">|</span> <span class="token function">head</span> -20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>注意：</p>
<blockquote>
<p>使用uniq -c统计重复行数时，一定要先sort，因为uniq -c是统计相邻行的重复数的。</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 管道</title>
    <url>/linux-pipeline/</url>
    <content><![CDATA[<p>用管理链接两个程序,第一个程序只要有输出，就会把内容传递给第二个程序，程序2就会马上对程序1的输出进行处理，而不是等到程序1的输出全都完成后，才对其输出进行处理。即，程序2实时处理程序1的输出。</p>
<p>proc1 | proc2</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 重定向标准输出标准输入到文件</title>
    <url>/linux-redirect-stdout-stderr/</url>
    <content><![CDATA[<p>linux 重定向 标准输出 标准输入到文件，测试程序用C语言，执行程序名为test_out</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token string">"this is stderr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token string">"this is stdout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试1</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$<span class="token operator">></span> test_out
<span class="token operator">=</span><span class="token operator">></span> <span class="token constant">stderr</span>
<span class="token operator">=</span><span class="token operator">></span> <span class="token constant">stdout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>
<p>测试2</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$<span class="token operator">></span> test_out <span class="token operator">></span> out<span class="token punctuation">.</span>log
<span class="token operator">=</span><span class="token operator">></span> <span class="token constant">stderr</span>
文件 out<span class="token punctuation">.</span>log中存放内容为<span class="token constant">stdout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>测试3</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$<span class="token operator">></span> test_out <span class="token number">2</span><span class="token operator">></span> err<span class="token punctuation">.</span>log
<span class="token operator">=</span><span class="token operator">></span> <span class="token constant">stdout</span>
文件 out<span class="token punctuation">.</span>log中存放内容为<span class="token constant">stderr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>测试4(常见写法，定义标准输出、标准错误到文件)</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$<span class="token operator">></span> test_out <span class="token operator">></span> stdout_stderr<span class="token punctuation">.</span>log <span class="token number">2</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token number">1</span>
文件 stdout_stderr<span class="token punctuation">.</span>log中存放内容为
<span class="token constant">stderr</span>
<span class="token constant">stdout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试5 (标准输出/错误侧漏了)</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$<span class="token operator">></span> test_out <span class="token operator">></span> stdout_stderr<span class="token punctuation">.</span>log <span class="token number">1</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token number">2</span>
<span class="token operator">=</span><span class="token operator">></span> <span class="token constant">stderr</span>
<span class="token operator">=</span><span class="token operator">></span> <span class="token constant">stdout</span>
文件 stdout_stderr<span class="token punctuation">.</span>log中存放内容为<span class="token constant">stdout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试6 (等效于测试4，如果你能想到这么写，说明你已经彻底明白stderr/stdout了，并明白在shell里执行方式)</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$<span class="token operator">></span> test_out <span class="token number">2</span><span class="token operator">></span> stdout_stderr<span class="token punctuation">.</span>log <span class="token number">1</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token number">2</span>
文件 stdout_stderr<span class="token punctuation">.</span>log中存放内容为
<span class="token constant">stderr</span>
<span class="token constant">stdout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 查找 百分号</title>
    <url>/mysql-find-per-cent/</url>
    <content><![CDATA[<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM xxx WHERE 内容 LIKE &#39;%\%%&#39;;

-- 用\%转义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>垃圾评论终于不扫了</title>
    <url>/say-goodbye-to-spam/</url>
    <content><![CDATA[<p>垃圾评论终于不扫了</p>
<blockquote>
<p>192.187.126.42</p>
</blockquote>
<p>这个ip终于停手了。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>垃圾评论ip列表</title>
    <url>/spam-ip-list/</url>
    <content><![CDATA[<p>192.187.126.42<br>218.93.202.29</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>使用haccess限制ip访问</title>
    <url>/use-haccess-limit-ip/</url>
    <content><![CDATA[<p>使用haccess限制ip访问，可以用于那些进行sql注入或发垃圾评论的ip</p>
<pre class="line-numbers language-none"><code class="language-none">Order Deny,Allow
Deny from 192.187.126.42<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>注意:Deny,Allow之间的逗号前后不能有空格，否则配置信息报错。</p>
<p>使用</p>
<blockquote>
<p>192.187.126.<br>可以限制ip段</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>查询C标准库函数</title>
    <url>/use-man-to-help-c-library/</url>
    <content><![CDATA[<p>原来可以用man 查询C标准库函数的用法</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress 禁止垃圾评论 trackback</title>
    <url>/wordpress-disable-comment-trackback/</url>
    <content><![CDATA[<p>WordPress后台可以关闭这个功能，方法如下</p>
<blockquote>
<p>在Discussion中去掉 Allow link notifications from other blogs (pingbacks and trackbacks) 前面的勾选</p>
</blockquote>
<p>并在数据库中执行</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE wp_posts SET ping_status &#x3D; &#39;closed&#39; WHERE &#39;你要关闭的相关文章的&#39;;
# 注：where部分可以不要，但最好选出有效的文章和附件，把它们的trackback和ping关闭就可以了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>手动删除WP Super Cache</title>
    <url>/wp-super-cache-manuall-uninstall/</url>
    <content><![CDATA[<p>手动删除 Wordpress插件 WP Super Cache<br>To manually uninstall:</p>
<ol>
<li> Turn off caching on the plugin settings page and clear the cache.</li>
<li> Deactivate the plugin on the plugins page.</li>
<li> Remove the WP_CACHE define from wp-config.php. It looks like <code>define( &#39;WP_CACHE&#39;, true );</code></li>
<li> Remove the Super Cache mod_rewrite rules from your .htaccess file.</li>
<li> Remove the files wp-content/advanced-cache.php and wp-content/wp-cache-config.php</li>
<li> Remove the directory wp-content/cache/</li>
<li> Remove the directory wp-super-cache from your plugins directory.<span id="more"></span></li>
</ol>
<h3 id="If-all-else-fails-and-your-site-is-broken"><a href="#If-all-else-fails-and-your-site-is-broken" class="headerlink" title="If all else fails and your site is broken"></a>If all else fails and your site is broken</h3><ol>
<li> Remove the WP_CACHE define from wp-config.php. It looks like <code>define( &#39;WP_CACHE&#39;, true );</code></li>
<li> Remove the rules (see above) that the plugin wrote to the .htaccess file in your root directory.</li>
<li> Delete the wp-super-cache folder in the plugins folder.</li>
<li> Optionally delete advanced-cache.php, wp-cache-config.php and the cache folder in wp-content/.</li>
</ol>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>换主题</title>
    <url>/change-wordpress-theme/</url>
    <content><![CDATA[<p>把博客的主题换一了个又一个，最终也没有很满意的，暂且就用这个吧。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>google analytic change 值 终于有变化了</title>
    <url>/google-analytic-change/</url>
    <content><![CDATA[<p>在把wordpress的guid统一更新为新域名后，一直没有发生变化的 google analytic change 值终于有变化了。#wordpress#</p>
<p><img src="//img.gagahappy.cn/blog/2010/08/14.jpg" title="google analytic change "></p>
<p>哈哈，是上升的趋势呢！</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>创建Berkeley DB数据仓库</title>
    <url>/svnadmin-create-berkeley-db/</url>
    <content><![CDATA[<p>创建Berkeley DB 数据仓库，首先确定系统中已经安装了Berkeley DB ，执行<br>svnadmin create –fs-type bdb  repository</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>测试 buzz</title>
    <url>/test-buzz/</url>
    <content><![CDATA[<p>测试 buzz，成功，终于也能和buzz同步了。美！</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>测试 google reader 是否可以显示随机日志</title>
    <url>/test-google-reader-show-random-post/</url>
    <content><![CDATA[<p>测试 google reader 是否可以显示随机日志</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 10.04 地址栏</title>
    <url>/ubuntu-10-04-local/</url>
    <content><![CDATA[<p>ubuntu 10.04发布后在界面和操作中有着不少细节处的变化，如文件管理器中不在有地址栏，要进入到某一个文件夹只能通过点击的方式进入，如果文件目录较深，有的时候还不如直接输入地址来的快，但地址栏已经被去掉了，我们如何把它找回来，也就是把文件管理器中地址栏从按钮还原成文字模式，其实方法很简单，使用Ctrl+L组合键就可以了。</p>
<p><img src="//img.gagahappy.cn/blog/2010/08/ubuntu_local.png" alt="ubuntu_local" title="ubuntu_local"></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 自动加载ntfs分区</title>
    <url>/ubuntu-auto-mount-ntfs/</url>
    <content><![CDATA[<p>自动挂载的目的在于可以方便的访问windows 下的分区，例如把C盘挂载到/mnt/windows/c下，这样直接录入路径就可以访问到C盘了，虽然ubuntu可以通过开机后手动点击加载分区，系统会为点击的分区自动分配一个十分难看的字符串去标识，本博对这一点就十分的讨厌，而且每次点击后分配的标识都不一样， 这样对于类似virtualbox这样的软件在读取光盘镜像这样的文件时，会因标识符的变化而无法加载。</p>
<p>如何加载：</p>
<ol>
<li>首先要建立挂载的目标文件夹，也就是你要把分区挂载到哪个文件夹下面。本博全部分别挂载到/mnt/windows/c、d、e、f下面。如果你也要挂载到/mnt下面，请自行新建文件夹</li>
<li>记录分区UUID值。每个分区都有UUID值。使用ls -l /dev/disk/by-uuid进行查看，会得到类似<code>3458F2ABXXXXXX4E -&gt; ../../sda1</code> 这样的值，很明显，sda1对应的就是C盘，其UUID值是3458F2ABXXXXXX4E。</li>
<li>编辑/etc/fstab文件，在最后一行加入<code>UUID=3458F2ABXXXXXX4E /mnt/windows/c  ntfs-3g  uid=1000,gid=0,umask=133,dmask=022,utf8 0 0</code>。这样在开机的时候，系统会自动把C分区挂载到 /mnt/windows/c目录下。</li>
<li>重新启动电脑，在地址栏里直接录入 /mnt/windows/c就应该可以看到C盘的内容了。</li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu configure: error: Berkeley DB not found</title>
    <url>/ubuntu-berkeley-db-not-found/</url>
    <content><![CDATA[<p>为了让svn 支持Berkeley DB，在编译安装时必须在安装apr-util时加入 –with-berkeley-db，将 Berkeley DB编译进去，在configure时出现<code>configure: error: Berkeley DB not found</code>错误，原因是系统没有找到libdb-yourversion.so文件，如果你已经安装了Berkeley DB ，在安装目录的lib库里找到此文件，链接到/usr/lib下即可。</p>
<p>以本人的机子为例</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/lib
<span class="token function">ln</span> -s /opt/bdb/lib/libdb-4.7.so
ldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>在重新配置一下就好了。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 字幕乱码</title>
    <url>/ubuntu-totem-movie-player-subtitles/</url>
    <content><![CDATA[<p>ubuntu 使用Totem Movie Player播放时，字幕乱码，解决方法如下</p>
<p>方法一<br>点击 edit -&gt; preferences ：subtitles下的 font选项，选择Chinese Simplified 。重新载入字幕即可。</p>
<p>Totem Movie Player默认播放时是不自动加载字幕的，可以在 “automatically load subtitle file when movies loaded”前面打勾，这样就可以在播放影片时自动加载字幕了。</p>
<p><img src="//img.gagahappy.cn/blog/2010/08/12.png" title="ubuntu 字幕乱码"></p>
<p>方法二<br>由于字幕的编码多是gbk，所以在ubuntu下把文件编码转换为utf8，字幕就可以正常显示了。</p>
<p><code>iconv -f gbk -t utf8 [暮光之城].Twilight.DVDRip.XviD-DiAMOND-cd1.srt &gt;[暮光之城].Twilight.DVDRip.XviD-DiAMOND-cd1-utf8.srt</code></p>
<blockquote>
<p>PS：通过以上方法虽然能够解决字幕乱码问题，但是，如果你拉动进度条，字幕将消失，目前这个问题还没有解决。</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>wordpress随机显示日志插件</title>
    <url>/wordpress-advanced-random-posts/</url>
    <content><![CDATA[<p>为本博的#wordpress#侧边栏及日志添加了随机显示日志插件，感觉本博更丰满了呢！</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>accept函数非阻塞返回</title>
    <url>/accept-function-non-black/</url>
    <content><![CDATA[<p>当socket(2)完成创建TCP链接(3次握手成功)<br>再调用accept，则Tn=O(1)<br>在epoll上注册 socket(2),一旦事件完成，就可以调用accept，此时appept为非阻塞</p>
<p>PS: accept() extracts the first connection request on the queue of pending connections on the queue of pending connections:这个queue的长度应该是listen时指定的长度。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>c-lang</tag>
      </tags>
  </entry>
  <entry>
    <title>connection 数据读取</title>
    <url>/connect-get-data/</url>
    <content><![CDATA[<p>调用accep()后，用read读取connection（有10个字节）上的数据，但只读取了5字节，再次调用select()后，依然会触发这个connection上的read事件，直到connection上的数据被全部读取。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>c-lang</tag>
      </tags>
  </entry>
  <entry>
    <title>创建注册信号处理器</title>
    <url>/create-and-regist-sigactioner/</url>
    <content><![CDATA[<p>创建注册信号处理器</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span>
<span class="token keyword">int</span> <span class="token function">catch_signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>handler<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> action<span class="token punctuation">;</span>
  action<span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>
  <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>action<span class="token punctuation">.</span>sa_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
  action<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">sigaction</span> <span class="token punctuation">(</span>sig<span class="token punctuation">,</span> <span class="token operator">&amp;</span>action<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>c-lang</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是同步IO、异步IO</title>
    <url>/define-of-synchronous-and-asynchronous-io/</url>
    <content><![CDATA[<p>什么是同步IO、异步IO:</p>
<blockquote>
<p>Stevens给出的定义（其实是POSIX的定义）是这样子的：</p>
</blockquote>
<blockquote>
<p>A synchronous I/O operation causes the requesting process to be blocked until that I/O operation completes;</p>
</blockquote>
<blockquote>
<p>An asynchronous I/O operation does not cause the requesting process to be blocked;</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>libevent 简介</title>
    <url>/libevent-no1/</url>
    <content><![CDATA[<p>libevent有下面一些特点和优势：</p>
<ul>
<li>事件驱动，高性能；</li>
<li>轻量级，专注于网络；</li>
<li>跨平台，支持 Windows、Linux、Mac Os等；</li>
<li>支持多种 I/O多路复用技术， epoll、poll、dev/poll、select 和kqueue 等；</li>
<li>支持 I/O，定时器和信号等事件；</li>
</ul>
<p>libevent有下面几大部分组成：</p>
<ul>
<li>事件管理包括各种IO（socket）、定时器、信号等事件，也是libevent应用最广的模块；</li>
<li>缓存管理是指evbuffer功能；</li>
<li>DNS是libevent提供的一个异步DNS查询功能；</li>
<li>HTTP是libevent的一个轻量级http实现，包括服务器和客户端</li>
</ul>
<span id="more"></span>

<p>一些资料</p>
<ul>
<li>libevent官网：<a href="http://libevent.org/">http://libevent.org/</a></li>
<li>libevent API：<a href="http://www.monkey.org/~provos/libevent/doxygen-2.0.1/index.html">http://www.monkey.org/~provos/libevent/doxygen-2.0.1/index.html</a></li>
<li>CSDN上剖析得很赞的文章：<a href="http://blog.csdn.net/sparkliang/article/details/4957667">http://blog.csdn.net/sparkliang/article/details/4957667</a></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>listen设置</title>
    <url>/listen-function-guess/</url>
    <content><![CDATA[<p>listen设置<br>listen(int socket, int backlog);</p>
<p>backlog为pending的connection的长度，个人猜测这个长度是否是指定已经成功创建链接的栈的长度</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>c-lang</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac Time Machine 加密备份</title>
    <url>/mac-time-machine-with-filevault/</url>
    <content><![CDATA[<p>如果“加密”复选框可用，则您可以将其选中以保护备份磁盘。</p>
<p>如果“加密”复选框呈灰色，则您的备份磁盘不支持加密。</p>
<p>仅 Time Capsule 以及与电脑直接连接并使用 GPT 分区方案进行分区的分区或磁盘可以加密。如果您的磁盘不可以加密，请将鼠标指针放在呈灰色显示的复选框上，稍后会出现一个说明。如果磁盘需要重新重新格式化或重新分区以支持加密，则 Time Machine 会提示您执行此类操作。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>用man查看特定版本的函数accept(2)</title>
    <url>/man-accept-with-version-number/</url>
    <content><![CDATA[<p>如果直接用man accept查看，会看到cupsaccept(8)文档，而不是accept的。</p>
<p>如果稍加留意，就会发现在查看某个函数时会有一个数字在函数名后面。如accept(2)，所以man 2 accept，就可以看到accept的文档了。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>OS X yosemite 最大化窗口</title>
    <url>/os-x-yosemite-windows-max-size/</url>
    <content><![CDATA[<p>OS X Yosemite中，大部分程序的“最大化”按钮默认变为了全屏显示，而不是之前的最大化窗口。<br>这种设计有时候也不是很方便，若要使用最大化窗口，可用如下方法：</p>
<p>1、像Windows那样，双击程序标题栏<br>2、按住option键，再点最大化按钮+</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS 支持的网络协议</title>
    <url>/protocols-of-mac-os/</url>
    <content><![CDATA[<p>Mac OS 支持的网络协议定义在<br>/etc/protocols</p>
<p>See also <a href="http://www.isi.edu/in-notes/iana/assignments/protocol-numbers">http://www.isi.edu/in-notes/iana/assignments/protocol-numbers</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>Reactor 参考资料</title>
    <url>/reactor-reference/</url>
    <content><![CDATA[<p>Reactor 参考资料</p>
<blockquote>
<p><a href="http://gee.cs.oswego.edu/dl/cpjslides/nio.pdf">Scalable IO in Java</a></p>
</blockquote>
<blockquote>
<p><a href="http://vdisk.weibo.com/s/C9LV9iVqH13rW/1391437855">Netty5.0架构剖析和源码解读</a></p>
</blockquote>
<blockquote>
<p><a href="http://en.wikipedia.org/wiki/Reactor_pattern">Reactor pattern</a></p>
</blockquote>
<blockquote>
<p><a href="http://www.cs.wustl.edu/~schmidt/PDF/reactor-siemens.pdf">Reactor – An Object Behavioral Pattern for Demultiplexing and Dispatching Handles for Synchronous Events</a></p>
</blockquote>
<blockquote>
<p><a href="http://blog.csdn.net/russell_tao/article/details/17452997">高性能网络编程6–reactor反应堆与定时器管理</a></p>
</blockquote>
<blockquote>
<p><a href="http://blog.csdn.net/historyasamirror/article/details/5778378">IO – 同步，异步，阻塞，非阻塞 （亡羊补牢篇）</a></p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>重定向文件内容到标准错误</title>
    <url>/redirect-file-to-strerr/</url>
    <content><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">redirect_file_to_strerr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token function">redirect_file_to_strerr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">redirect_file_to_strerr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  FILE <span class="token operator">*</span>f<span class="token punctuation">;</span>
  f <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"redirect_file_to_strerr.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">dup2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">fileno</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>假设 f的文件描述符为10;<br>dup2(2, fileno(f))将把流向f的数据重定向到strerr，所以写入f的内容不会被保存在文件中，而是显示在了屏幕上(sterr默认流向屏幕),redirect_out_to_file.txt文件内容为空。</p>
<p>1 =&gt; screen<br>2 =&gt; screen<br><del>10 =&gt; redirect_file_to_strerr.txt”</del><br>10 =&gt; 2</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>c-lang</tag>
      </tags>
  </entry>
  <entry>
    <title>select()阻塞</title>
    <url>/select-block-when-no-event-occur/</url>
    <content><![CDATA[<p>调用select()后，select会一直阻塞，直到有事件发生（on ready）状态。如果没有事件on ready，则一直阻塞。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>URL MUST BE Encoding</title>
    <url>/url-must-be-encoding/</url>
    <content><![CDATA[<p>URL Encoding</p>
<p>URLs can only be sent over the Internet using the <a href="http://www.w3schools.com/charsets/ref_html_ascii.asp"> ASCII character-set</a>.</p>
<p>Since URLs often contain characters outside the ASCII set, the URL has to be converted into a valid ASCII format.</p>
<p>URL encoding replaces unsafe ASCII characters with a “%” followed by two hexadecimal digits.</p>
<p>URLs cannot contain spaces. URL encoding normally replaces a space with a plus (+) sign or with %20.</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>c-lang</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode 6 安装 command line tools</title>
    <url>/xcode-6-install-command-line-tools/</url>
    <content><![CDATA[<p>Xcode 6 安装 command line tools</p>
<p>在shell执行<code>xcode-select --install</code></p>
<p>文件会被安装在/Library/Developer/CommandLineTools路径下</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>last 查看用户登录</title>
    <url>/last-show-user-login/</url>
    <content><![CDATA[<p>last 查看用户登录</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>格式化磁盘最小分配单元</title>
    <url>/min-byte-of-format-disk/</url>
    <content><![CDATA[<p>格式化磁盘最小分配单元，最小单元为512字节。</p>
<p>为什么不能比512字节还要小，如256字节。因为一个扇区为512字节，最小单元比512字节还要小的话，一个扇区就可能存储两个文件的数据：</p>
<p>如file1:256字节,file2:256字节。全都存到一个扇区的话，在读取file1时，也会把file2的数据取出。</p>
<p>一般最小单元系统默认为4KB，如果存的文件都小于4KB的话，会浪费很多的扇区，即存储空间。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>纳秒与毫秒换算</title>
    <url>/ns-to-ms/</url>
    <content><![CDATA[<p>纳秒与毫秒换算，一直以为是1ms=1000ns，其实是不对的，应该是: 1ms = 1000000ns</p>
<p>CPU的一个时钟周期是纳秒级的，所以比磁盘读写毫秒级，要快上千万倍。CPU是不可能停在那里等待磁盘IO完成后，再做其它事情的，在等待的时间里，CPU可以执行千万次的指令了。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>wptouch访问速度非常的慢</title>
    <url>/wptouch-access-slowly-by-google-font/</url>
    <content><![CDATA[<p>wptouch访问速度非常的慢，这是因为默认是用的google font，改为使用浏览器字体，即可解决问题。</p>
<blockquote>
<p>设置：wptouch—主题设置—品牌—排印（选择浏览器字体）</p>
</blockquote>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>有道词典 firefox  不能取词</title>
    <url>/yodao-dict-cannt-capture-for-firefox/</url>
    <content><![CDATA[<p>有道词典firefox不能取词，看了网上有很多方法，如：停止硬件加速。之类的根本不管用。</p>
<p>根本的解决办法是：重新安装有道词典，再重新安装其浏览器插件。重启浏览器，即可正常使用</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>firefox</tag>
      </tags>
  </entry>
  <entry>
    <title>Cardinality的统计</title>
    <url>/cardinality-count/</url>
    <content><![CDATA[<p>数据库都是通过采样(sample)的方法，来完成Cardinality的统计。<br>对Cardinality的统计是在存储引擎层面进行的，所以不同的引擎用各自的方法实现。</p>
<p>innodb在进行insert/update操作时，进行Cardinality的统计，但不是每次都进行统计，因为会增加数据库负担。对于数据非常大的表，更不可能进行实时统计，因为那样会影响执行时间，带来非常长的执行时间。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>CHAR的行存储</title>
    <url>/char-record-format/</url>
    <content><![CDATA[<p>CHAR的行存储：char(N)，N指的是字符的长度，而不是字节的长度。Char(10)具体是多少字节，要根据字符集决定。如果是latin1，则占用10字节。如果是utf8，占用30字节。如果是gb2312，占用20字节。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Compressed和Dynamic行记录格式</title>
    <url>/compressed-and-dynamic-record-format/</url>
    <content><![CDATA[<p>Compressed和Dynamic行记录格式</p>
<p>主要区别是在存储BLOB和TEXT时采用完全溢出的方式，行记录中只存20个字节的指针，数据存放在off page页中。同时，Compressed格式可以对BLOB、TEXT这样的大对象进行zip算法的压缩存储</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Dropbox 国内同步设置</title>
    <url>/dropbox-proxy-set/</url>
    <content><![CDATA[<p>大家都知道。为什么国内dropbox不能同步。其实突破这个也很简单。前提是你有s-s-h就可以。通过v-p-n上网的请绕行。</p>
<p>直接上图，大家就明白了。Dropbox 国内同步设置。至于怎么设置s-s-h，请自行搜索。</p>
<p><img src="//img.gagahappy.cn/blog/2015/02/drop-proxy-300x241.png" alt="drop-proxy"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>dropbox</tag>
      </tags>
  </entry>
  <entry>
    <title>全文索引排序相关性</title>
    <url>/full-text-order-by-relative/</url>
    <content><![CDATA[<p>相关性的计算依据有四点：</p>
<ul>
<li>word是否同现在文档中</li>
<li>word在文档中出现的次数</li>
<li>word在索引列中的数量</li>
<li>多个少文档包含此word</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>全文索引表auxiliary table</title>
    <url>/fulltext-auxiliary-table/</url>
    <content><![CDATA[<p>全文索引要借助辅助表auxiliary table，它是持久性的（文件形式），其使用倒排索引inverted index来存储单词及单词所在文档的位置信息</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Index Condition Pushdown（ICP）优化</title>
    <url>/index-condition-pushdown/</url>
    <content><![CDATA[<p>Index Condition Pushdown（ICP）优化,当不支持ICP时，先根据索引查记录取出记录，在根据where条件进行过滤。采用ICP时，会在索引中对where条件进行过滤，选出符合条件的，然后再取出记录。即把数据过滤在存储引擎层面完成</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Multi-Range-Read优化的好处</title>
    <url>/multi-range-read-optimize/</url>
    <content><![CDATA[<p>Multi-Range-Read优化的好处,简称MRR，目的是减少磁盘的随机访问，把随机访问转化为比较顺序的访问，对于IO-bound类型的SQL有很大的性能提升。Multi-Range-Read优化适用于range/ref/eq_ref类型的查询。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制日志文件</title>
    <url>/mysql-bin-log/</url>
    <content><![CDATA[<p>二进制日志文件</p>
<blockquote>
<p>记录了对数据库的更改操作，但不包括select和show这类操作，因为它们对数据本身没有进行修改。</p>
</blockquote>
<blockquote>
<p>日志格式ROW：采用ROW格式会大大增加日志文件的体积，在主从复制时，复制是采用二进制格式传输的，因此会增加对带宽的占用。</p>
</blockquote>
<blockquote>
<p>其体积增大的原因是其记录了每一行的所有信息（所有列信息），所以日志体积会增长很大，而STATEMENT格式只记录基本的SQL语句信息，所以日志文件体积增长较小。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql BLOB TEXT数据类型存储</title>
    <url>/mysql-blob-text-page-type/</url>
    <content><![CDATA[<p>对于BLOG与TEXT类型的字段，数据也不一定会放在BLOB页中。<br>如<code>create table t4(v1 blog) charset=latin1</code>插入4条数据<code>insert into t4 select repeat(&#39;a&#39;,8000);</code>其数据依然存放在数据页中。</p>
<blockquote>
<p>page offset 00000003, page type [B-tree Node], page level [0001]<br>page offset 00000004, page type [B-tree Node], page level [0000]<br>page offset 00000005, page type [B-tree Node], page level [0000]<br>page offset 00000006, page type [B-tree Node], page level [0000]<br>page offset 00000000, page type [Freshly Allocated Page]</p>
</blockquote>
<span id="more"></span>

<p>如果插入的数据为<code>insert into t4 select repeat(&#39;a&#39;,20000);</code>数据会被放入BLOB页中</p>
<blockquote>
<p>page offset 00000003, page type [B-tree Node], page level [0000]<br>page offset 00000004, page type [Uncompressed BLOB Page]<br>page offset 00000005, page type [Uncompressed BLOB Page]<br>page offset 00000006, page type [Uncompressed BLOB Page]<br>page offset 00000007, page type [Uncompressed BLOB Page]<br>page offset 00000008, page type [Uncompressed BLOB Page]<br>page offset 00000009, page type [Uncompressed BLOB Page]<br>page offset 0000000a, page type [Uncompressed BLOB Page]<br>page offset 0000000b, page type [Uncompressed BLOB Page]</p>
</blockquote>
<p><strong>因些，大多数情况下BLOB数据还是会发生溢出，实际数据保存在BLOB页中，数据页中只保存数据的前768字节。这里之所以产生了8个BLOB页，是否是一页里要放入2条记录，而20000.0/16384＝1.2，即一条记录要两页才能放下，也满足了一页里最好放两条记录的要求，所以4条记录是2*4=8页。</strong></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 创建触发器</title>
    <url>/mysql-create-trigger/</url>
    <content><![CDATA[<p>mysql 创建触发器，好久没看望触发器了</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">delimiter $$
create trigger tgr_userinfo_update before update on userinfo
for each row
begin
if new.income &lt; old.income then
insert into userinfo_err
select old.userid,old.income,new.income,user(),now();
set new.income &#x3D; old.income;
end if;
end;
$$
delimiter ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 强制指定索引</title>
    <url>/mysql-force-index/</url>
    <content><![CDATA[<p>mysql 强制指定索引</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from t_a_index force index(a_b) where a &#x3D; 1 and b &#x3D; 1  order by a desc;
select * from t_a_index ignore index(a_b) where a &#x3D; 1 and b &#x3D; 1  order by a desc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>索引提示</title>
    <url>/mysql-index-hint/</url>
    <content><![CDATA[<p>索引提示<br>（1）优化器错误的选择了索引（这种情况很少发生）<br>（2）查询有多个索引可以使用，使得优化器选择索引的时间大大超过了SQL语句的执行时间</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>参数innodb_ft_cache_size</title>
    <url>/mysql-innodb-ft-cache-size/</url>
    <content><![CDATA[<p>参数innodb_ft_cache_size用来控制FTS index Cache的大小，默认为32M，当缓存满时，会将其中的(word,ilist)分词信息同步到磁盘的Auxiliary table中。增大此参数可以提高全文索引的性能，但在宕机时可能需要更长的时间进行恢复。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 日志文件</title>
    <url>/mysql-log-file/</url>
    <content><![CDATA[<p>这些日志都是针对整个MySql数据库的（所有数据库，所有数据表），可以理解为全局日志。有以下日志类型</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>查询日志</title>
    <url>/mysql-query-log/</url>
    <content><![CDATA[<p>查询日志,记录对mysql数据库的请求，无论这些请求是否成功。这些请求包括执行的SQL、连接登录mysql等所有信息。可以从里面看到connect被拒绝的请求。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>慢查询日志</title>
    <url>/mysql-slow-query-log/</url>
    <content><![CDATA[<p>慢查询日志:long_query_time：默认值为10s，即超过10s的sql会被记录，但不过记录等于10s的记录。可以以微秒设置时间</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 子分区</title>
    <url>/mysql-subpartition/</url>
    <content><![CDATA[<p>mysql 子分区<br>在range/list分区的基础上，还可以创建key/hash子分区。子分区的文件直接保存在表名目录下，而不是嵌套在父目录下。</p>
<p>如果为一个分区指定了子分区的名称，那么所有分区都要指定子分区的名称，且子分区的名称必须唯一，不能与其它分区的名称相同，每个子分区的数据必须相同。</p>
<p>子分区一般应用在特别大的表上，在多个磁盘上分别分配数据文件与索引文件。这种方式不适用于innodb引擎，因为innodb的数据与索引保存在一个文件里。使用data directory =’’，index directory =’’分别设置数据与索引文件，可以使用myisam引擎实现此种需求的表。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql the server quit without updating PID</title>
    <url>/mysql-the-server-quit-without-updating-pid/</url>
    <content><![CDATA[<p>mysql The server quit without updating PID，这个错误出现已经不止一次了。造成这个错误的原因有很多。这前也处理过好几次，但都是通过网上google的。</p>
<p>这次也google了，不过问题没有解决，突然想到了mysql的错误日志，打开日志查找有[error]的字段，发现是在my.cnf配置里有一处配置写错了，修正之后，再启动mysql，一切正常了。</p>
<p>总结：mysql会把相关启动，运行，关闭的信息记录到错误日志，所以当mysql发生异常时应该先查看错误日志，而不是上网google.</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>行溢出数据</title>
    <url>/row-data-overflow/</url>
    <content><![CDATA[<p>行溢出数据,innodb引擎最大只支持65532字节的行，而不是65536节字，但此时一行的字节数据已经超过行所在页的字节数据（每页16KB，16384字节）</p>
<p><code>create table t2(t1 varchar(65535)) charset=latin1;</code> 会引发错误，因为还有别的开销</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>select count 使用的索引</title>
    <url>/select-count-second-index/</url>
    <content><![CDATA[<p>在查询select count(*)时，优化器不会使用聚集索引，而是使用辅助索引，因为体积要比聚集索引小，需要的IO操作更少。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>慎用With query expansion</title>
    <url>/use-with-query-expansion-be-careful/</url>
    <content><![CDATA[<p>With query expansion, 支持扩展查询（相关性查询）。如查询database，同时也会把含有mysql但不含database的记录也找到。但此功能可能会带来诸多非相关性的查询，要谨慎使用。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>innodb启动日志</title>
    <url>/a-part-of-innodb-star-log/</url>
    <content><![CDATA[<p>innodb启动日志</p>
<pre class="line-numbers language-none"><code class="language-none">23:24:30 28434 [Note] Plugin &#39;FEDERATED&#39; is disabled.
23:24:30 28434 [Note] InnoDB: The InnoDB memory heap is disabled
23:24:30 28434 [Note] InnoDB: Mutexes and rw_locks use GCC atomic builtins
23:24:30 28434 [Note] InnoDB: Compressed tables use zlib 1.2.3
23:24:30 28434 [Note] InnoDB: Using CPU crc32 instructions
23:24:30 28434 [Note] InnoDB: Initializing buffer pool, size &#x3D; 128.0M
23:24:30 28434 [Note] InnoDB: Completed initialization of buffer pool
23:24:30 28434 [Note] InnoDB: Highest supported file format is Barracuda.
23:24:30 28434 [Note] InnoDB: 128 rollback segment(s) are active.
23:24:30 28434 [Note] InnoDB: Waiting for purge to start
23:24:30 28434 [Note] InnoDB: 5.6.13 started; log sequence number 1287659157
23:24:30 28434 [Note] Server hostname (bind-address): &#39;127.0.0.1&#39;; port: 3306
23:24:30 28434 [Note]   - &#39;127.0.0.1&#39; resolves to &#39;127.0.0.1&#39;;
23:24:30 28434 [Note] Server socket created on IP: &#39;127.0.0.1&#39;.
23:24:30 28434 [Note] Event Scheduler: Loaded 0 events

-- 可以获取不少有用的信息，如file format is Barracuda.说明了支持的行格式的兼容情况。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>日志文件中的操作记录应该具有幂等性</title>
    <url>/attribute-of-log-idempotence/</url>
    <content><![CDATA[<p>在日志文件中的操作记录应该具有幂等性。幂等性，就是说同一个操作执行多次和执行一次，结果是一样的。例如，5<em>1 = 5</em>1<em>1</em>1，所以对5的乘1操作具有幂等性。日志文件在故障恢复中，可能会回放多次（比如第一次回放到一半时系统断电了，不得不再重新回放），如果操作记录不满足幂等性，会造成数据错误。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>测试在kernel中定义的方法的作用对象</title>
    <url>/define-method-in-kernel-module/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># =============================</span>
<span class="token comment"># 目标1:</span>
<span class="token comment"># 1、Kernel模块内定义实例方法，哪些对象可以使用</span>
<span class="token comment"># 2、Kernel的单件方法哪些对象可以使用</span>
<span class="token comment"># =============================</span>
<span class="token comment"># 结论</span>
<span class="token comment"># 1、Kernel模块内定义实例方法,ruby的所有对象都可以使用，因为Kernel会被Mixin入Object,其实例方法(用def定义的),可以</span>
<span class="token comment">#    被所有ruby对象使用(MyClass/"string")</span>
<span class="token comment"># 2、Kernel的单件方法只能被其自己使用,其它类和方法都不能使用(MyClass/MyClass.new)</span>
<span class="token comment"># =============================</span>
lambda <span class="token punctuation">&#123;</span>
  <span class="token keyword">module</span> <span class="token constant">Kernel</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">im_singleton_method</span></span>
      <span class="token string">"i'm a singleton method of Kernel define in Kernel"</span>
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">im_instance_method</span></span><span class="token punctuation">(</span>from<span class="token operator">=</span><span class="token string">"Kernel"</span><span class="token punctuation">)</span>
      <span class="token string">"i'm a instance method define in Kernel and call from <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>from<span class="token delimiter tag">&#125;</span></span>"</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">;</span> <span class="token keyword">end</span>
  puts <span class="token constant">Kernel</span><span class="token punctuation">.</span>im_singleton_method
  puts <span class="token string">"Kernel.singleton_methods:"</span> <span class="token operator">+</span> <span class="token constant">Kernel</span><span class="token punctuation">.</span>singleton_methods<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grep<span class="token punctuation">(</span><span class="token regex">/im_singleton_method/</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_s
  puts <span class="token string">"Kernel.im_instance_method:"</span> <span class="token operator">+</span> <span class="token constant">Kernel</span><span class="token punctuation">.</span>instance_methods<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grep<span class="token punctuation">(</span><span class="token regex">/im_instance_method/</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_s
  puts <span class="token constant">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>im_instance_method<span class="token punctuation">(</span><span class="token string">"obj"</span><span class="token punctuation">)</span>
  puts <span class="token constant">MyClass</span><span class="token punctuation">.</span>im_instance_method<span class="token punctuation">(</span><span class="token string">"MyClass"</span><span class="token punctuation">)</span>
  puts <span class="token keyword">begin</span> <span class="token constant">MyClass</span><span class="token punctuation">.</span>im_singleton_method <span class="token keyword">rescue</span> <span class="token string">"undefined method `im_singleton_method' for MyClass:Class"</span> <span class="token keyword">end</span>
  puts <span class="token keyword">begin</span> <span class="token constant">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>im_singleton_method <span class="token keyword">rescue</span> <span class="token string">"undefined method `im_singleton_method' for #&lt;MyClass:0x007fbb22813640>"</span> <span class="token keyword">end</span>

  <span class="token comment"># ================test1 OUTPUT================</span>
  <span class="token comment"># i'm a singleton method of Kernel define in Kernel</span>
  <span class="token comment"># Kernel.singleton_methods:[:im_singleton_method]</span>
  <span class="token comment"># Kernel.im_instance_method:[:im_instance_method]</span>
  <span class="token comment"># i'm a instance method define in Kernel and call from obj</span>
  <span class="token comment"># i'm a instance method define in Kernel and call from MyClass</span>
  <span class="token comment"># undefined method `im_singleton_method' for MyClass:Class</span>
  <span class="token comment"># undefined method `im_singleton_method' for #&lt;MyClass:0x007fbb22813640></span>
  <span class="token comment"># ================test1 OUTPUT================</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>call
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>explain using where 含意</title>
    <url>/explain-using-where-should-be/</url>
    <content><![CDATA[<p>using where：这说明服务器在存储引擎收到行后将进行过滤,效率不是最高的。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>使用include,让模块中定义的方法分别插入类方法与实例方法</title>
    <url>/extend-class-method-by-module/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">
<span class="token comment"># =============================</span>
<span class="token comment"># 目标1:</span>
<span class="token comment"># 1、类扩展:使用include,让模块中定义的方法分别插入类方法与实例方法中</span>
<span class="token comment"># 2、obj实例对象调用extend,则模块中定义的方法为？</span>
<span class="token comment"># 3、在模块中定义的实例变量能否被包含它的类的实例对象看到</span>
<span class="token comment"># =============================</span>
<span class="token comment"># 结论</span>
<span class="token comment"># 1、通过重定义横块中的self.included方法，并对参数(receiver),使用关键字extend/include,分别向包含它的类中插入了</span>
<span class="token comment">#    类方法(定义在ClassMethods模块中的方法)和实例方法(定义在InstanceMethod模块中)</span>
<span class="token comment"># 2、obj实例对象调用extend,则模块中定义的方法为这个obj的单例方法，可以通过把方法定义在module中，让实例对象调用extend</span>
<span class="token comment">#    来方便快速的增加自身的单例方法</span>
<span class="token comment"># 3、可以。在模块中定义的实例变量可以被包含它的类的实例对象看到,因为被include的模块相当于当前类的父类，当前对象的</span>
<span class="token comment">#    实例变量对其所有实例方法可见</span>
<span class="token comment"># 4、extend方法的实质就是把module中定义的方法插入到对象的单件类中</span>
<span class="token comment"># 5、调用MyClass.instance_methods(false)可以发现，在它的实例方法中并不包含实例方法instance_method，而MyClass</span>
<span class="token comment">#    的实例对象可以调用这个方法，这正说明了类中include的模块(被代理类封装)充当这个类的父类。也验证了结论4</span>
<span class="token comment"># =============================</span>
lambda <span class="token punctuation">&#123;</span>
  <span class="token keyword">module</span> <span class="token constant">M</span>
    <span class="token keyword">module</span> <span class="token constant">ClassMethods</span>
      <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">class_method</span></span>
        <span class="token string">"i am a class method"</span>
      <span class="token keyword">end</span>
    <span class="token keyword">end</span>

    <span class="token keyword">module</span> <span class="token constant">InstanceMethods</span>
      <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">instance_method</span></span><span class="token punctuation">(</span>from<span class="token punctuation">)</span>
        <span class="token variable">@instance_variate</span> <span class="token operator">=</span> <span class="token string">"i am a instance variate in M"</span>
        <span class="token string">"i am a instance method from:<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>from<span class="token delimiter tag">&#125;</span></span>"</span>
      <span class="token keyword">end</span>
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">included</span></span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span>
      receiver<span class="token punctuation">.</span><span class="token keyword">extend</span>         <span class="token constant">ClassMethods</span>
      receiver<span class="token punctuation">.</span>send <span class="token symbol">:include</span><span class="token punctuation">,</span> <span class="token constant">InstanceMethods</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token comment">#&lt;!-- more --></span>
  <span class="token keyword">class</span> <span class="token class-name">MyClass</span>
    <span class="token keyword">include</span> <span class="token constant">M</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_instance_variate_from_module</span></span><span class="token punctuation">(</span>from<span class="token punctuation">)</span>
      <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#&#123;</span><span class="token variable">@instance_variate</span><span class="token delimiter tag">&#125;</span></span> from: <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>from<span class="token delimiter tag">&#125;</span></span>"</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  obj <span class="token operator">=</span> <span class="token builtin">Object</span><span class="token punctuation">.</span><span class="token keyword">new</span>
  obj<span class="token punctuation">.</span><span class="token keyword">extend</span> <span class="token constant">M</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">InstanceMethods</span>
  my <span class="token operator">=</span> <span class="token constant">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>

  puts <span class="token string">"================test1 OUTPUT================"</span>
  puts <span class="token constant">MyClass</span><span class="token punctuation">.</span>class_method
  puts my<span class="token punctuation">.</span>instance_method<span class="token punctuation">(</span><span class="token string">"MyClass.new obj"</span><span class="token punctuation">)</span>
  puts my<span class="token punctuation">.</span>get_instance_variate_from_module<span class="token punctuation">(</span><span class="token string">"MyClass.new"</span><span class="token punctuation">)</span>
  puts obj<span class="token punctuation">.</span>instance_method<span class="token punctuation">(</span><span class="token string">"Object.new"</span><span class="token punctuation">)</span>
  puts obj<span class="token punctuation">.</span>instance_eval<span class="token punctuation">(</span><span class="token string">"@instance_variate"</span><span class="token punctuation">)</span>
  puts <span class="token string">"MyClass.instance_methods:"</span><span class="token operator">+</span><span class="token constant">MyClass</span><span class="token punctuation">.</span>instance_methods<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_s
  puts <span class="token string">"================test1 OUTPUT================"</span>

  <span class="token comment"># ================test1 OUTPUT================</span>
  <span class="token comment"># i am a class method</span>
  <span class="token comment"># i am a instance method from:MyClass.new obj</span>
  <span class="token comment"># i am a instance variate in M from: MyClass.new</span>
  <span class="token comment"># i am a instance method from:Object.new</span>
  <span class="token comment"># i am a instance variate in M</span>
  <span class="token comment"># MyClass.instance_methods:[:get_instance_variate_from_module]</span>
  <span class="token comment"># ================test1 OUTPUT================</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>call<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 当前读与快照读如何产生</title>
    <url>/how-to-create-current-real-and-snapshot/</url>
    <content><![CDATA[<p>mysql当前读与快照读如何产生?</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> ? <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> ? <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>…<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">update</span> <span class="token keyword">table</span> <span class="token keyword">set</span> ? <span class="token keyword">where</span> ?<span class="token punctuation">;</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> ?<span class="token punctuation">;</span>

<span class="token comment">-- 所有以上的语句，都属于当前读，读取记录的最新版本。并且，读取之后，还需要保证其他并发事务不能修改当前记录，对读取记录加锁。其中，除了第一条语句，对读取记录加S锁 (共享锁)外，其他的操作，都加的是X锁 (排它锁)。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Innodb B+树查询数据过程</title>
    <url>/innodb-btree-find-by-binary-search/</url>
    <content><![CDATA[<p>1.Start at the root page of the index.<br>2.Binary search using the page directory (repeatedly splitting the directory in half based on whether the current record is greater than or less than the search key) until a record is found via the page directory with the highest key that does not exceed the search key.<br>3.Linear search from that record until finding an individual record with the highest key that does not exceed the search key. If the current page is a leaf page, return the record. If the current page is a non-leaf page, load the child page this record points to, and return to step 2.</p>
<p>查找过程如下:</p>
<span id="more"></span>
<blockquote>
<p>binary_search: root=3, level=2, key=(10000)<br>binary_search_by_directory: page=3, level=2, dir.size=1, dir[0]=()<br>linear_search_from_cursor: page=3, level=2, start=(i=252)<br>linear_search_from_cursor: page=3, level=2, current=(i=252)<br>binary_search_by_directory: page=36, level=1, dir.size=166, dir[82]=(i=258175)<br>binary_search_by_directory: page=36, level=1, dir.size=82, dir[40]=(i=122623)<br>binary_search_by_directory: page=36, level=1, dir.size=40, dir[19]=(i=52742)<br>binary_search_by_directory: page=36, level=1, dir.size=19, dir[9]=(i=20930)<br>binary_search_by_directory: page=36, level=1, dir.size=9, dir[4]=(i=8930)<br>binary_search_by_directory: page=36, level=1, dir.size=5, dir[2]=(i=12759)<br>binary_search_by_directory: page=36, level=1, dir.size=2, dir[0]=(i=8930)<br>linear_search_from_cursor: page=36, level=1, start=(i=8930)<br>linear_search_from_cursor: page=36, level=1, current=(i=8930)<br>linear_search_from_cursor: page=36, level=1, current=(i=9381)<br>linear_search_from_cursor: page=36, level=1, current=(i=9830)<br>binary_search_by_directory: page=424, level=0, dir.size=81, dir[40]=(i=10059)<br>binary_search_by_directory: page=424, level=0, dir.size=40, dir[19]=(i=9938)<br>binary_search_by_directory: page=424, level=0, dir.size=21, dir[10]=(i=9997)<br>binary_search_by_directory: page=424, level=0, dir.size=11, dir[5]=(i=10025)<br>binary_search_by_directory: page=424, level=0, dir.size=5, dir[2]=(i=10006)<br>binary_search_by_directory: page=424, level=0, dir.size=2, dir[0]=(i=9997)<br>linear_search_from_cursor: page=424, level=0, start=(i=9997)<br>linear_search_from_cursor: page=424, level=0, current=(i=9997)<br>linear_search_from_cursor: page=424, level=0, current=(i=9998)<br>linear_search_from_cursor: page=424, level=0, current=(i=9999)<br>linear_search_from_cursor: page=424, level=0, current=(i=10000)</p>
</blockquote>
<p>{:binary_search=&gt;1,<br> :binary_search_by_directory=&gt;14,<br> :linear_search_from_cursor=&gt;3,<br> :linear_search_from_cursor_record_scans=&gt;8,<br> :compare_key=&gt;40,<br> :compare_key_field_comparison=&gt;40,<br> :binary_search_by_directory_recurse_left=&gt;8,<br> :binary_search_by_directory_recurse_right=&gt;3,<br> :binary_search_by_directory_linear_search=&gt;2}</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>innodb 锁处理</title>
    <url>/innodb-lock-2/</url>
    <content><![CDATA[<p>innodb 锁处理<br>当两个事务对同一资源时行修改操作时，会对这一资源加上X锁。b的原始值为1140</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">T1: update t_lock set b &#x3D; 1143 where id &#x3D; 1;没有执行commit
T2: update t_lock set b &#x3D; 1145 where id &#x3D; 1;操作会因为执行超时而抛出异常：

Lock wait timeout exceeded; try restarting transaction

# 因为T2在等待T1执行commit，释放资源。因为T1一直没有commit，所以导致了T2的超时。这里可以看做是T1被T2阻塞了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>innodb 新增数据使用已删除数据空间</title>
    <url>/innodb-new-record-use-old-record-space/</url>
    <content><![CDATA[<p>如果被删除的数据的空间可以被新数据使用，则新数据占用这个空间，而不是从heap_top中申请空间（其实就是追加数据）。如果新数据不能使用已删除数据的空间，则追加数据（从heap_top中申请空间）。注意：这时数据的排序不再按PK key的顺序存放。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>innodb-page-header 结构</title>
    <url>/innodb-page-header-page-n-heap/</url>
    <content><![CDATA[<p>page-header 结构中<br>page-n-heap:表示页面中记录数，包括已经删除的记录，,page-n-heap的初始为x8002，那么<br>page-n-heap=x8031，那么页中的记录数为x8031-x8002=x2f，即47，页中有47条记录。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>innodb使用记录数据空间分配</title>
    <url>/innodb-page-heap-allocation/</url>
    <content><![CDATA[<p>innodb使用记录数据空间分配，根据文件结构，在插入新数据时，heap是由上而下分配空间的，即向记录尾部追加数据，而对slot分配，是由下向上分配的。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 非锁定一致性读</title>
    <url>/mysql-consistent-noblocking-read/</url>
    <content><![CDATA[<p>在READ COMMIT与REPEATABLE-READ隔离级别下，在读取时由于使用了非锁定一致性读，所以在读取数据时是不加读锁的（读取的是snapshot数据，所以不用加锁）。由于没有加锁，所以自然不用等待其它事务锁资源的释放。从而提高了并发性。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是填充因子</title>
    <url>/mysql-fillfactor/</url>
    <content><![CDATA[<p>看到网上的例子都是用50%的填充因子来举例的，这样举例具不太容易让人明白。下面是我对填充因子的理解</p>
<p>什么是填充因子</p>
<blockquote>
<p>设置数据要占用page空间的比例。比如设置70%，即数据至少要填充page空间的70%。</p>
</blockquote>
<blockquote>
<p>设置填充因子的主要作用是为新数据预留一定的空间，当有新数据时，可以插入到预留的空间里，从而避免分页的发生。</p>
</blockquote>
<span id="more"></span>

<p>当索引被新建立时，会根据填充因子的设置，对page页进行数据填充，使其达到设置的比例值。例如：设置70%的填充因子，mysql会在page中填充占用70%的page空间的记录，预留30%的空闲空间。</p>
<p>填充因子只在新建索引及page分裂时，预留空间，保持设置的比例。在之后的插入，修改，更新操作时，不再维持这个比例。因为如果维持这个比例，就会造成频繁的分页操作，这就违背了设置填充因子的初衷—-为以后新插入的数据预留空间，降低page分裂的操作。</p>
<p>mysql会在page分裂后，判断page中的数据，如果记录占用的比例小于设置的值（如70%），则会把这个page中的数据移动到其它的page</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql  mac 环境启动失败后会自动尝试多次启动</title>
    <url>/mysql-mac-auto-attempt-restart-when-start-fail/</url>
    <content><![CDATA[<p>mysql mac 环境下启动失败后会自动尝试多次启动，mysql是用brew安装的，启动命令用的是launchctl，不知道是不是和launchctl命令有关，还是说mysql本身启动就是这样的。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql redo日志先行</title>
    <url>/mysql-redo-writed-ahead-log/</url>
    <content><![CDATA[<blockquote>
<p><strong>redo日志应首先持久化在磁盘上，然后事务的操作结果才写入db buffer，（此时，内存中的数据和data file对应的数据不同，我们认为内存中的数据是脏数据），db buffer再选择合适的时机将数据持久化到data file中。这种顺序可以保证在需要故障恢复时恢复最后的修改操作。先持久化日志的策略叫做Write Ahead Log，即预写日志,也叫日志先行。</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql undo日志写入磁盘</title>
    <url>/mysql-undo-flush-to-disk/</url>
    <content><![CDATA[<p>mysql undo日志写入磁盘，以512B写入磁盘，这样就保证了写入的原子性，因为磁盘扇区的size为512B，所以写入要么成功，要么失败，不会发生只写入部分写入的情况，如只写入了100B，这种情况是绝对不会发生的。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>note of secondary index non-leaf pages</title>
    <url>/note-of-secondary-index-non-leaf-pages/</url>
    <content><![CDATA[<p>There is one thing of note for secondary index non-leaf pages: the clustered key fields (PKV) are included in the record and is considered part of the record’s key, not its value. Secondary indexes may be non-unique, but each record in the page must have a unique identifier, so the PKV must be included in the record to ensure uniqueness. This will mean that records in non-leaf pages of secondary keys will be 4 bytes larger than their leaf page counterparts</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>redo log record type and function</title>
    <url>/redo-log-record-type-and-function/</url>
    <content><![CDATA[<p>So each redo log record has a type. A redo log record type helps to identify the function that will be used to apply or execute the redo log during recovery. The contents of the redo log record must then contain all the arguments or parameters needed by the function</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>辅助索引为何不直接保存主键地址</title>
    <url>/second-key-not-save-primary-add/</url>
    <content><![CDATA[<p>辅助索引为何不直接保存主键地址，如果保存了主键的地址，就可以不很快的找到记录，而不用再进行二次查找。被这个问题困扰了一阵。答案来了</p>
<p>辅助索引使用主键作为”指针” 而不是使用地址值作为指针的好处是，减少了当出现行移动或者数据页分裂时辅助索引的维护工作，使用主键值当作指针会让辅助索引占用更多的空间，换来的好处是InnoDB在移动行时无须更新辅助索引中的这个”指针”。也就是说行的位置（实现中通过16K的Page来定位，后面会涉及）会随着数据库里数据的修改而发生变化（前面的B+树节点分裂以及Page的分裂），使用聚簇索引就可以保证不管这个主键B+树的节点如何变化，辅助索引树都不受影响。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime text 加载 rvm 指定的ruby版本</title>
    <url>/sublime-text-load-rvm-ruby-version/</url>
    <content><![CDATA[<p>在sublime中用cmd+b运行代码时，其运行环境往往和你正在使用的rvm指定的ruby版本不一样，安装RVM switch for sublime插件可以较好的解决这个问题。</p>
<p>在安装后，你可以选择</p>
<ul>
<li>RVM Auto Ruby:设置当前环境和你的RVM一致（最好在cmd下先用rvm指定ruby版本,再用cmd打开sublime）</li>
<li>RVM Default Ruby</li>
<li>RVM System Ruby</li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>The infimum record in index page</title>
    <url>/the-infimum-record-in-index-page/</url>
    <content><![CDATA[<p>The infimum record represents a value lower than any possible key in the page. Its “next record” pointer points to the user record with the lowest key in the page. Infimum serves as a fixed entry point for sequentially scanning user records.</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>数据不会被删除，除非page中的数据被重新组织</title>
    <url>/the-record-donst-be-actually-detete/</url>
    <content><![CDATA[<p>数据不会被删除，除非page中的数据被重新组织</p>
<blockquote>
<p>Of course actually deleting the record still doesn’t actually delete it — it just links the record into a “garbage” list, where record space may be reused. However nothing is guaranteed to be really removed from a page until the page is re-organized.</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>The supremum record in index page</title>
    <url>/the-supremum-record-in-index-page/</url>
    <content><![CDATA[<p>The supremum record represents a key higher than any possible key in the page. Its “next record” pointer is always zero (which represents NULL, and is always an invalid position for an actual record, due to the page headers). The “next record” pointer of the user record with the highest key on the page always points to supremum.</p>
<p>PS:在index page中，最大key值的next record总是指向supermum.</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby 块与局部变量绑定的思考</title>
    <url>/thoughtful-ruby-block-and-variable/</url>
    <content><![CDATA[<p>文章已经修改，之前的结论有误，现已经修改</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># =============================</span>
<span class="token comment"># 重要结论:</span>
<span class="token comment"># 1、块绑定局部变量的时间:在块被定义的时开始绑定的,绑定局部变量只是名子绑定,块内绑定的同名局部变量的值还可以在块外被修改</span>
<span class="token comment">#（在块绑定局部变量后，如果块外部的同名局部变量改变了其值，则块中绑定的同名变量的值会被改变）</span>
<span class="token comment"># 以下测试的局部绑定都证明了绑定是从块被定义时开始的</span>
<span class="token comment"># 2、注意那些在块中初始化的变量，是否这些变量也出现在块定义外部的前后，不同位置的同名局部变量会对块内的变量产生不同的影响</span>
<span class="token comment"># =============================</span>

<span class="token comment"># =============================</span>
<span class="token comment"># 目标1:</span>
<span class="token comment"># 测试方法中的局部变量firstname,lastname是否会影响到块中的被绑定的同名变量的值</span>
<span class="token comment"># =============================</span>
<span class="token comment"># 结论</span>
<span class="token comment"># 1、块会绑定局部变量firstname,lastname,把它们以块的方式传到my_method方法</span>
<span class="token comment"># 它们的值不会受到方法中同名变量的影响（闭包特性）</span>
<span class="token comment"># =============================</span>
lambda <span class="token punctuation">&#123;</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
    firstname <span class="token operator">=</span> <span class="token string">"Maria"</span>
    lastname <span class="token operator">=</span> <span class="token string">"Sharapova"</span>
    <span class="token keyword">yield</span> <span class="token string">"Hi! I'm"</span>
  <span class="token keyword">end</span>
  firstname <span class="token operator">=</span> <span class="token string">"Max"</span>
  lastname <span class="token operator">=</span> <span class="token string">"Black"</span>
  myname <span class="token operator">=</span> lambda <span class="token punctuation">&#123;</span> <span class="token operator">|</span>say<span class="token operator">|</span> puts <span class="token string">"test1: <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>say<span class="token delimiter tag">&#125;</span></span> <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>firstname<span class="token delimiter tag">&#125;</span></span> <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>lastname<span class="token delimiter tag">&#125;</span></span>"</span> <span class="token punctuation">&#125;</span>
  my_method <span class="token operator">&amp;</span>myname <span class="token comment">#＝> Hi! I'm Max Black</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>call

<span class="token comment"># &lt;!-- more --></span>

<span class="token comment"># =============================</span>
<span class="token comment"># 目标2:</span>
<span class="token comment"># 1、测试块可以绑定局部变量的范围</span>
<span class="token comment"># 2、在块后面出现的局部变量是否会覆盖其块内已经绑定的同名局部变量的值（块中已经绑定的局部变量的值是否会被改变）</span>
<span class="token comment"># =============================</span>
<span class="token comment"># 结论</span>
<span class="token comment"># 1、块会绑定在它定义时出现在它前面的局部变量firstname,lastname.</span>
<span class="token comment"># 2、块中last变量的值为lastname="wang"，因为块在定义时绑定了lastname,块中同名的lastname对上下文中的其它成员</span>
<span class="token comment"># 是可见的，所以对局部变量赋值lastname="Wang"，也就改变了块内lastname的值。它覆盖了前面lastname="Black"的值。</span>
<span class="token comment"># 3、局部变量lastname＝"Green"出现在块被调用以后，块调用在赋值语句之前执行，对lastname="Green"的赋值不会影响到</span>
<span class="token comment"># 块内部的同名变量lastname,此时块内部的lastname＝"wang"</span>
<span class="token comment"># =============================</span>
lambda <span class="token punctuation">&#123;</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
    firstname <span class="token operator">=</span> <span class="token string">"Maria"</span>
    lastname <span class="token operator">=</span> <span class="token string">"Sharapova"</span>
    <span class="token keyword">yield</span> <span class="token string">"Hi! I'm"</span>
  <span class="token keyword">end</span>
  firstname <span class="token operator">=</span> <span class="token string">"Max"</span>
  lastname <span class="token operator">=</span> <span class="token string">"Black"</span>
  myname <span class="token operator">=</span> lambda <span class="token punctuation">&#123;</span> <span class="token operator">|</span>say<span class="token operator">|</span> puts <span class="token string">"test2: <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>say<span class="token delimiter tag">&#125;</span></span> <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>firstname<span class="token delimiter tag">&#125;</span></span> <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>lastname<span class="token delimiter tag">&#125;</span></span>"</span> <span class="token punctuation">&#125;</span>
  lastname <span class="token operator">=</span> <span class="token string">"Wang"</span>
  my_method <span class="token operator">&amp;</span>myname <span class="token comment">#＝> Hi! I'm Max Wang</span>
  lastname <span class="token operator">=</span> <span class="token string">"Green"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>call

<span class="token comment"># =============================</span>
<span class="token comment"># 目标3:</span>
<span class="token comment"># 测试在块中定义的已经初始化的变量的值是否受外部的同名局部变量值的影响:(局部变量的定义在块定义的前面)</span>
<span class="token comment"># =============================</span>
<span class="token comment"># 结论</span>
<span class="token comment"># 1、局部变量不能影响块中同名变量的值</span>
<span class="token comment"># 2、局部变量的值会随块中同名变量的值在执行过程中的改变而改变,day_changed的值为被改变的值:Mon</span>
<span class="token comment"># 3、发生1、2情况的原因是，在块被执行时，它会先看到块内的say="Mon"，而不再去看被绑定的局部变量say的值("Sun")</span>
<span class="token comment"># 因为局部变量day已经被绑定到块，块中的day对其上下文可见，在块执行后，块中同名变量day的值会改变局部</span>
<span class="token comment"># 变量day的值，此时局部变量day的值为"Mon"</span>
<span class="token comment"># =============================</span>
lambda <span class="token punctuation">&#123;</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
    firstname <span class="token operator">=</span> <span class="token string">"Maria"</span>
    lastname <span class="token operator">=</span> <span class="token string">"Sharapova"</span>
    <span class="token keyword">yield</span> <span class="token string">"Hi! I'm"</span>
  <span class="token keyword">end</span>
  firstname <span class="token operator">=</span> <span class="token string">"Max"</span>
  lastname <span class="token operator">=</span> <span class="token string">"Black"</span>
  day <span class="token operator">=</span> <span class="token string">"Sun"</span>
  myname <span class="token operator">=</span> lambda <span class="token punctuation">&#123;</span> <span class="token operator">|</span>say<span class="token operator">|</span> day <span class="token operator">=</span> <span class="token string">"Mon"</span><span class="token punctuation">;</span> puts <span class="token string">"test3: <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>say<span class="token delimiter tag">&#125;</span></span> <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>firstname<span class="token delimiter tag">&#125;</span></span> <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>lastname<span class="token delimiter tag">&#125;</span></span> at <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>day<span class="token delimiter tag">&#125;</span></span>"</span><span class="token punctuation">&#125;</span>
  <span class="token comment">#day = "Sun"</span>
  my_method <span class="token operator">&amp;</span>myname <span class="token comment">#＝> Hi! I'm Max Black at Mon</span>
  day_changed <span class="token operator">=</span> day
  puts <span class="token string">"test3: day:<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>day_changed<span class="token delimiter tag">&#125;</span></span>"</span>
  <span class="token comment"># day = "Wed"</span>
  <span class="token comment"># my_method &amp;myname #＝> Hi! I'm Max Black at Mon</span>
  <span class="token comment"># day_changed = day</span>
  <span class="token comment"># puts "test3: day:#&#123;day_changed&#125;"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>call

<span class="token comment"># =============================</span>
<span class="token comment"># 目标4:</span>
<span class="token comment"># 测试在块中定义的已经初始化的变量的值是否受外部的同名局部变量值的影响:(局部变量的定义在块定义的后面)</span>
<span class="token comment"># =============================</span>
<span class="token comment"># 结论</span>
<span class="token comment"># 1、最终的值是块中变量的值，局部变量不能影响块中同名变量的值</span>
<span class="token comment"># 2、局部变量的值会不随块中同名变量的值在执行过程中的改变而改变,day_changed的值:Sun</span>
<span class="token comment"># 3、发生1、2情况的原因是：因为day局部变量的定义出现在块定义的后面，这就导致了块根本没有绑定day这个局部变量</span>
<span class="token comment"># 块内的变量day是块内部附加的变量，此时块内部的day与块外部的day没有任何关系</span>
<span class="token comment"># =============================</span>
lambda <span class="token punctuation">&#123;</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
    firstname <span class="token operator">=</span> <span class="token string">"Maria"</span>
    lastname <span class="token operator">=</span> <span class="token string">"Sharapova"</span>
    <span class="token keyword">yield</span> <span class="token string">"Hi! I'm"</span>
  <span class="token keyword">end</span>
  firstname <span class="token operator">=</span> <span class="token string">"Max"</span>
  lastname <span class="token operator">=</span> <span class="token string">"Black"</span>
  <span class="token comment"># day = "Sun"</span>
  myname <span class="token operator">=</span> lambda <span class="token punctuation">&#123;</span> <span class="token operator">|</span>say<span class="token operator">|</span> day <span class="token operator">=</span> <span class="token string">"Mon"</span><span class="token punctuation">;</span> puts <span class="token string">"test4: <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>say<span class="token delimiter tag">&#125;</span></span> <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>firstname<span class="token delimiter tag">&#125;</span></span> <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>lastname<span class="token delimiter tag">&#125;</span></span> at <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>day<span class="token delimiter tag">&#125;</span></span>"</span><span class="token punctuation">&#125;</span>
  day <span class="token operator">=</span> <span class="token string">"Sun"</span>
  my_method <span class="token operator">&amp;</span>myname <span class="token comment">#＝> Hi! I'm Max Black at Mon</span>
  day_changed <span class="token operator">=</span> day
  puts <span class="token string">"test4: day:<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>day_changed<span class="token delimiter tag">&#125;</span></span>"</span>
  <span class="token comment"># day = "Wed"</span>
  <span class="token comment"># my_method &amp;myname #＝> Hi! I'm Max Black at Mon</span>
  <span class="token comment"># day_changed = day</span>
  <span class="token comment"># puts "test5: day:#&#123;day_changed&#125;" # => Web</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>call
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>ACID原则</title>
    <url>/transaction-acid-rule/</url>
    <content><![CDATA[<p>ACID原则</p>
<ul>
<li>原子性(Atomicity): 要进行的操作一般为一系列的操作，这些操作要么都被完成，要么都不被完成。这些操作是不可被分割的。<br>如果事务是是执行一系列的操作，其中的一条sql执行失败，那么其它那些执行成功的sql要进行撤消操作。</li>
<li>一致性(consistency):数据库从一种一致的状态变成下一种一致的状态。</li>
<li>隔离性(isolation):这个事务中操作的对象，在这个事务提交前，对其它事物都不可见。</li>
<li>持久性(durability):数据被写入磁盘</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>undo segment的头页面的址址</title>
    <url>/undo-segment-header-page-addr/</url>
    <content><![CDATA[<p>系统表空间的第五个页面，保存着undo segment的头页面的址址，这个是系统固定下来的。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>测试块中的代码什么时候被执行</title>
    <url>/when-run-of-block-in-mehtod/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># =============================</span>
<span class="token comment"># 目标1:</span>
<span class="token comment"># 1、测试块中的代码什么时候被执行</span>
<span class="token comment"># =============================</span>
<span class="token comment"># 结论</span>
<span class="token comment"># 1、只有在块被真正调用的时候才会被执行:对块调用方法yield/call</span>
<span class="token comment"># 说明: 一般方法中都会用yield去调用块，使得传入方法的块中的代码马上执行,这难免会让人产生代码只要被放在do..end或&#123;&#125;</span>
<span class="token comment"># 就会被马上执行的错觉。</span>
<span class="token comment"># 下面的代码只有当去掉注释时，块中的代码才会被执行</span>
<span class="token comment"># 2、调用yield后，就一定要传入块，否则就产生错误，除非在加入了block_given?判断</span>
<span class="token comment"># =============================</span>
lambda <span class="token punctuation">&#123;</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>block<span class="token punctuation">)</span>
    <span class="token comment"># yield</span>
    <span class="token comment"># block.call</span>
  <span class="token keyword">end</span>

  my_method <span class="token keyword">do</span>
    lastname <span class="token operator">=</span> <span class="token string">"Caroline"</span>
    puts lastname <span class="token comment"># =>这里不会有输出，除非去掉方法中的注释</span>
  <span class="token keyword">end</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>call
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>查看ORM实际生成的sql</title>
    <url>/active-record-transmit-to-sql/</url>
    <content><![CDATA[<p>可以调用to_sql方法察看实际ORM输出出來的SQL，例如Event.open_public.recent_three_days.to_sql</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token constant">Post</span><span class="token punctuation">.</span>where<span class="token punctuation">(</span>author_id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order<span class="token punctuation">(</span><span class="token string">"id desc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>limit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_sql
<span class="token comment"># SELECT  `posts`.* FROM `posts`  WHERE `posts`.`author_id` = 1 ORDER BY id desc LIMIT 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>git ls-files 显示暂存区目录树</title>
    <url>/git-ls-files-show-index-files/</url>
    <content><![CDATA[<p>git ls-files 显示暂存区目录树</p>
<p>如果一个删除的文件已经git add到暂存区，则暂存区的目录树不会包含这个文件，这也证明了暂存区有着自己的目录树</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git write-tree 生成tree对象</title>
    <url>/git-write-tree-generate-tree-id/</url>
    <content><![CDATA[<p>可以用git write-tree 为暂存区生成tree对象，以便可以用ls-tree对暂存区进行查看</p>
<p>执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> write-tree
<span class="token function">git</span> ls_tree <span class="token operator">&lt;</span>git write-tree 的输出<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>method_missing 方法使用注意事项</title>
    <url>/method-missing-be-careful-use/</url>
    <content><![CDATA[<p>method_missing 方法使用注意事项，其实最要应该注意的就是不能在method_missing 方法中出现找不到的方法，否则程序将掉入无限循环中</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">method_missing</span></span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span>
  not_exist_method <span class="token comment">#一个不存在的方法</span>
<span class="token keyword">end</span>

<span class="token comment"># 当程序进入method_missing方法后，发现找不到not_exist_method方法，则又会掉入method_missing,然后又会发现找不到not_exist_method，然后又掉入method_missing,然后loop...</span>

<span class="token comment"># 这种陷阱一般很难发现，所以在method_missing中编写代码时，一定要小心</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>向Scope传递参数</title>
    <url>/pass-argument-to-scope/</url>
    <content><![CDATA[<p>向Scope传递参数</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token operator">&lt;</span> <span class="token constant">ActiveRecord</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Base</span>
    scope <span class="token symbol">:recent</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> <span class="token operator">|</span>date<span class="token operator">|</span> where<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"created_at > ? "</span><span class="token punctuation">,</span> date <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
    <span class="token comment"># 等同于 scope :recent, lambda&#123; |date| where(["created_at > ? ", date ]) &#125;</span>
    <span class="token comment"># 或 scope :recent, Proc.new&#123; |t| where(["created_at > ? ", t ]) &#125;</span>
<span class="token keyword">end</span>
<span class="token constant">Event</span><span class="token punctuation">.</span>recent<span class="token punctuation">(</span> <span class="token builtin">Time</span><span class="token punctuation">.</span>now <span class="token operator">-</span> <span class="token number">7.</span>days <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>PostGIS安装问题</title>
    <url>/postgis-install-issues/</url>
    <content><![CDATA[<p>用brew 安装 postgis （环境：postgre用的是mac版的postgre.app，psql用的是brew版的)</p>
<p>这样问题就来了，在安装postgis时，会查找psql，由于psql在/usr/sbin下，即用的是brew的，安装postgis时总是报错（具体错误大概是说不能解释postgre sql）。搞了半天没弄好。</p>
<p>决定把postgre.app的路径放到加载路径的最前面，/Applications/Postgres93.app/Contents/MacOS,放到路径最前面，再次安装postgis，一切安好。但undefined method `point’ for #&lt;ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition:错误还是没有解决</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>Pry Outline</title>
    <url>/pry-outline/</url>
    <content><![CDATA[<ul>
<li>如果你用<code>gem install rake</code>安装了10.1.0版本的rake（假设是最新的），当你直接使用调用rake时，使用的会是这个最新版本的rake。</li>
<li>如果项目的Gemfile中指定的版本是0.9.6（或者是Gemfile.lock中是0.9.6）的话，你如果不加bundle exec，将会用rake 10.1.0的版本去执行本来应该由0.9.6版本的rake写出的Rake task。</li>
<li>会不会出问题？可能会，可能不会。因为很有可能原作者使用0.9.6版本的rake写的Rake task中没有什么被废弃的部分，10.1.10也能正确执行。但是不兼容的情况也会发生。</li>
</ul>
<blockquote>
<p><strong>bundle exec就是为了解决这样的问题而存在的：在目前的Bundle环境里执行某个操作，这样对于不同的人来说，不论系统里是什么版本的Gem，总是会使用该项目Gemfile中指定的版本来执行某个操作</strong></p>
</blockquote>
<p>其他<br><code>pry plugins</code> 也可以裝一下，包括：</p>
<ol>
<li><p>pry-stack_explorer 輸入 show-stack 的話可以看到 call stack</p>
</li>
<li><p>pry-debugger 可以加上 step, next, finish 和 continue 的控制</p>
</li>
<li><p>pry-nav:也因為 binding.pry 太好用。</p>
<blockquote>
<p>社群也基於 Pry 繼續做了其他的 pry 的 plugin。最 killling 的就是 pry-nav。pry-nav 做的就是可以讓你在 binding.pry 的攔節點前後，作 next、step。直接一行一行的逐一 debug。相信我，如果你在寫通訊交涉的 Library，或者是正在改複雜的 Rails View</p>
</blockquote>
</li>
<li><p>pry-remote</p>
<blockquote>
<p>Pry 搭配 Rails，在往常的作法只有 rails s 可以叫出 debug console 而已。但很多人實際上是使用 Pow 作為開發用 HTTP Server。這樣的需求可以用 pry-remote 解決。pry-remote 的作法是把原本的 bindig.pry 改成 binding.remote_pry。而 binding.remote_pry 會開一支 DRb 起來，開發者再用 pry-remote 連到 debug console</p>
</blockquote>
</li>
<li><p>sinatra使用Pry</p>
<blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pry -r ./application.rb <span class="token comment">#sinatra project, require  application.rb</span>
rails c <span class="token comment"># rails project</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote>
</li>
<li><p>pry 用法</p>
<blockquote>
<p><code>show-method</code> 显示当前对象的源码<br><code>show-method Author#hi</code> 显示Author#hi方法的源码<br><code>.pwd</code>前面的<code>.</code>是调用shell的命令，而非pry的本身的方法</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>pry</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby 哈希排序注意事项</title>
    <url>/ruby-hash-sort-by-key-be-case-of-key-type/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 如果key的数据类型不一致，会导致异常，其实这种情况已经不是第一次遇上了</span>
<span class="token comment"># ArgumentError: comparison of Array with Array failed</span>
hash <span class="token operator">=</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"a"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span>

<span class="token comment"># 可以用hash#sort_by解决,把key统一成一致的数据类型</span>
hash<span class="token punctuation">.</span>sort_by<span class="token punctuation">&#123;</span><span class="token operator">|</span>k<span class="token punctuation">,</span>v<span class="token operator">|</span>k<span class="token punctuation">.</span>to_s<span class="token punctuation">&#125;</span>
<span class="token comment"># 等效于</span>
hash<span class="token punctuation">.</span>sort_by<span class="token punctuation">&#123;</span><span class="token operator">|</span>h<span class="token operator">|</span>h<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_s<span class="token punctuation">&#125;</span>
<span class="token comment"># 最终的输出结果为</span>
<span class="token comment">#=> [["a", 1], [:b, 2], [:c, 3]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>在git stash 中使用--index 恢复暂存区</title>
    <url>/use-index-option-when-you-use-git-stash/</url>
    <content><![CDATA[<p>在git stash 中使用–index 恢复暂存区</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash pop --index

Your branch is up-to-date with <span class="token string">'origin/develop'</span><span class="token builtin class-name">.</span>
Changes to be committed: <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file>..."</span> to unstage<span class="token punctuation">)</span>

modified:   metaprogramming/blocks/block_args.rb

Changes not staged <span class="token keyword">for</span> commit:
<span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to update what will be committed<span class="token punctuation">)</span>
<span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file>..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>

modified:   metaprogramming/blocks/block_args.rb
modified:   metaprogramming/blocks/block_binding.rb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git cat-file type选项和p选项的区别</title>
    <url>/what-difference-between-type-and-p-option/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cat-file type选项和-p选项的区别
<span class="token function">git</span> cat-file 查看对象内容
<span class="token function">git</span> cat-file <span class="token punctuation">[</span>commit <span class="token operator">|</span> blob <span class="token operator">|</span> tree <span class="token operator">|</span> tag<span class="token punctuation">]</span> <span class="token operator">&lt;</span>object<span class="token operator">></span> 可以用来查看一个对象的内容，但要求object一定要和<span class="token punctuation">[</span>commit <span class="token operator">|</span> blob <span class="token operator">|</span> tree <span class="token operator">|</span> tag<span class="token punctuation">]</span>相匹配

可以使用一个通用的option: -p
<span class="token function">git</span> cat-file -p object来搞定，这样就不用区分object的类型了

PS：不太明白为什么要提供 <span class="token punctuation">[</span>commit <span class="token operator">|</span> blob <span class="token operator">|</span> tree <span class="token operator">|</span> tag<span class="token punctuation">]</span> ，它和-p的区别是什么<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>B+树索引本身并不能找到一条记录</title>
    <url>/btree-not-actually-find-a-record/</url>
    <content><![CDATA[<p>B+树索引本身并不能找到一条记录，只能找到记录所在的页。详细见具本章节中的内容，及查看本机数据内容。找到所在页后，把页载入内存，</p>
<p>在内存中对Page Directory进行binary search。依次类推，最终找到记录(通过n_owned)。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>bundler Specify gem versions</title>
    <url>/bundler-specify-gem-versions/</url>
    <content><![CDATA[<blockquote>
<p>Most of the version specifiers, like &gt;= 1.0, are self-explanatory. The specifier ~&gt; has a special meaning, best shown by example. ~&gt; 2.0.3 is identical to &gt;= 2.0.3 and &lt; 2.1. ~&gt; 2.1 is identical to &gt;= 2.1 and &lt; 3.0. ~&gt; 2.2.beta will match prerelease versions like 2.2.beta.12.</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>部署thin + nginx</title>
    <url>/deploy-nginx-thin/</url>
    <content><![CDATA[<p>部署thin + nginx<br>生成配置文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">thin config -C /etc/thin/<span class="token operator">&lt;</span>config-name<span class="token operator">></span>.yml -c <span class="token operator">&lt;</span>rails-app-root-path<span class="token operator">></span> --servers <span class="token operator">&lt;</span>number-of-threads<span class="token operator">></span> -e <span class="token operator">&lt;</span>environment<span class="token operator">></span>

thin config -C /etc/thin/myapp.yml -c /var/rails/myapp --servers <span class="token number">5</span> --socket /tmp/thin.myapp.sock -e development

替换<span class="token operator">&lt;</span>config-name<span class="token operator">></span>为自己的应用名称，替换<span class="token operator">&lt;</span>rails-app-root-path<span class="token operator">></span>为应用的根目录，替换<span class="token operator">&lt;</span>number-of-threads<span class="token operator">></span>为启动的线程数，也就是启动多少个Thin服务，替换<span class="token operator">&lt;</span>environment<span class="token operator">></span>为运行环境。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">thin<span class="token punctuation">:</span>
environment<span class="token punctuation">:</span> development
address<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>
port<span class="token punctuation">:</span> <span class="token number">3001</span>
timeout<span class="token punctuation">:</span> <span class="token number">30</span>
log<span class="token punctuation">:</span> log<span class="token operator">/</span>thin<span class="token punctuation">.</span>log
pid<span class="token punctuation">:</span> tmp<span class="token operator">/</span>pids<span class="token operator">/</span>thin<span class="token punctuation">.</span>pid
max_conns<span class="token punctuation">:</span> <span class="token number">1024</span>
max_persistent_conns<span class="token punctuation">:</span> <span class="token number">512</span>
wait<span class="token punctuation">:</span> <span class="token number">30</span>
servers<span class="token punctuation">:</span> <span class="token number">2</span>
daemonize<span class="token punctuation">:</span> <span class="token boolean">true</span>
<span class="token comment"># require: []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>启动: <code>thin start -C config/thin.yml</code><br>停止: <code>thin stop -C config/thin.yml</code></p>
<p>nginx:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>
     listen <span class="token number">3001</span><span class="token punctuation">;</span>
     charset utf-8<span class="token punctuation">;</span>
     root /var/rails/mysapp/public<span class="token punctuation">;</span>
     access_log logs/access.log<span class="token punctuation">;</span>
     error_log  logs/error.log<span class="token punctuation">;</span>

     location / <span class="token punctuation">&#123;</span>
         <span class="token comment"># proxy_pass          http://rails_servers;</span>
         <span class="token comment"># proxy_redirect      default;</span>
         proxy_redirect      <span class="token boolean">false</span><span class="token punctuation">;</span>
         proxy_set_header    X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>
         proxy_set_header    X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>
         proxy_set_header    Host <span class="token variable">$http_host</span><span class="token punctuation">;</span>
         proxy_next_upstream http_502 http_504 error <span class="token function">timeout</span> invalid_header<span class="token punctuation">;</span>
         proxy_pass <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span>/index.html<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
          rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> <span class="token variable">$1</span>/index.html <span class="token builtin class-name">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span>.html<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> <span class="token variable">$1</span>.html <span class="token builtin class-name">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>-f <span class="token variable">$request_filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          proxy_pass http://rails_servers<span class="token punctuation">;</span>
          <span class="token builtin class-name">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span>
 upstream rails_servers<span class="token punctuation">&#123;</span>
        server <span class="token number">127.0</span>.0.1:3002<span class="token punctuation">;</span>
        server <span class="token number">127.0</span>.0.1:3003<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>thin</tag>
      </tags>
  </entry>
  <entry>
    <title>how to understanding something</title>
    <url>/how-to-understanding-something-that-is-complex-and-poorly-documented/</url>
    <content><![CDATA[<blockquote>
<p>An approach I’ve long taken to understanding something that is complex and poorly documented is the following three steps:</p>
<ol>
<li><p>Read the existing documentation and the existing code, until a basic understanding is reached. Often there are serious misunderstandings or incorrect factorization at this step.</p>
</li>
<li><p>Write my own implementation, even a very basic and broken one, preferably in a completely different language (which avoids the tendency to cut and paste anything). Revise my understanding based on what works and what doesn’t.</p>
</li>
<li><p>Create new documentation and diagrams based on my new understanding. Refactor my implementation as necessary (the act of reviewing everything in order to document it often reveals incorrect factorizations). Correct documentation based on new understanding from refactoring code. Repeat until correct.</p>
</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>测试eval的filename,与lineno参数使用</title>
    <url>/how-to-use-eval-args-filename-and-lineno/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># =============================</span>
<span class="token comment"># 目标1:</span>
<span class="token comment"># 1、测试eval的filename,与lineno参数使用</span>
<span class="token comment"># =============================</span>
<span class="token comment"># 结论</span>
<span class="token comment"># 1、可以自定义程序出错时的出错信息（出错的文件名，程序在哪行执行的,方便出错日志的查询,错误的定位)</span>
<span class="token comment"># =============================</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
    string <span class="token operator">=</span> <span class="token string">"1/0"</span>
    <span class="token comment"># eval(string, nil, __FILE__, __LINE__)</span>
    eval<span class="token punctuation">(</span>string<span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token string">"custom_file.rb"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>
    <span class="token comment"># eval(string)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token constant">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>my_method <span class="token comment"># custom_file.rb:60:in `/': divided by 0 (ZeroDivisionError)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Innodb不保证连续的使用空闲空间保存数据</title>
    <url>/innodb-does-not-guarantee-that-it-uses-free-pages-sequentially/</url>
    <content><![CDATA[<p>InnoDB does not guarantee that it uses free pages sequentially, and many optimizations around bulk data loading will cause pages to be used out of order. (More on page splitting and these optimizations)</p>
<p>1、Innodb不保证连续的使用空闲空间保存数据，这么做的原因有(页的分裂和一些优化)<br>2、在为新数据分配extent时，可以看到有种情况发生：一个index后面是多个free page(63个),然后再是一个index.</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>测试顶级上下文中定义的实例变量的作用域</title>
    <url>/instance-variate-in-toplevel/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># =============================</span>
<span class="token comment"># 目标1:</span>
<span class="token comment"># 1、测试顶级上下文中定义的实例变量的作用域</span>
<span class="token comment"># =============================</span>
<span class="token comment"># 结论</span>
<span class="token comment"># 1、顶级上下文中定义的实例变量只能被main对象访问，因为实例变量暴露在toplevel的context中，self为main</span>
<span class="token comment">#    相当于运行main.instance_eval&#123;@toplevel_variate="toplevel variate"&#125;</span>
<span class="token comment"># 2、私有方法不属于instance_methods的集合，它属于private_instance_methods</span>
<span class="token comment"># =============================</span>

<span class="token variable">@toplevel_variate</span> <span class="token operator">=</span> <span class="token string">"toplevel variate"</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
  <span class="token string">"@toplevel_variate in my_method which define in toplevel:<span class="token interpolation"><span class="token delimiter tag">#&#123;</span><span class="token variable">@toplevel_variate</span><span class="token delimiter tag">&#125;</span></span>"</span>
<span class="token keyword">end</span>

<span class="token builtin">Object</span><span class="token punctuation">.</span>class_eval <span class="token keyword">do</span> <span class="token operator">|</span>variable<span class="token operator">|</span>
  puts <span class="token string">"Object can acccess @toplevel_variate:<span class="token interpolation"><span class="token delimiter tag">#&#123;</span><span class="token variable">@var</span><span class="token delimiter tag">&#125;</span></span>"</span> <span class="token comment"># nil</span>
<span class="token keyword">end</span>

<span class="token keyword">self</span><span class="token punctuation">.</span>instance_eval <span class="token keyword">do</span>
  puts <span class="token string">"@toplevel_variate in self object:<span class="token interpolation"><span class="token delimiter tag">#&#123;</span><span class="token variable">@toplevel_variate</span><span class="token delimiter tag">&#125;</span></span>"</span> <span class="token comment"># toplevel variate</span>
<span class="token keyword">end</span>

puts my_method
puts <span class="token string">"Object.private_instance_methods:"</span> <span class="token operator">+</span> <span class="token builtin">Object</span><span class="token punctuation">.</span>private_instance_methods<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grep<span class="token punctuation">(</span><span class="token symbol">:my_method</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_s <span class="token comment"># :my_method</span>
puts <span class="token string">"Object.instance_methods:"</span> <span class="token operator">+</span> <span class="token builtin">Object</span><span class="token punctuation">.</span>instance_methods<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grep<span class="token punctuation">(</span><span class="token symbol">:my_method</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_s <span class="token comment">#nil</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>安装memcached、redis、postgresql问题总结</title>
    <url>/issues-of-install-memcached-reds-postgresql/</url>
    <content><![CDATA[<p>编译 <code>./configure --prefix=/srv/memcached/memcached145 --with-libevent=/usr/</code><br>需要安装 libevent ，安装时要确保知道安装路径</p>
<p>启动memcached<br><code>memcached -d -u root -m 200 -P /tmp/memcached.pid</code></p>
<p>安装redis<br><code>make PREFIX=/srv/redis/redis2815 install</code></p>
<p>启动:daemonize yes: Make redis run as a daemon<br><code>redis-server /usr/etc/redis.conf</code></p>
<p>安装postgresql，遇到问题:Can’t find the ‘libpq-fe.h header<br>解决方法:</p>
<ol>
<li>`gem install pg -v ‘0.18.1’ – –with-pg-config=/path/config</li>
</ol>
<p>–with-pg=/path/pg –with-pg-lib=/path/<code>2.</code>yum install postgresql-devel<code>最终用方法2解决</code>yum list installed | grep postgres`</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>postgresql</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>load文件参数为false或true时,对变量,实例变量,常量的影响</title>
    <url>/load-secondary-args-true-or-false/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># =============================</span>
<span class="token comment"># 目标1:</span>
<span class="token comment"># 1、load文件参数为false时，对变量，实例变量,常量的影响</span>
<span class="token comment"># 2、load文件参数为false时，类是否被重新打开</span>
<span class="token comment"># =============================</span>
<span class="token comment"># 结论</span>
<span class="token comment"># 1、变量不会被加载的文件影响，实例变量和常量会被影响。因为被加载文件中的变量会在文件加载完成后，掉出加载文件的作用域</span>
<span class="token comment">#    而实例变量和常量不会掉出作用域</span>
<span class="token comment"># 2、类可以被重新打开，因为被加载文件中类也没有掉出作用域（因为类也是常量）</span>
<span class="token comment"># =============================</span>
lambda <span class="token punctuation">&#123;</span>
  var  <span class="token operator">=</span> <span class="token number">2</span>
  <span class="token variable">@var</span> <span class="token operator">=</span> <span class="token number">2</span>
  <span class="token constant">VAR</span>  <span class="token operator">=</span> <span class="token number">2</span>

  <span class="token keyword">class</span> <span class="token class-name">MyClass</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
      <span class="token string">"i'm in load_2 file"</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  puts <span class="token string">"==========Test1:OUTPUT=========="</span>

  load <span class="token builtin">File</span><span class="token punctuation">.</span>expand_path<span class="token punctuation">(</span><span class="token string">'load_file.rb'</span><span class="token punctuation">,</span> <span class="token builtin">File</span><span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">)</span>

  puts <span class="token string">'==========load_2.rb======='</span>
  puts <span class="token string">"var :<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>var <span class="token delimiter tag">&#125;</span></span>"</span>
  puts <span class="token string">"@var:<span class="token interpolation"><span class="token delimiter tag">#&#123;</span><span class="token variable">@var</span><span class="token delimiter tag">&#125;</span></span>"</span>
  puts <span class="token string">"VAR :<span class="token interpolation"><span class="token delimiter tag">#&#123;</span><span class="token constant">VAR</span> <span class="token delimiter tag">&#125;</span></span>"</span>
  puts <span class="token string">"my_method:<span class="token interpolation"><span class="token delimiter tag">#&#123;</span><span class="token constant">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>my_method<span class="token delimiter tag">&#125;</span></span>"</span>
  puts <span class="token string">'==========load_2.rb======='</span>
  puts <span class="token string">"==========Test1:OUTPUT=========="</span>
  <span class="token comment"># &lt;!-- more --></span>
  <span class="token comment"># ==========Test1:OUTPUT==========</span>
  <span class="token comment"># ==========load_1.rb=======</span>
  <span class="token comment"># var :1</span>
  <span class="token comment"># @var:1</span>
  <span class="token comment"># VAR :1</span>
  <span class="token comment"># my_method:i'm in load_1 file</span>
  <span class="token comment"># ==========load_1.rb=======</span>

  <span class="token comment"># ==========load_2.rb=======</span>
  <span class="token comment"># var :2</span>
  <span class="token comment"># @var:1</span>
  <span class="token comment"># VAR :1</span>
  <span class="token comment"># my_method:i'm in load_1 file</span>
  <span class="token comment"># ==========load_2.rb=======</span>
  <span class="token comment"># ==========Test1:OUTPUT==========</span>

<span class="token punctuation">&#125;</span>

<span class="token comment"># =============================</span>
<span class="token comment"># 目标2:</span>
<span class="token comment"># 1、load文件参数为true时，对变量，实例变量,常量的影响</span>
<span class="token comment"># 2、load文件参数为true时，类是否被重新打开</span>
<span class="token comment"># =============================</span>
<span class="token comment"># 结论</span>
<span class="token comment"># 1、变量不会被加载的文件影响，实例变量和常量也不会被影响</span>
<span class="token comment"># 2、类不会被影响</span>
<span class="token comment"># 因为ruby会在load文件时为其创建匿名模块，让其文件中的实例变量、常量、类落在其自身范围内，且在load完成后，销毁这个</span>
<span class="token comment"># 匿名模块（即加载文件中的所有内容），加入true参数的这种做法无法让加载它的文件使用其文件中代码，仅仅是起到了运行load</span>
<span class="token comment"># 文件的代码的作用</span>
<span class="token comment"># =============================</span>
lambda <span class="token punctuation">&#123;</span>
  var  <span class="token operator">=</span> <span class="token number">2</span>
  <span class="token variable">@var</span> <span class="token operator">=</span> <span class="token number">2</span>
  <span class="token constant">VAR</span>  <span class="token operator">=</span> <span class="token number">2</span>

  <span class="token keyword">class</span> <span class="token class-name">MyClass</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
      <span class="token string">"i'm in load_2 file"</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  puts <span class="token string">"==========Test2:OUTPUT=========="</span>

  load <span class="token builtin">File</span><span class="token punctuation">.</span>expand_path<span class="token punctuation">(</span><span class="token string">'load_file.rb'</span><span class="token punctuation">,</span> <span class="token builtin">File</span><span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span>

  puts <span class="token string">'==========load_2.rb======='</span>
  puts <span class="token string">"var :<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>var <span class="token delimiter tag">&#125;</span></span>"</span>
  puts <span class="token string">"@var:<span class="token interpolation"><span class="token delimiter tag">#&#123;</span><span class="token variable">@var</span><span class="token delimiter tag">&#125;</span></span>"</span>
  puts <span class="token string">"VAR :<span class="token interpolation"><span class="token delimiter tag">#&#123;</span><span class="token constant">VAR</span> <span class="token delimiter tag">&#125;</span></span>"</span>
  puts <span class="token string">"my_method:<span class="token interpolation"><span class="token delimiter tag">#&#123;</span><span class="token constant">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>my_method<span class="token delimiter tag">&#125;</span></span>"</span>
  puts <span class="token string">'==========load_2.rb======='</span>
  puts <span class="token string">"==========Test2:OUTPUT=========="</span>

  <span class="token comment"># ==========Test2:OUTPUT==========</span>
  <span class="token comment"># ==========load_1.rb=======</span>
  <span class="token comment"># var :1</span>
  <span class="token comment"># @var:1</span>
  <span class="token comment"># VAR :1</span>
  <span class="token comment"># my_method:i'm in load_1 file</span>
  <span class="token comment"># ==========load_1.rb=======</span>

  <span class="token comment"># ==========load_2.rb=======</span>
  <span class="token comment"># var :2</span>
  <span class="token comment"># @var:2</span>
  <span class="token comment"># VAR :2</span>
  <span class="token comment"># my_method:i'm in load_2 file</span>
  <span class="token comment"># ==========load_2.rb=======</span>
  <span class="token comment"># ==========Test2:OUTPUT==========</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>call<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>load_file.rb</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># module Load1</span>

var <span class="token operator">=</span> <span class="token number">1</span>
<span class="token variable">@var</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token constant">VAR</span> <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
    <span class="token string">"i'm in load_1 file"</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

puts <span class="token string">'==========load_1.rb======='</span>
puts <span class="token string">"var :<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>var <span class="token delimiter tag">&#125;</span></span>"</span>
puts <span class="token string">"@var:<span class="token interpolation"><span class="token delimiter tag">#&#123;</span><span class="token variable">@var</span><span class="token delimiter tag">&#125;</span></span>"</span>
puts <span class="token string">"VAR :<span class="token interpolation"><span class="token delimiter tag">#&#123;</span><span class="token constant">VAR</span> <span class="token delimiter tag">&#125;</span></span>"</span>
puts <span class="token string">"my_method:<span class="token interpolation"><span class="token delimiter tag">#&#123;</span><span class="token constant">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>my_method<span class="token delimiter tag">&#125;</span></span>"</span>
puts <span class="token string">'==========load_1.rb======='</span>
puts

<span class="token comment"># end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 查看端口占用程序</title>
    <url>/mac-use-lsof-to-show-which-process-use-the-port/</url>
    <content><![CDATA[<p>mac 查看端口占用程序<br>lsof -i :9001</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Native extension to perform the binary search within the hashring</title>
    <url>/native-extension-to-perform-the-binary-search-within-the-hashring/</url>
    <content><![CDATA[<ul>
<li>可以看到为了提高查询性能，采用C去实现，如果安装了RubyInline,会启动C扩展实现的同名方法，加速binary_search查询性能</li>
<li>也可以发现，从客户端分配键到哪个redis节点是通过比较节点的crc32与key的crc32的大小的方式，进行分配的<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token keyword">self</span>
  <span class="token comment"># gem install RubyInline to use this code</span>
  <span class="token comment"># Native extension to perform the binary search within the hashring.</span>
  <span class="token comment"># There's a pure ruby version below so this is purely optional</span>
  <span class="token comment"># for performance.  In testing 20k gets and sets, the native</span>
  <span class="token comment"># binary search shaved about 12% off the runtime (9sec -> 8sec).</span>
  <span class="token keyword">begin</span>
    <span class="token keyword">require</span> <span class="token string">'inline'</span>
    inline <span class="token keyword">do</span> <span class="token operator">|</span>builder<span class="token operator">|</span>
      builder<span class="token punctuation">.</span>c <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">-</span><span class="token constant">EOM</span>
      int binary_search<span class="token punctuation">(</span><span class="token constant">VALUE</span> ary<span class="token punctuation">,</span> unsigned int r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          int upper <span class="token operator">=</span> <span class="token constant">RARRAY_LEN</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
          int lower <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
          int idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

          <span class="token keyword">while</span> <span class="token punctuation">(</span>lower <span class="token operator">&lt;=</span> upper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              idx <span class="token operator">=</span> <span class="token punctuation">(</span>lower <span class="token operator">+</span> upper<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>

              <span class="token constant">VALUE</span> continuumValue <span class="token operator">=</span> <span class="token constant">RARRAY_PTR</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
              unsigned int l <span class="token operator">=</span> <span class="token constant">NUM2UINT</span><span class="token punctuation">(</span>continuumValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                  <span class="token keyword">return</span> idx<span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span>
              <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                  upper <span class="token operator">=</span> idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span>
              <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                  lower <span class="token operator">=</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>upper <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            upper <span class="token operator">=</span> <span class="token constant">RARRAY_LEN</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
          <span class="token keyword">return</span> upper<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token constant">EOM</span>
    <span class="token keyword">end</span>
  <span class="token keyword">rescue</span> <span class="token builtin">Exception</span>
    <span class="token comment"># Find the closest index in HashRing with value &lt;= the given value</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">binary_search</span></span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token operator">&amp;</span>block<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">end</span>

  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>pg连接错误</title>
    <url>/pg-connection-bad/</url>
    <content><![CDATA[<p>pg连接错误</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">postgresql_adapter.rb:1216:in `initialize': 致命错误:  用户 <span class="token string">"pgsql"</span> Ident 认证失败 <span class="token punctuation">(</span>PG::ConnectionBad<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>问题环境<br>在安装postgresql_server的机器上，部署rails应用，连接时host:127.0.0.1出现以上错误，改为ip地址后，正常访问</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>rails4  rack调用</title>
    <url>/rails4-server-up-with-rack/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token constant">Rails</span>
  <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token operator">&lt;</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Rack</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Server</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">default_options</span></span>
      <span class="token keyword">super</span><span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token constant">Port</span><span class="token punctuation">:</span>               <span class="token number">3000</span><span class="token punctuation">,</span>
        <span class="token constant">DoNotReverseLookup</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        environment<span class="token punctuation">:</span>        <span class="token punctuation">(</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string">'RAILS_ENV'</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string">'RACK_ENV'</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">"development"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dup<span class="token punctuation">,</span>
        daemonize<span class="token punctuation">:</span>          <span class="token boolean">false</span><span class="token punctuation">,</span>
        debugger<span class="token punctuation">:</span>           <span class="token boolean">false</span><span class="token punctuation">,</span>
        pid<span class="token punctuation">:</span>                <span class="token builtin">File</span><span class="token punctuation">.</span>expand_path<span class="token punctuation">(</span><span class="token string">"tmp/pids/server.pid"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        config<span class="token punctuation">:</span>             <span class="token builtin">File</span><span class="token punctuation">.</span>expand_path<span class="token punctuation">(</span><span class="token string">"config.ru"</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">start</span></span>
      print_boot_information
      trap<span class="token punctuation">(</span><span class="token symbol">:INT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> exit <span class="token punctuation">&#125;</span>
      create_tmp_directories
      log_to_stdout <span class="token keyword">if</span> options<span class="token punctuation">[</span><span class="token symbol">:log_stdout</span><span class="token punctuation">]</span>

      <span class="token keyword">super</span>
    <span class="token keyword">ensure</span>
      <span class="token comment"># The '-h' option calls exit before @options is set.</span>
      <span class="token comment"># If we call 'options' with it unset, we get double help banners.</span>
      puts <span class="token string">'Exiting'</span> <span class="token keyword">unless</span> <span class="token variable">@options</span> <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">[</span><span class="token symbol">:daemonize</span><span class="token punctuation">]</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到和rails2相比，已经大不一样了，代码全部移动到了Rails模块中，结构也更加清晰</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis::HashRing source code</title>
    <url>/redis-hashring/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">'zlib'</span>

<span class="token keyword">class</span> <span class="token class-name">Redis</span>
  <span class="token keyword">class</span> <span class="token class-name">HashRing</span>

    <span class="token constant">POINTS_PER_SERVER</span> <span class="token operator">=</span> <span class="token number">160</span> <span class="token comment"># this is the default in libmemcached</span>

    attr_reader <span class="token symbol">:ring</span><span class="token punctuation">,</span> <span class="token symbol">:sorted_keys</span><span class="token punctuation">,</span> <span class="token symbol">:replicas</span><span class="token punctuation">,</span> <span class="token symbol">:nodes</span>

    <span class="token comment"># nodes is a list of objects that have a proper to_s representation.</span>
    <span class="token comment"># replicas indicates how many virtual points should be used pr. node,</span>
    <span class="token comment"># replicas are required to improve the distribution.</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>nodes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> replicas<span class="token operator">=</span><span class="token constant">POINTS_PER_SERVER</span><span class="token punctuation">)</span>
      <span class="token variable">@replicas</span> <span class="token operator">=</span> replicas
      <span class="token variable">@ring</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
      <span class="token variable">@nodes</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token variable">@sorted_keys</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      nodes<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>node<span class="token operator">|</span>
        add_node<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
      <span class="token keyword">end</span>
    <span class="token keyword">end</span>

    <span class="token comment"># Adds a `node` to the hash ring (including a number of replicas).</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">add_node</span></span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
      <span class="token variable">@nodes</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> node
      <span class="token variable">@replicas</span><span class="token punctuation">.</span>times <span class="token keyword">do</span> <span class="token operator">|</span>i<span class="token operator">|</span>
        key <span class="token operator">=</span> <span class="token constant">Zlib</span><span class="token punctuation">.</span>crc32<span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>node<span class="token punctuation">.</span>id<span class="token delimiter tag">&#125;</span></span>:<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>i<span class="token delimiter tag">&#125;</span></span>"</span><span class="token punctuation">)</span>
        <span class="token variable">@ring</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> node
        <span class="token variable">@sorted_keys</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> key
      <span class="token keyword">end</span>
      <span class="token variable">@sorted_keys</span><span class="token punctuation">.</span>sort<span class="token operator">!</span>
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">remove_node</span></span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
      <span class="token variable">@nodes</span><span class="token punctuation">.</span>reject<span class="token operator">!</span><span class="token punctuation">&#123;</span><span class="token operator">|</span>n<span class="token operator">|</span> n<span class="token punctuation">.</span>id <span class="token operator">==</span> node<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span>
      <span class="token variable">@replicas</span><span class="token punctuation">.</span>times <span class="token keyword">do</span> <span class="token operator">|</span>i<span class="token operator">|</span>
        key <span class="token operator">=</span> <span class="token constant">Zlib</span><span class="token punctuation">.</span>crc32<span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>node<span class="token punctuation">.</span>id<span class="token delimiter tag">&#125;</span></span>:<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>i<span class="token delimiter tag">&#125;</span></span>"</span><span class="token punctuation">)</span>
        <span class="token variable">@ring</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        <span class="token variable">@sorted_keys</span><span class="token punctuation">.</span>reject<span class="token operator">!</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>k<span class="token operator">|</span> k <span class="token operator">==</span> key<span class="token punctuation">&#125;</span>
      <span class="token keyword">end</span>
    <span class="token keyword">end</span>

    <span class="token comment"># get the node in the hash ring for this key</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_node</span></span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      get_node_pos<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_node_pos</span></span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">nil</span><span class="token punctuation">,</span><span class="token keyword">nil</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token variable">@ring</span><span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">0</span>
      crc <span class="token operator">=</span> <span class="token constant">Zlib</span><span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      idx <span class="token operator">=</span> <span class="token constant">HashRing</span><span class="token punctuation">.</span>binary_search<span class="token punctuation">(</span><span class="token variable">@sorted_keys</span><span class="token punctuation">,</span> crc<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token variable">@ring</span><span class="token punctuation">[</span><span class="token variable">@sorted_keys</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">]</span>
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">iter_nodes</span></span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">nil</span><span class="token punctuation">,</span><span class="token keyword">nil</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token variable">@ring</span><span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">0</span>
      _<span class="token punctuation">,</span> pos <span class="token operator">=</span> get_node_pos<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token variable">@sorted_keys</span><span class="token punctuation">[</span>pos<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>k<span class="token operator">|</span>
        <span class="token keyword">yield</span> <span class="token variable">@ring</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>
      <span class="token keyword">end</span>
    <span class="token keyword">end</span>

    <span class="token keyword">class</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token keyword">self</span>

      <span class="token comment"># gem install RubyInline to use this code</span>
      <span class="token comment"># Native extension to perform the binary search within the hashring.</span>
      <span class="token comment"># There's a pure ruby version below so this is purely optional</span>
      <span class="token comment"># for performance.  In testing 20k gets and sets, the native</span>
      <span class="token comment"># binary search shaved about 12% off the runtime (9sec -> 8sec).</span>
      <span class="token keyword">begin</span>
        <span class="token keyword">require</span> <span class="token string">'inline'</span>
        inline <span class="token keyword">do</span> <span class="token operator">|</span>builder<span class="token operator">|</span>
          builder<span class="token punctuation">.</span>c <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">-</span><span class="token constant">EOM</span>
          int binary_search<span class="token punctuation">(</span><span class="token constant">VALUE</span> ary<span class="token punctuation">,</span> unsigned int r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              int upper <span class="token operator">=</span> <span class="token constant">RARRAY_LEN</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
              int lower <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
              int idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

              <span class="token keyword">while</span> <span class="token punctuation">(</span>lower <span class="token operator">&lt;=</span> upper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                  idx <span class="token operator">=</span> <span class="token punctuation">(</span>lower <span class="token operator">+</span> upper<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>

                  <span class="token constant">VALUE</span> continuumValue <span class="token operator">=</span> <span class="token constant">RARRAY_PTR</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
                  unsigned int l <span class="token operator">=</span> <span class="token constant">NUM2UINT</span><span class="token punctuation">(</span>continuumValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                      <span class="token keyword">return</span> idx<span class="token punctuation">;</span>
                  <span class="token punctuation">&#125;</span>
                  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                      upper <span class="token operator">=</span> idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                  <span class="token punctuation">&#125;</span>
                  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                      lower <span class="token operator">=</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                  <span class="token punctuation">&#125;</span>
              <span class="token punctuation">&#125;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>upper <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                upper <span class="token operator">=</span> <span class="token constant">RARRAY_LEN</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span>
              <span class="token keyword">return</span> upper<span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
          <span class="token constant">EOM</span>
        <span class="token keyword">end</span>
      <span class="token keyword">rescue</span> <span class="token builtin">Exception</span>
        <span class="token comment"># Find the closest index in HashRing with value &lt;= the given value</span>
        <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">binary_search</span></span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token operator">&amp;</span>block<span class="token punctuation">)</span>
          upper <span class="token operator">=</span> ary<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span>
          lower <span class="token operator">=</span> <span class="token number">0</span>
          idx <span class="token operator">=</span> <span class="token number">0</span>

          <span class="token keyword">while</span><span class="token punctuation">(</span>lower <span class="token operator">&lt;=</span> upper<span class="token punctuation">)</span> <span class="token keyword">do</span>
            idx <span class="token operator">=</span> <span class="token punctuation">(</span>lower <span class="token operator">+</span> upper<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
            comp <span class="token operator">=</span> ary<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token operator">></span> value

            <span class="token keyword">if</span> comp <span class="token operator">==</span> <span class="token number">0</span>
              <span class="token keyword">return</span> idx
            <span class="token keyword">elsif</span> comp <span class="token operator">></span> <span class="token number">0</span>
              upper <span class="token operator">=</span> idx <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">else</span>
              lower <span class="token operator">=</span> idx <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">end</span>
          <span class="token keyword">end</span>

          <span class="token keyword">if</span> upper <span class="token operator">&lt;</span> <span class="token number">0</span>
            upper <span class="token operator">=</span> ary<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span>
          <span class="token keyword">end</span>
          <span class="token keyword">return</span> upper
        <span class="token keyword">end</span>

      <span class="token keyword">end</span>
    <span class="token keyword">end</span>

  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis HyperLogLog 命令</title>
    <url>/redis-hyperloglog-command/</url>
    <content><![CDATA[<ol>
<li>返回储存在给定键的 HyperLogLog 的近似基数</li>
<li>通过 HyperLogLog 数据结构， 用户可以使用少量固定大小的内存， 来储存集合中的唯一元素 （每个 HyperLogLog 只需使用 12k 字节内存，以及几个字节的内存来储存键本身）。<pre class="line-numbers language-redis" data-language="redis"><code class="language-redis">
redis&gt; PFADD  databases  &quot;Redis&quot;  &quot;MongoDB&quot;  &quot;MySQL&quot;
(integer) 1

redis&gt; PFCOUNT  databases
(integer) 3

redis&gt; PFADD  databases  &quot;Redis&quot;    # Redis 已经存在，不必对估计数量进行更新
(integer) 0

redis&gt; PFCOUNT  databases    # 元素估计数量没有变化
(integer) 3

redis&gt; PFADD  databases  &quot;PostgreSQL&quot;    # 添加一个不存在的元素
(integer) 1

redis&gt; PFCOUNT  databases    # 估计数量增一
4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<blockquote>
<p>问题思考：<br>这个是如何实现的，不存储元素的话，如何知道这个元素已经存在了。</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>rspec exception comparisons</title>
    <url>/rspec-exception-comparisons/</url>
    <content><![CDATA[<p>rspec exception comparisons</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">expect<span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span>to be <span class="token operator">></span>  expected
expect<span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span>to be <span class="token operator">>=</span> expected
expect<span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span>to be <span class="token operator">&lt;=</span> expected
expect<span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span>to be <span class="token operator">&lt;</span>  expected
expect<span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span>to be_between<span class="token punctuation">(</span>minimum<span class="token punctuation">,</span> maximum<span class="token punctuation">)</span><span class="token punctuation">.</span>inclusive
expect<span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span>to be_between<span class="token punctuation">(</span>minimum<span class="token punctuation">,</span> maximum<span class="token punctuation">)</span><span class="token punctuation">.</span>exclusive
expect<span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span>to match<span class="token punctuation">(</span><span class="token regex">/expression/</span><span class="token punctuation">)</span>
expect<span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span>to be_within<span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">.</span>of<span class="token punctuation">(</span>expected<span class="token punctuation">)</span>
expect<span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span>to start_with expected
expect<span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span>to end_with expected<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>rspec</tag>
      </tags>
  </entry>
  <entry>
    <title>rspec exception identity or equivalence</title>
    <url>/rspec-exception-identity-or-equivalence/</url>
    <content><![CDATA[<p><code>expect</code> does not support <code>==</code> matcher.</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">expect<span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span>to eql<span class="token punctuation">(</span>expected<span class="token punctuation">)</span>   <span class="token comment"># passes if actual.eql?(expected)</span>
expect<span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span>to equal<span class="token punctuation">(</span>expected<span class="token punctuation">)</span> <span class="token comment"># passes if actual.equal?(expected)</span>

<span class="token comment"># NOTE: `expect` does not support `==` matcher.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>rspec</tag>
      </tags>
  </entry>
  <entry>
    <title>rspec exception types classes response</title>
    <url>/rspec-exception-types-classes-response/</url>
    <content><![CDATA[<p>Types/classes/response</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">expect<span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span>to be_instance_of<span class="token punctuation">(</span>expected<span class="token punctuation">)</span>
expect<span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span>to be_kind_of<span class="token punctuation">(</span>expected<span class="token punctuation">)</span>
expect<span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span>to respond_to<span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>rspec</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby hash 排序</title>
    <url>/ruby-hash-sort/</url>
    <content><![CDATA[<p>ruby hash 排序</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">h <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"sa"</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ab"</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"x3"</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"de"</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token symbol">:de</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">&#125;</span>
h<span class="token punctuation">.</span>sort_by<span class="token punctuation">&#123;</span><span class="token operator">|</span>k<span class="token punctuation">,</span>v<span class="token operator">|</span>k<span class="token punctuation">.</span>to_s<span class="token punctuation">&#125;</span>
<span class="token comment">#=> [["ab", 2], [:de, 5], ["de", 6], ["sa", 1], ["x3", 3]]</span>

h<span class="token punctuation">.</span>sort_by<span class="token punctuation">&#123;</span><span class="token operator">|</span>k<span class="token punctuation">,</span>v<span class="token operator">|</span>v<span class="token punctuation">.</span>to_s<span class="token punctuation">&#125;</span>
<span class="token comment">#=>[["sa", 1], ["ab", 2], ["x3", 3], [:de, 5], ["de", 6]]</span>

h<span class="token punctuation">.</span>sort_by<span class="token punctuation">&#123;</span><span class="token operator">|</span>k<span class="token operator">|</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_s<span class="token punctuation">&#125;</span>
<span class="token comment">#=>[["ab", 2], [:de, 5], ["de", 6], ["sa", 1], ["x3", 3]]</span>

h<span class="token punctuation">.</span>sort_by<span class="token punctuation">&#123;</span><span class="token operator">|</span>k<span class="token operator">|</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_s<span class="token punctuation">&#125;</span>
<span class="token comment">#=>[["sa", 1], ["ab", 2], ["x3", 3], [:de, 5], ["de", 6]]</span>

h <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"sa"</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ab"</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"x3"</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"de"</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token symbol">:de</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">&#125;</span>
h<span class="token punctuation">.</span>sort
<span class="token comment">#=>argumentError: comparison of Array with Array failed,因为:de=>5与"de"＝>6 Key类型不一样,键类型一样，才可以直接用sort,按键排序，否则要把键处理为一致的数据(可以比较的数据类型)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>rake 实例变量作用范围</title>
    <url>/scope-of-instance-variable-in-rake-block/</url>
    <content><![CDATA[<p>rake 实例变量作用范围,可以看到在task的block中，当前self为main，所以@people可以在say方法中访问。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">desc <span class="token string">"test instance variable"</span>
task <span class="token symbol">:hello_world</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token symbol">:environment</span> <span class="token keyword">do</span>
  <span class="token variable">@people</span> <span class="token operator">=</span> <span class="token string">"Jone"</span>
  puts <span class="token keyword">self</span> <span class="token comment">#=>main</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">say</span></span>
    puts <span class="token keyword">self</span> <span class="token comment">#=>main</span>
    puts <span class="token variable">@people</span>
  <span class="token keyword">end</span>
  say
<span class="token keyword">end</span>

<span class="token comment">#=>main</span>
<span class="token comment">#=>main</span>
<span class="token comment">#=>Jone</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>secret_token:问题</title>
    <url>/secret-token-issues/</url>
    <content><![CDATA[<p>secret_token:问题</p>
<blockquote>
<p>A secret is required to generate an integrity hash for cookie session data. Use config.secret_token = “some secret phrase of at least 30 characters”in config/initializers/secret_token.rb</p>
</blockquote>
<p>解决方法:</p>
<blockquote>
<p>运行 rake secret 生成secret_token，创建config/initializers/secret_token.rb，添加代码</p>
<pre class="line-numbers language-none"><code class="language-none">YouApp::Application.config.secret_token &#x3D; &#39;用 rake secret 生成的token&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>segments for index in innodb</title>
    <url>/segments-for-index-in-innodb/</url>
    <content><![CDATA[<p>Two segments are allocated for each index in InnoDB. One is for nonleaf nodes of the B-tree, the other is for the leaf nodes. Keeping the leaf nodes contiguous on disk enables better sequential I/O operations, because these leaf nodes contain the actual table data.</p>
<p>每个索引拥有2个segment，一个用于非叶结点，另一个用于叶子结点</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>苹果系统 xos 使用crontab定时任务</title>
    <url>/how-to-use-crontab-in-your-xos/</url>
    <content><![CDATA[<p>在苹果系统 xos 使用crontab定时任务时，出现<code>/usr/bin/vi exited with status 1</code></p>
<p>解决方法</p>
<blockquote>
<p>The issue turned out to be vi and nothing to do with cron. Doing <code>export EDITOR=vim</code> fixed it</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>rails 缓存字段异常</title>
    <url>/rails-cache-column-deleted-exception/</url>
    <content><![CDATA[<p>rails 启动后，会cached表的字段，如果在删除了某个字段，而没有重新启动rails,则rails依然加载这个字段，造成异常，开发模式也是如此</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>rails validate uniqueness multiple columns</title>
    <url>/rails-validate-uniqueness-multiple-columns/</url>
    <content><![CDATA[<p>rails 2</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">validates_uniqueness_of <span class="token symbol">:user_id</span><span class="token punctuation">,</span> scope<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token symbol">:friend_id</span><span class="token punctuation">,</span> <span class="token symbol">:something_else</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>rails 3</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">validates <span class="token symbol">:user_id</span><span class="token punctuation">,</span> <span class="token symbol">:uniqueness</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token symbol">:scope</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token symbol">:friend_id</span><span class="token punctuation">,</span> <span class="token symbol">:something_else</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>成功迁移到docker</title>
    <url>/webapp-migrate-to-docker/</url>
    <content><![CDATA[<p>搞了两天，终于迁移到docker了，docker确实优点挺多的，比如直接提供了应用程序的运行环境，当然还有很多，初次接触还不是很了解。这次迁移用到了两个docker:wordpress与mysql，使用这两个dock, 省去了安装mysql和php环境的工作</p>
<p>一下步的工作就是制作一个本站的docker image,这样以后随便放到那里就都可以使用了。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>mac下有道词典与lightroom冲突</title>
    <url>/a-conflict-between-youdao-and-lr/</url>
    <content><![CDATA[<p>发现在mac下同时开启有道词典与lightroom时，在lightroom中用触摸板调节属性参数时，会意外触发拷贝设置功能</p>
<p>解决办法就是暂时把有道词典关闭就可以了。这个比较坑啊，找了半天才发现是和有道词典有关系</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>lightroom</tag>
      </tags>
  </entry>
  <entry>
    <title>使用aws s3 托管网站</title>
    <url>/amazon-simple-storage-service/</url>
    <content><![CDATA[<p>出于速度的原因，把网站内容放到aws s3上了，之前放到github page上，发现速度不是很稳定，且有的时候出现不了能放问的情况</p>
<p>简单介绍下s3托管静态网站的使用</p>
<ol>
<li><p>在s3上创建bucket，名子要和你的域名一样，如 <a href="http://www.youdomain.com/">www.youdomain.com</a></p>
</li>
<li><p>设置这个bucket，启动静态托管</p>
</li>
<li><p>登录你的域名后台管理平台，建立CNAME记录</p>
<blockquote>
<p>桶的根结点类似 <a href="http://www.youdomain.com.s3-website-ap-northeast-1.amazonaws.com/">www.youdomain.com.s3-website-ap-northeast-1.amazonaws.com</a></p>
</blockquote>
</li>
<li><p>设置bucket的权限策略，添加新的策略，权限为公开，这样才能让别人访问你的网站内容</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"Version"</span><span class="token operator">:</span> <span class="token string">"2012-10-17"</span><span class="token punctuation">,</span>
  <span class="token property">"Statement"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"Sid"</span><span class="token operator">:</span> <span class="token string">"PublicReadForGetBucketObjects"</span><span class="token punctuation">,</span>
      <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span>
      <span class="token property">"Principal"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>
      <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token string">"s3:GetObject"</span><span class="token punctuation">,</span>
      <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token string">"arn:aws:s3:::www.youdomain.com/*"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>上传文件到s3</p>
</li>
</ol>
<p>使用aws s3命令行工具进行上传</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aws s3 <span class="token function">sync</span> <span class="token builtin class-name">.</span> s3://www.youdomain.com --exclude <span class="token string">".git/*"</span> --delete

<span class="token comment"># 参数delete的作用是：删除目标路径中，源路径不存的文件、文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>进入你的网站存放路径，输入以上命令，文件就会被同步到s3了，如果一切正常，你就可以通过你的域名进行访问了。当然，你也可以使用分配给你的桶路径进行访问</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>s3</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义yelee标签云路径</title>
    <url>/fix-tags-category-for-google-search/</url>
    <content><![CDATA[<p>在把博客迁移到Hexo后，发现不能被google收录，登录google webmaster后，发现是由于在迁移过程中产生了以下错误</p>
<blockquote>
<ul>
<li>网址/tag/被迁移为tags/</li>
<li>网址/categroy被迁移为categories</li>
</ul>
</blockquote>
<p>错误原因是hexo默认的标签和分类的名称为 tags、categories，而wordpress设置为tag、category，由于hexo使用是yelee主题，还需要修改它的标签云路径</p>
<p>要修改的文件</p>
<blockquote>
<ul>
<li>hexo的配置文件_config.yml</li>
<li>yelee的配置文件_config.yml及layout/_partial/page.ejs</li>
</ul>
</blockquote>
<p>hexo配置设置</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>/_config.yml</span></div><code class="language-ruby"><span class="token comment"># 设置tag与category的目录</span>
tag_dir<span class="token punctuation">:</span> tag <span class="token comment">#tags改为tag</span>
category_dir<span class="token punctuation">:</span> category<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>yelee主题设置</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>yelee/_config.yml</span></div><code class="language-ruby"><span class="token comment"># 修改标签云路径</span>
menu<span class="token punctuation">:</span>
  主页<span class="token punctuation">:</span> <span class="token operator">/</span>
  所有文章<span class="token punctuation">:</span> <span class="token regex">/archives/</span>
  标签云<span class="token punctuation">:</span> <span class="token regex">/tag/</span>
  关于我<span class="token punctuation">:</span> <span class="token regex">/about/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>yelee/layout/_partial/page.ejs</span></div><code class="language-ruby"><span class="token comment"># 让新的tag标签云生效</span>
<span class="token comment"># 这里的tag对应yelee_config中标签云的tag路径</span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">"tag/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token string">%>
    &lt;!-- Tag Cloud Page --></span>
    <span class="token operator">&lt;</span><span class="token string">%- partial('tag-</span>cloud<span class="token operator">-</span>page'<span class="token punctuation">)</span> <span class="token string">%>
&lt;% &#125; %></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>lightroom减少杂色</title>
    <url>/lr-option-of-pic-detail/</url>
    <content><![CDATA[<p>使用lightroom的细节-&gt;减少杂色功能，可以去除图片中的杂色，同时也具有提升ISO、减少杂质的效果</p>
<p><img src="//img.gagahappy.cn/blog/2016/08/lr_pic_detail.png_b1" alt="减少杂质"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>lightroom</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac Air 冷启动USB设备不能识别</title>
    <url>/mac-usb-play-dead/</url>
    <content><![CDATA[<p>发现 Mac Air 右边(或左边)的USB接口在冷开机后，不能自动识别USB设备(极少的时候可以)，但接上<strong>苹果自己的USB延长线</strong>，后就可以了，非常奇怪。网上说这是苹果的硬件设计所导致的，是硬伤。</p>
<p>目前发现的不能自动识别的设备有</p>
<ul>
<li>非苹果的键盘</li>
<li>U盘</li>
<li>移动硬盘</li>
</ul>
<p>PS: 这苹果的USB延长线官网卖140+一根，看来真是贵的有道理啊</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>博客又从aws迁移到Hexo</title>
    <url>/migrate-blog-to-hexo/</url>
    <content><![CDATA[<p>把博客又从aws迁移到Hexo了，真是折腾啊，迁移中处理了几个问题</p>
<ol>
<li>由于主题原因引起的单篇文章体积过大的问题</li>
<li>highlight 代码块空白行不显示问题</li>
<li>图片迁移到七牛</li>
<li>对原有主题做了小小的修改。最最关键的是，不用为空间的事情担心了，因为已经全是不要钱的了</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ssh-add添加私钥到ssh-agent</title>
    <url>/use-ssh-add-add-ssh-key/</url>
    <content><![CDATA[<p>使用ssh-add命令可以把私钥添加到ssh-agent，当登录远程主机中的程序(如:git push)请求对应的私钥时，可以由ssh-agent把本地私钥发送给远程主机(启动这个功能要在ssh配置中设置 <code>ForwardAgent yes</code>)</p>
<p>添加私钥到ssh-agent</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-add /your_ssh_key_path
<span class="token comment">#=> Identity added: /Users/ga/.ssh/id</span>

<span class="token builtin class-name">echo</span> <span class="token variable">$?</span> <span class="token comment">#查看是否添加成功</span>
<span class="token comment">#=> 0 如果这里返回的不是0，则说明添加失败。如果你的key是加密的，在添加时还要输入密码</span>

ssh-add -l <span class="token comment">#查看已经添加到ssh-agent中的key</span>
<span class="token comment">#=> 2048 SHA256:9GlH51tb7Oxbxxxxxxxxxxxxxxxxxx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo设置skip_render 指定不进行渲染的文件</title>
    <url>/hexo-set-skip-render/</url>
    <content><![CDATA[<p>其实是一个比较简单的问题，但搞了1小时，也是挺坑的，在<code>_config.yml</code>文件修改后，一定要执行一下<code>hexo clean</code>，不然skip_render可能不会生效。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 路径是相对source目录的</span>
<span class="token comment"># 不对google7caf449f9ab0f94b.html与your-other-ignore-file进行渲染，保持文件原有内容</span>

skip_render<span class="token punctuation">:</span>
  <span class="token operator">-</span> <span class="token string">"google7caf449f9ab0f94b.html"</span>
  <span class="token operator">-</span> <span class="token string">"your-other-ignore-file"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对整个目录要跳过的同学，还请自行google</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>在windows下，使用Gpg4win对文件进行完整性校验</title>
    <url>/use-gpg4win-to-check-signature-on-windows/</url>
    <content><![CDATA[<p>安装Gpg4win，之后切换到windows下的命令行窗口（开始菜单-&gt;运行-&gt;输入cmd然后回车）</p>
<p>在命令行下进入要验证的文件目录，有如下文件</p>
<blockquote>
<p>shadowsockR-donet-4.0.exe.sig<br>shadowsockR-donet-4.0.exe</p>
</blockquote>
<p>首先获取RSA key ID：得到的RSA key ID为DA0F4B18，但同时得到提示<code>Can&#39;t check signature: No public key</code>无公钥，不能验证签名。<br>PS: 无奈啊，windows下的命令，只好截图了<br><img src="//img.gagahappy.cn/blog/2016/09/pgp_01.png" alt="图1" title="图1"></p>
<p>添加公钥服务器：设置要获取的ID为ID为DA0F4B18，提示导入成功<br><img src="//img.gagahappy.cn/blog/2016/09/pgp_02.png" alt="图2" title="图2"></p>
<p>进行校验：其实这个命令我们刚刚已经执行过了，可以看到Primary key fingerprint后面的签名了，这个签名应该和提供给你的签名是一致的，如果一致说明文件没有被改动过<br><img src="//img.gagahappy.cn/blog/2016/09/pgp_03.png" alt="图3" title="图3"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>win7</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS的免费SQS服务</title>
    <url>/aws-sqs-for-free/</url>
    <content><![CDATA[<p> AWS的免费套餐里包含了SQS（不过期服务/产品），支持1,000,000个请求。也就是说，当超过1,000,000时，会收费的吧？限量是每个月吧？</p>
<p>话说S3免费的2000个PUT请求确实少了点，如果使用SYNC同步3000个文件，是算一次PUT呢，还是3000个呢？从账单上看，应该是按3000个算的，前2000个没有收费，后面1000个开始计费了。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>sqs</tag>
      </tags>
  </entry>
  <entry>
    <title>如何关闭iOS系统自动更新提示</title>
    <url>/disable-ios-update/</url>
    <content><![CDATA[<p>苹果每次出新机都会有新的系统更新(iOS 10)，并且会一直提示你更新，直到你更新为止。对于不想升级的用户来说非常的烦人</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li>设置 - 通用 - 用量 - 管理存储空间 - 找到更新包(iOS 10)，点击删除</li>
<li>设置 - iTunes&amp;App Stores, 找到Updates，关闭<br><img src="//img.gagahappy.cn/blog/2016/10/disable-update-01.jpg_b1" alt="禁止升级提示" title="禁止升级提示"></li>
<li>安装禁止更新的文件：<a href="https://oldcat.me/web/NOOTA9.mobileconfig">https://oldcat.me/web/NOOTA9.mobileconfig</a><br>访问后会提示安装，点击安装之后会提示需要重新启动手机(如果以后想升级到最新，只需要点击删除描述文件就可以了)<br><img src="//img.gagahappy.cn/blog/2016/10/disable-update-02.jpg_b1" alt="禁止升级提示" title="禁止升级提示"></li>
<li>重新启动手机，会在桌面上生成一个紫色的 feedback图标，不用理会</li>
<li>大功告成，再查看是否有更新，会显示已经是最新。可以看到系统更新停留在了9.3.5<br><img src="//img.gagahappy.cn/blog/2016/10/disable-update-03.jpg_b1" alt="禁止升级提示" title="禁止升级提示"></li>
</ol>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime3 自动提示方法所在文件</title>
    <url>/sublime-3-code-tips/</url>
    <content><![CDATA[<p>sublime3 增加了一个新的功能，可以自动提示一个方法的所在文件，且精确到行号。如果同一个方法被定义在了不同的文件，则会以下拉的方式显示，你可以选择要查看哪个文件里的这个方法。</p>
<p><img src="//img.gagahappy.cn/blog/2016/11/sublime-3-code.png_b1" alt="sublime-3-code" title="sublime-3-code"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>打孔纸带是计算机终端输出设备的鼻祖</title>
    <url>/first-output-device/</url>
    <content><![CDATA[<p>可以认为，打孔纸带是计算机终端输出设备的鼻祖。那时打印机都少的可怜，更不要说是显示屏幕了 ​​​</p>
<p><img src="//img.gagahappy.cn/blog/2017/06/first-output-device.jpg_b1" alt="打孔纸带是计算机终端输出设备的鼻祖" title="打孔纸带是计算机终端输出设备的鼻祖"></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>deploy with mina</title>
    <url>/deploy-with-mina/</url>
    <content><![CDATA[<p>博客使用mina部署了，之前从编写到发布要打好几命令，而且还要登录的EC2上，执行的命令比较多</p>
<p>有以下几个问题</p>
<ul>
<li>每次发布产生的新版本<code>./release/xxx</code>，文件的生成时间更新为当前时间</li>
<li>这造成了每次向S3同步的时候，都会同步所有文件，因为本地文件的时间戳已经改变，这样会使本来没有发生更改的文件也会被再次同步一次，浪费了拉取数据的次数</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>aws</tag>
      </tags>
  </entry>
  <entry>
    <title>mina 部署配置</title>
    <url>/mina-deploy-config/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">'mina/rails'</span>
<span class="token keyword">require</span> <span class="token string">'mina/git'</span>
<span class="token comment"># require 'mina/rbenv'  # for rbenv support. (https://rbenv.org)</span>
<span class="token comment"># require 'mina/rvm'    # for rvm support. (https://rvm.io)</span>

<span class="token comment"># Basic settings:</span>
<span class="token comment">#   domain       - The hostname to SSH to.</span>
<span class="token comment">#   deploy_to    - Path to deploy into.</span>
<span class="token comment">#   repository   - Git repo to clone from. (needed by mina/git)</span>
<span class="token comment">#   branch       - Branch name to deploy. (needed by mina/git)</span>

set <span class="token symbol">:application_name</span><span class="token punctuation">,</span> <span class="token string">'yourapp'</span>
set <span class="token symbol">:domain</span><span class="token punctuation">,</span> <span class="token string">'hostname'</span>
set <span class="token symbol">:deploy_to</span><span class="token punctuation">,</span> <span class="token string">'deploy_path'</span>
set <span class="token symbol">:repository</span><span class="token punctuation">,</span> <span class="token string">'git@...'</span>
set <span class="token symbol">:branch</span><span class="token punctuation">,</span> <span class="token string">'master'</span>

<span class="token comment"># Optional settings:</span>
  <span class="token comment"># set :user, 'Username'          # Username in the server to SSH to.</span>
  <span class="token comment"># set :forward_agent, true     # SSH forward_agent.</span>
  <span class="token comment"># set :port, '30000'           # SSH port number.</span>

<span class="token comment"># shared dirs and files will be symlinked into the app-folder by the 'deploy:link_shared_paths' step.</span>

<span class="token comment"># set :shared_dirs, fetch(:shared_dirs, []).push('somedir')</span>

<span class="token comment"># 要保证项目文件夹里有config文件夹，否则不能建立ln目标文件</span>
<span class="token comment"># set :shared_files, fetch(:shared_files, []).push('config/database.yml', 'config/secrets.yml')</span>

<span class="token comment"># This task is the environment that is loaded for all remote run commands, such as</span>
<span class="token comment"># `mina deploy` or `mina rake`.</span>
task <span class="token symbol">:environment</span> <span class="token keyword">do</span>
  <span class="token comment"># If you're using rbenv, use this to load the rbenv environment.</span>
  <span class="token comment"># Be sure to commit your .ruby-version or .rbenv-version to your repository.</span>
  <span class="token comment"># invoke :'rbenv:load'</span>

  <span class="token comment"># For those using RVM, use this to load an RVM version@gemset.</span>
  <span class="token comment"># invoke :'rvm:use', 'ruby-2.2.4@default'</span>
<span class="token keyword">end</span>

<span class="token comment"># Put any custom commands you need to run at setup</span>
<span class="token comment"># All paths in `shared_dirs` and `shared_paths` will be created on their own.</span>
task <span class="token symbol">:setup</span> <span class="token keyword">do</span>
  <span class="token comment"># command %&#123;rbenv install 2.3.0&#125;</span>
<span class="token keyword">end</span>

desc <span class="token string">"Deploys the current version to the server."</span>
task <span class="token symbol">:deploy</span> <span class="token keyword">do</span>
  <span class="token comment"># uncomment this line to make sure you pushed your local branch to the remote origin</span>
  <span class="token comment"># invoke :'git:ensure_pushed'</span>

  <span class="token comment"># 自定义本地要执行的任务 :local/:remote</span>
  run<span class="token punctuation">(</span><span class="token symbol">:local</span><span class="token punctuation">)</span> <span class="token keyword">do</span>
    invoke <span class="token punctuation">:</span><span class="token string">'hexo:generate'</span>
    invoke <span class="token punctuation">:</span><span class="token string">'hexo:deploy'</span>
  <span class="token keyword">end</span>

  <span class="token comment"># 加入本地ssh-key到ssh-add代理，以便远程主机有权限拉取代码</span>
  run<span class="token punctuation">(</span><span class="token symbol">:local</span><span class="token punctuation">)</span> <span class="token keyword">do</span>
    command <span class="token string">%&#123; ssh-add ~/.ssh/id_rsa&#125;</span>
  <span class="token keyword">end</span>


  deploy <span class="token keyword">do</span>
    <span class="token comment"># Put things that will set up an empty directory into a fully set-up</span>
    <span class="token comment"># instance of your project.</span>

    invoke <span class="token punctuation">:</span><span class="token string">'git:clone'</span>
    invoke <span class="token punctuation">:</span><span class="token string">'deploy:link_shared_paths'</span>
    <span class="token comment"># invoke :'bundle:install'</span>
    <span class="token comment"># invoke :'rails:db_migrate'</span>
    <span class="token comment"># invoke :'rails:assets_precompile'</span>
    invoke <span class="token punctuation">:</span><span class="token string">'deploy:cleanup'</span>

    on <span class="token symbol">:launch</span> <span class="token keyword">do</span>
      in_path<span class="token punctuation">(</span>fetch<span class="token punctuation">(</span><span class="token symbol">:current_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">do</span>
        <span class="token comment"># command %&#123;mkdir -p tmp/&#125;</span>
        <span class="token comment"># command %&#123;touch tmp/restart.txt&#125;</span>
        <span class="token comment"># 这里必须有可以执行的代码，否则运行时出错，没有代码要执行可以注释掉整个代码块</span>
      <span class="token keyword">end</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token comment"># you can use `run :local` to run tasks on local machine before of after the deploy scripts</span>
  <span class="token comment"># run(:local) &#123; touch 'hello.txt'&#125;</span>
<span class="token keyword">end</span>

<span class="token comment"># custom task</span>
namespace <span class="token symbol">:hexo</span> <span class="token keyword">do</span>
  desc <span class="token string">"genarte hexo posts"</span>
  task <span class="token symbol">:generate</span> <span class="token keyword">do</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hexo_generate</span></span>
      puts <span class="token string">"Geginning generate posts"</span>
      command <span class="token string">%&#123; hexo g &#125;</span>
    <span class="token keyword">end</span>
    hexo_generate
  <span class="token keyword">end</span>

  desc <span class="token string">"deploy hexo posts"</span>
  task <span class="token symbol">:deploy</span> <span class="token keyword">do</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hexo_deploy</span></span>
      puts <span class="token string">"Deploying posts to git"</span>
      command <span class="token string">%&#123; hexo d &#125;</span>
    <span class="token keyword">end</span>
    hexo_deploy
  <span class="token keyword">end</span>

<span class="token keyword">end</span>
<span class="token comment"># For help in making your deploy script, see the Mina documentation:</span>
<span class="token comment">#</span>
<span class="token comment">#  - https://github.com/mina-deploy/mina/tree/master/docs</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>cname解析</title>
    <url>/cname-record-resolution/</url>
    <content><![CDATA[<p>原来多次cname解析一个域名到最终要绑定的域名上，比如A cname到 B, B又cname到C，那么C上最终收到的A的域名。这也难怪s3上提示没有绑定A 相关的bucket了。如果C要求只解析备案域名，B备案，而A没有备案，A应该也不能被解析吧 ​​​​A</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker运行的一些问题</title>
    <url>/run-docker-issus/</url>
    <content><![CDATA[<ul>
<li>在docker里运行docker绝对是个坑，在mac os上这么做简直就是坑上加坑</li>
<li>docker服务的假死真是坑啊，命令没有任何输出，也没有错误提示。只能关闭docker进程，重启，问题解决 ​​​​</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Aws ec2 secure strategy</title>
    <url>/aws-ec2-secure-strategy/</url>
    <content><![CDATA[<p>AWS EC2 安全策略，出站的意思是EC2要访请求问外部数据，而不是把对网站的请求response返回给用户的意思</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>ec2</tag>
      </tags>
  </entry>
  <entry>
    <title>域名迁移</title>
    <url>/domain-transference-issus/</url>
    <content><![CDATA[<ol>
<li><p>域名没有备案的多米诺骨牌被推到了，第一天域名不能访问，第二天图片服务也被停止。总结：在正常备案的情况下，一定要保证域名可以正常访问呀，就是那个yourdomain.com，不带www的那个</p>
</li>
<li><p>域名转出服务商的过程真是漫长，本来想转到GoDadyy的，但续费真的是太贵了，且whois保护也要收费，价格也是不菲，只能放弃了</p>
</li>
<li><p>最终因为界面体验，还是使用了GoDadyy</p>
</li>
<li><p>换来换去觉得还是万网的域名管理系统比较好用 ​​​，其它的要么界面不友好，要么设置逻辑太奇葩，比如不用自带的DNS就不能设置域名解析</p>
</li>
<li><p>阿里云的cn域名不提供隐私保护，也是醉了，是不让提供这个功能么</p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>让Aws S3 只同步 Hexo 内容有变化的文件</title>
    <url>/aws-s3-sync-and-hexo/</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>发现Aws S3 sync 在同步Hexo 生成的网站内容时，几乎总是同步所有文件，那些内容没有发生改变但文件最后修改时间发生改变的文件也被同步了，造成了Aws S3写操作流量的浪费，原因如下</p>
<ol>
<li><p>Aws S3 sync 命令的同步的策略</p>
</li>
<li><p>判断文件大小是否发生变化</p>
</li>
<li><p>比较文件最后的修改日期</p>
</li>
</ol>
<p>  如果某个文件的这两项中的其中一项发生变化，则这个文件被同步<br>2. Hexo生成文章</p>
<p>  即使仅更新一篇文章，使用<code>hexo g</code>命令后，几乎所有文件的最后修改时间都被更新了。目前来看，Hexo更新内容的算法还有待改进，有些地方还是有优化空间的</p>
<p>由于以上两点，造成了Aws S3写流量的浪费</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>只同步内容有改变的文件</p>
<ol>
<li>通过<code>git diff</code> 命令找出此次提交发生变化的文件。这里不用<code>git log</code>的原因是log命令会有多余的输出，不利于后面编写脚本</li>
<li>使用<code>aws s3 cp</code>把发生变化的文件同步到Aws S3，这样就大大节省了Aws S3写操作的流量</li>
</ol>
<h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token function">git</span> <span class="token function">diff</span> HEAD~1 HEAD --stat --name-only <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;cmd="aws s3 cp "<span class="token variable">$1</span>" s3://your-butket/"<span class="token variable">$1</span>" --exclude '</span>.gitignore<span class="token string">'";system(cmd)&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>放到项目根目录执行，此脚本只会同步那些内容有修改的文件，内容没有修改，但最后修改时间被更新的文件不会被同步，大大节省了Aws S3的写流量</p>
<h3 id="后记，奇怪的git-diff输出"><a href="#后记，奇怪的git-diff输出" class="headerlink" title="后记，奇怪的git diff输出"></a>后记，奇怪的git diff输出</h3><p>发现<code>git diff --stat</code>输出时，如果输出到屏幕，那些长路径名是可以正常显示的，但如果输出到文件，则长路径就会被省略显示。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 长路径名</span>
looooooooooong_path_name/index.html

<span class="token comment"># 在输出到屏幕时是可以正常显示的</span>
<span class="token operator">></span> <span class="token function">git</span> <span class="token function">diff</span> --stat
<span class="token operator">></span> looooooooooong_path_name/index.html

<span class="token comment"># 但如果输出到文件，路径名就变成了:".../index.html"</span>
<span class="token operator">></span> <span class="token function">git</span> <span class="token function">diff</span> --stat <span class="token operator">></span> diff.log
<span class="token operator">></span> <span class="token function">cat</span> diff.log
<span class="token operator">></span> <span class="token punctuation">..</span>./index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>为了解决这个问题，需要执行 <code>git diff --stat --name-only</code>， 输出到文件也可以正常显示长路径名了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> <span class="token function">git</span> <span class="token function">diff</span> --stat --name-only <span class="token operator">></span> diff.log
<span class="token operator">></span> <span class="token function">cat</span> diff.log
<span class="token operator">></span> looooooooooong_path_name/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>s3</tag>
      </tags>
  </entry>
  <entry>
    <title>git rebase 与 git reset的应用</title>
    <url>/git-rebase-vs-git-reset/</url>
    <content><![CDATA[<h3 id="常用的应用场景"><a href="#常用的应用场景" class="headerlink" title="常用的应用场景"></a>常用的应用场景</h3><ol>
<li><p>合并提交</p>
</li>
<li><p>去除不要的提交</p>
</li>
</ol>
<h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><h3 id="场景1，合并多个提交"><a href="#场景1，合并多个提交" class="headerlink" title="场景1，合并多个提交"></a>场景1，合并多个提交</h3><p>有 A B C D E F 6个提交，当前分支develop的最新提交为F，C D E F都是某一功能的持续提交，现需要把C到F的commit合并成一个commit，去除多余提交</p>
<ol>
<li>方法一: <code>git reset</code></li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset B --soft
<span class="token function">git</span> ci -m <span class="token string">"merge C to F"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="2">
<li>方法二: <code>git rebase</code></li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase --onto B C^ develop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="场景2，去掉D提交"><a href="#场景2，去掉D提交" class="headerlink" title="场景2，去掉D提交"></a>场景2，去掉D提交</h3><p>此时，<code>git reset</code>已经不再适合这个场景</p>
<p>使用<code>git rebase</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase --onto C E^ develop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><ol>
<li><code>git rebase</code> 语法</li>
</ol>
<p>  <code>git rebase --onto &lt;onbase&gt; &lt;since&gt; &lt;till&gt;</code><br>  <code>git rebase --onto &lt;onbase&gt; &lt;since&gt;</code><br>  <code>git rebase &lt;since&gt; &lt;till&gt;</code><br>  <code>git rebase &lt;since&gt;</code><br>  <code>git rebase -i</code></p>
<p>  onbase为要架接到的commit, since表示不包括自身到till的所有提交</p>
<p>  <code>git rebase --continue</code> # 解决冲突后使用，以完成rebase<br>  <code>git rebase --skip</code>     # 跳过当前commit，进行下一个commit的合并<br>  <code>git rebase --abort</code>    # 放弃此次操作，还原工作区</p>
<ol start="2">
<li><code>git rebase</code>的莫名冲突</li>
</ol>
<p>  对于场景二： 使用<code>git rebase</code>可能出现冲突（感觉不应该出现冲突的，对此不是很理解，难道是因为丢弃D后使查找链C-D-E-F断裂造成git认为这两个commit需要合并，是因为E无法知道C是它的祖先吗）</p>
<p>  在解决冲突后，使用<code>git rebase --continue</code>完成rebase操作</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>文字正确显示的条件</title>
    <url>/correctly-display-utf8/</url>
    <content><![CDATA[<p>文字正确显示的条件</p>
<ul>
<li>正确的字符集</li>
<li>正确的文字编码方式</li>
</ul>
<p>同一个字符集可以有多用编码方式。unicode字符集有UTF-8/UTF-16/UTF-32三种编码方式，以UTF-8编码的字符，用UTF-16解码是错误的。用UTF-8解码，但本地没有安装unicode字符集，显示的也是乱码</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言 第7章</title>
    <url>/golang-study-programming-ch7/</url>
    <content><![CDATA[<p>发现自己在看GoPL的时候，居然上来就选择从一个最长的章节开始(by accident)，第7章，接口，这个章节居然有15个小节，是全书里最多的。真不是特意选择从一个最长的章节开始的，早知道就换短一点的了。也不至于一开始就面对这么难的挑战</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 批量插入数据</title>
    <url>/mysql-bluk-insert/</url>
    <content><![CDATA[<h2 id="导入大数据到表"><a href="#导入大数据到表" class="headerlink" title="导入大数据到表"></a>导入大数据到表</h2><p>向数据库中插入3万条数据</p>
<h3 id="单个插入数据"><a href="#单个插入数据" class="headerlink" title="单个插入数据"></a>单个插入数据</h3><p>如果每个数据单独插入，效率很低，每个插入都产生一个事务，写入效率低</p>
<h3 id="批量插入数据"><a href="#批量插入数据" class="headerlink" title="批量插入数据"></a>批量插入数据</h3><ul>
<li><p>每1000条插入一次，只产生一个事件，降低了事务的生成，提高了效率</p>
</li>
<li><p>具体方法</p>
<ol>
<li><p>把多条插入语句拼成一条</p>
</li>
<li><p>手动开启一个事务，在插入1000条数据后，提交事务。</p>
<p>这样做可以减少<code>binlog</code>的生成次数，但<code>redolog</code>不一定减少</p>
</li>
</ol>
</li>
</ul>
<h3 id="批量-vs-单个插入"><a href="#批量-vs-单个插入" class="headerlink" title="批量 vs 单个插入"></a>批量 vs 单个插入</h3><ul>
<li><p>单个插入效率很低，30 * 1000 条记录用时 1分钟</p>
</li>
<li><p>批量插入， 每1000条插入一次，效率很高，用时7.99秒</p>
<p><code>5.54s user 0.54s system 77% cpu 7.799 total</code></p>
<p><code>5.38s user 0.48s system 78% cpu 7.452 total</code></p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>插入大量数据时，应减少事务的提交，让多个插入在一个事务中完成，从而提高插入数据的效率</p>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">ImportTradelog</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">import</span></span><span class="token punctuation">(</span>date<span class="token punctuation">)</span>
    <span class="token comment"># 导入30天的数据</span>
    <span class="token number">30.</span>times <span class="token keyword">do</span> <span class="token operator">|</span>offset<span class="token operator">|</span>
      datas <span class="token operator">=</span> init_data<span class="token punctuation">(</span>date <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">*</span> offset<span class="token punctuation">)</span>
      puts datas

      <span class="token comment"># 批量插入， 每1000条插入一次，效率很高，用时7.99秒</span>
      <span class="token comment"># 5.54s user 0.54s system 77% cpu 7.799 total</span>
      <span class="token comment"># 5.38s user 0.48s system 78% cpu 7.452 total</span>
      <span class="token constant">Tradelog</span><span class="token punctuation">.</span>bulk_insert set_size<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> values<span class="token punctuation">:</span> datas
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token comment"># 每天导入1000条数据</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">init_data</span></span><span class="token punctuation">(</span>day<span class="token punctuation">)</span>
    datas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token number">1000.</span>times <span class="token keyword">do</span> <span class="token operator">|</span>index<span class="token operator">|</span>
      <span class="token comment"># 插入效率很低，30 * 1000 条记录用时 1分钟</span>
      <span class="token comment"># date = &#123;tradeid: tradeid, operator: operator, t_modified: t_modified&#125;</span>
      <span class="token comment"># Tradelog.create(date)</span>
      datas <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token punctuation">&#123;</span>
        tradeid<span class="token punctuation">:</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>day<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token delimiter tag">&#125;</span></span><span class="token interpolation"><span class="token delimiter tag">#&#123;</span>format<span class="token punctuation">(</span><span class="token string">'%04d'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token delimiter tag">&#125;</span></span>"</span><span class="token punctuation">,</span>
        operator<span class="token punctuation">:</span> rand<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        t_modified<span class="token punctuation">:</span> <span class="token punctuation">(</span>day <span class="token operator">+</span> <span class="token number">60</span> <span class="token operator">*</span> index<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token keyword">end</span>

    datas
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo安装Next主题 Rss 侧边栏</title>
    <url>/use-next-theme/</url>
    <content><![CDATA[<p>无意间发现 <code>Hexo</code> 的 <code>Next</code> 主题也很好看，之前的 <code>Yelee</code> 主题使用了好久，决定换成 <code>Next</code>。在配置过程中遇到不少问题，主要有两点值得分享：</p>
<ul>
<li>不要直接在主题配置文件上进行修改</li>
<li>修改RSS显示位置使其在首页显示</li>
</ul>
<h3 id="配置主题文件"><a href="#配置主题文件" class="headerlink" title="配置主题文件"></a>配置主题文件</h3><p>根据 Hexo 官方的推荐，不要直接修改主题的配置文件</p>
<blockquote>
<p>The file should be placed in your site folder, both <code>yml</code> and <code>json</code> are supported. <code>theme</code> inside <code>_config.yml</code> must be configured for Hexo to read <code>_config.[theme].yml</code></p>
</blockquote>
<p>根据推荐执行以下操作: </p>
<ol>
<li>配置主题为 Next 主题</li>
</ol>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># _config.yml</span>
theme: <span class="token string">"next"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="2">
<li><p>在 site 根目录新建 <code>_config.next.yml</code>文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> _config.next.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>打开 <code>theme/next/_config.yml</code>把需要修改的选项 copy 到 <code>_config.next.yml</code>中</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># _config.next.yml
# 设置网站图标
favicon:
  small: &#x2F;favicon.ico
  medium: &#x2F;favicon.ico
  apple_touch_icon: &#x2F;apple-touch-icon.png
  safari_pinned_tab: &#x2F;apple-touch-icon.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>hexo启动时，会自动合并 <code>_config.next.yml</code> 与<code>theme/next/_config.yml</code> 的设置内容，从而达到配置主题的作用。 </p>
</li>
</ol>
<p>不直接修改<code>theme/next/_config.yml</code>的好处是，当拉取新的更新时，不会因修改了<code>_config.yml</code>而发生冲突。（每个主题都是一个独立的 <code>git</code>项目）</p>
<h3 id="修改RSS显示位置"><a href="#修改RSS显示位置" class="headerlink" title="修改RSS显示位置"></a>修改RSS显示位置</h3><p>看到网上说Rss的显示位置由首页侧边栏的位置移动到了每篇文章的最底部，这显然是不适合的，因为订阅不是按文章订阅，而是直接在首页中订阅。</p>
<p>自定义RSS到侧边栏：请先确认已经安装 <code>hexo-generator-feed</code>插件</p>
<ol>
<li>删除文章底部的Rss(整个 follow me 设置都删除)</li>
</ol>
  <pre class="line-numbers language-njk" data-language="njk"><code class="language-njk"># theme&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post.njk

# 删除以下代码
&#123;%- if theme.follow_me %&#125;
  &#123;&#123; partial(&#39;_partials&#x2F;post&#x2F;post-followme.njk&#39;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;
&#123;%- endif %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li><p>修改 Rss 样式</p>
<pre class="line-numbers language-njk" data-language="njk"><code class="language-njk"># theme&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;post&#x2F;post-followme.njk

&lt;div class&#x3D;&quot;followme&quot;&gt; # 修改为 &lt;div class&#x3D;&quot;&quot;&gt;
  &lt;span&gt;&#123;&#123; __(&#39;follow_me.welcome&#39;) &#125;&#125;&lt;&#x2F;span&gt; # 删除这一行
  &lt;div class&#x3D;&quot;social-list&quot;&gt; # #修改为 &lt;div class&#x3D;&quot;&quot;&gt;
  # 省略部分源码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>添加 Rss 到侧边栏(其实就是整个的 follwe me)</p>
<pre class="line-numbers language-njk" data-language="njk"><code class="language-njk"># theme&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;sidebar&#x2F;site-overview.njk
&#123;%- if theme.follow_me %&#125;
  &#123;&#123; partial(&#39;_partials&#x2F;post&#x2F;post-followme.njk&#39;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;
&#123;%- endif %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>在站点配置文件中打开 Rss 设置</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># _config.yml</span>
<span class="token key atrule">follow_me</span><span class="token punctuation">:</span>
  <span class="token key atrule">RSS</span><span class="token punctuation">:</span> /rss2.xml <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>rss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>重启站点即可，就可以看到 Rss 显示在侧边栏了</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>git 知识补充</title>
    <url>/git-learning-supplement/</url>
    <content><![CDATA[<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ol>
<li><p>git 可以只提交文件的部分内容， git add -p,称之为hunk, sourcetree也可以进行设置</p>
</li>
<li><p>分支改名<br>git branch -m cat tiger</p>
</li>
<li><p>分支合并后产生的commit, A合并B，commit 信息中，父提交记录顺序，parents : A, B</p>
<p>A在前，B在后，表示是A 合并的B</p>
</li>
<li><p>git如何判断分支是否可以删除<br>当前分支所指向的commit ，没有其它commit指向它（这个提交(分支)还没有被合并），或只有当前分支指向它，没有其它分支指向它时，在删除这个分支时就会有提示不能直接删除</p>
</li>
<li><p>rebase 后，对应commit 值是否发生变化<br>看情况，嫁接到其它commit 之上的commit 的值会发生变化，因为其父提交发生了变化，同理，在这个commit 之后的提交的值也发生变化<br>A B C D E F，把F嫁接到其它 COMMIT后，A到E的COMMIT的值都发生变化</p>
<p>修改现有COMMIT 的注释，也会发生这样的连锁反应</p>
</li>
<li><p>rebase 的其他用途<br>修改历史提交注释 r选项<br>合并多个提交 s 选项<br>把一个提交拆分成多个commit 在操作列表使用使用 edit<br>在commit 之间添加新的commit edit选项<br>调整commit 之间的顺序 直接在列表里调整，<br>删除commit 在列表里删除相关行过使用drop,删除后对它之后commit 的影响如何</p>
</li>
<li><p>空目录无法被添加到git<br>因为根据算法，添加的对象必须要有内容，以供sha1算法使用</p>
</li>
<li><p>合并后再使用 <code>git rebase </code> 使提交成为一条直线</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge upstream-master
Auto-merging layout/_partials/sidebar/site-overview.njk
Auto-merging layout/_partials/post/post-followme.njk
Merge made by the <span class="token string">'recursive'</span> strategy.
 layout/_partials/header/menu-item.njk      <span class="token operator">|</span> <span class="token number">5</span> +----
 layout/_partials/page/breadcrumb.njk       <span class="token operator">|</span> <span class="token number">6</span> +-----
 layout/_partials/post/post-followme.njk    <span class="token operator">|</span> <span class="token number">2</span> +-
 layout/_partials/sidebar/site-overview.njk <span class="token operator">|</span> <span class="token number">2</span> +-

<span class="token function">git</span> slog --graph
*   b1b3e13 <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> release<span class="token punctuation">)</span> Merge branch <span class="token string">'upstream-master'</span> into release
<span class="token operator">|</span><span class="token punctuation">\</span>
<span class="token operator">|</span> * d51ca0e <span class="token punctuation">(</span>upstream/master, upstream-master<span class="token punctuation">)</span> Fix: handle invalid config
* <span class="token operator">|</span> 369c5b5 <span class="token punctuation">(</span>origin/release, origin/master, origin/HEAD, master<span class="token punctuation">)</span> Resolve conflicts
<span class="token operator">|</span>/
* d6f344f Refactor sidebar-panel using flex layout
* edefcda Add NProgress <span class="token punctuation">(</span><span class="token comment">#79)</span>

<span class="token comment"># 把前分支作为基础分枝, 把 upstream-master 分支的提交嫁接在其上面</span>
<span class="token function">git</span> rebase
First, rewinding <span class="token function">head</span> to replay your work on <span class="token function">top</span> of it<span class="token punctuation">..</span>.
Applying: Fix: handle invalid config
Using index info to reconstruct a base tree<span class="token punctuation">..</span>.
M	layout/_partials/post/post-followme.njk
M	layout/_partials/sidebar/site-overview.njk
Falling back to patching base and <span class="token number">3</span>-way merge<span class="token punctuation">..</span>.
Auto-merging layout/_partials/sidebar/site-overview.njk
Auto-merging layout/_partials/post/post-followme.njk

<span class="token function">git</span> slog --graph
* 217e224 <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> release<span class="token punctuation">)</span> Fix: handle invalid config
* 369c5b5 <span class="token punctuation">(</span>origin/release, origin/master, origin/HEAD, master<span class="token punctuation">)</span> Resolve conflicts <span class="token comment"># 以这个提交做为 rebase</span>
* d6f344f Refactor sidebar-panel using flex layout
* edefcda Add NProgress <span class="token punctuation">(</span><span class="token comment">#79)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>使用merge出现了分支线路</li>
<li>rebase后，分支线路消失，成为一条直线。 是 以当前分支的最TOP的那个(369c5b5)提交做为rebase，重放合并进来的分支上的提交的</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>binlog.index 文件内容</title>
    <url>/mysql-binlog-index/</url>
    <content><![CDATA[<h3 id="binlog-index文件内容"><a href="#binlog-index文件内容" class="headerlink" title="binlog.index文件内容"></a><code>binlog.index</code>文件内容</h3><p>记录了<code>binlog</code>文件的具体路径，在MySQL启动时，会找到<code>binlog.index</code>文件，然后读取它里面的条目，从而读取<code>binlog</code>文件。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /mysql/3306/data/master.index

/mysql/3306/data/master.000001
/mysql/3306/data/master.000002
/mysql/3306/data/master.000003
./master.000004
./master.000005<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li><code>binlog</code>文件的路径可以是相对路径，也可以是绝对路径</li>
<li>如果是绝对路径，当文件被移动到其它地方时，只能手动修改对应的路径，否则MySQL在启动时，会报找不到文件路径的错误</li>
</ol>
<h3 id="设置binlog文件路径"><a href="#设置binlog文件路径" class="headerlink" title="设置binlog文件路径"></a>设置<code>binlog</code>文件路径</h3><p>可以在 <code>my.cnf</code>中设置<code>binlog</code>的文件路径</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[mysqld]
log-bin&#x3D;master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>或设置为绝对路径</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
log-bin<span class="token operator">=</span>/mysql/3306/data/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="参数-log-bin身兼多职"><a href="#参数-log-bin身兼多职" class="headerlink" title="参数 log-bin身兼多职"></a>参数 <code>log-bin</code>身兼多职</h3><p>设置后生效多个参数</p>
<ol>
<li>表示启用 <code>binlog</code>功能</li>
<li>同时设置 <code>binlog.index</code>的文件名</li>
<li>同时设置<code>binlog</code>的文件名</li>
</ol>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like &#39;%log_bin%&#39;;
+---------------------------------+----------------------------------------------+
| Variable_name                   | Value                                        |
+---------------------------------+----------------------------------------------+
| log_bin                         | ON                                           |
| log_bin_basename                | &#x2F;mysql&#x2F;3306&#x2F;data&#x2F;master       |
| log_bin_index                   | &#x2F;mysql&#x2F;3306&#x2F;data&#x2F;master.index |
| log_bin_trust_function_creators | OFF                                          |
| log_bin_use_v1_row_events       | OFF                                          |
| sql_log_bin                     | ON                                           |
+---------------------------------+----------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="binlog文件的读取"><a href="#binlog文件的读取" class="headerlink" title="binlog文件的读取"></a><code>binlog</code>文件的读取</h3><p>MySQL在启动时会读取<code>data</code>目录下的所有以<code>.index</code>后缀的文件(默认值)，然后在读取每个<code>index</code>文件中的条目</p>
<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><blockquote>
<p>The default location for binary log files and the binary log index file is the data directory. You can use the <a href="https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#option_mysqld_log-bin"><code>--log-bin</code></a> option to specify an alternative location, by adding a leading absolute path name to the base name to specify a different directory. When the server reads an entry from the binary log index file, which tracks the binary log files that have been used, it checks whether the entry contains a relative path. If it does, the relative part of the path is replaced with the absolute path set using the <a href="https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#option_mysqld_log-bin"><code>--log-bin</code></a> option. An absolute path recorded in the binary log index file remains unchanged; in such a case, the index file must be edited manually to enable a new path or paths to be used. The binary log file base name and any specified path are available as the <a href="https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_log_bin_basename"><code>log_bin_basename</code></a> system variable.</p>
</blockquote>
<p>只摘录了一部分，更全面的内容可到官网查看</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>What does kill 0 do</title>
    <url>/what-does-kill-0-do/</url>
    <content><![CDATA[<h3 id="What-does-kill-0-do"><a href="#What-does-kill-0-do" class="headerlink" title="What does kill -0 ... do?"></a>What does <code>kill -0 ...</code> do?</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">kill</span> -0 <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /path/to/file.pid<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token punctuation">..</span>. <span class="token keyword">do</span> something <span class="token punctuation">..</span>.
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="kill-1"><a href="#kill-1" class="headerlink" title="kill(1)"></a><em>kill(1)</em></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">man</span> <span class="token number">1</span> <span class="token function">kill</span>
<span class="token punctuation">..</span>.
If sig is <span class="token number">0</span>, <span class="token keyword">then</span> no signal is sent, but error checking is still performed.
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="kill-2"><a href="#kill-2" class="headerlink" title="kill(2)"></a><em>kill(2)</em></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">man</span> <span class="token number">2</span> <span class="token function">kill</span>
<span class="token punctuation">..</span>.
If sig is <span class="token number">0</span>, <span class="token keyword">then</span> no signal is sent, but error checking is still performed<span class="token punctuation">;</span> 
this can be used to check <span class="token keyword">for</span> the existence of a process ID or process 
group ID.
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>So signal 0 will not actually in fact send anything to your process’s PID, but will check whether you have permissions to do so.</p>
<h3 id="Where-might-this-be-useful"><a href="#Where-might-this-be-useful" class="headerlink" title="Where might this be useful?"></a>Where might this be useful?</h3><p>One obvious place would be if you were trying to determine if you had permissions to send signals to a running process via <code>kill</code>. You could check prior to sending the actual <code>kill</code> signal that you want, by wrapping a check to make sure that <code>kill -0 &lt;PID&gt;</code> was first allowed.</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Say a process was being run by root as follows:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">sleep</span> <span class="token number">2500</span> <span class="token operator">&amp;</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">15693</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>Now in another window if we run this command we can confirm that that PID is running.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pgrep <span class="token function">sleep</span>
<span class="token number">15693</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>Now let’s try this command to see if we have access to send that PID signals via <code>kill</code>.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">kill</span> -0 <span class="token variable"><span class="token variable">$(</span>pgrep <span class="token function">sleep</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">"You're weak!"</span><span class="token punctuation">;</span> <span class="token keyword">fi</span>
bash: kill: <span class="token punctuation">(</span><span class="token number">15693</span><span class="token punctuation">)</span> - Operation not permitted
You're weak<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>So it works, but the output is leaking a message from the <code>kill</code> command that we don’t have permissions. Not a big deal, simply catch STDERR and send it to <code>/dev/null</code>.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">kill</span> -0 <span class="token variable"><span class="token variable">$(</span>pgrep <span class="token function">sleep</span><span class="token variable">)</span></span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">"You're weak!"</span><span class="token punctuation">;</span> <span class="token keyword">fi</span>
You're weak<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="Complete-example"><a href="#Complete-example" class="headerlink" title="Complete example"></a>Complete example</h3><p>So then we could do something like this, <code>killer.bash</code>:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>pgrep <span class="token function">sleep</span><span class="token variable">)</span></span>
<span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">kill</span> -0 <span class="token variable">$PID</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span class="token punctuation">;</span> <span class="token keyword">then</span> 
  <span class="token builtin class-name">echo</span> <span class="token string">"you don't have permissions to kill PID:<span class="token variable">$PID</span>"</span>
  <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">fi</span>

<span class="token function">kill</span> -9 <span class="token variable">$PID</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Now when I run the above as a non-root user:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ~/killer.bash 
you don't have permissions to <span class="token function">kill</span> PID:15693

$ <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>
<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>However when it’s run as root:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ~/killer.bash 

$ <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>
<span class="token number">0</span>

$ pgrep <span class="token function">sleep</span>
$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>定制Ubuntu命令行提示符</title>
    <url>/custom-ubuntu-cmd-shell/</url>
    <content><![CDATA[<p>ubuntu命令行下默认显示当前路径的完整路径，当进入到一个很深的目录时，一行往往显示不下。</p>
<p>为了不让文件路径占用更多的命令行空间，我们可以让shell只显示当前目录，而不是完整路径。</p>
<p>操作方法：</p>
<blockquote>
<ol>
<li>打开主目录下的.bashrc文件(它是个隐藏文件，所以不要忘记加上前面那个点)</li>
<li>找到PS1变量，把等号后面的“/w”所为大写的W。<code>eg:PS1=&#39;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ &#39;</code></li>
<li>重新载入设置即可生效</li>
</ol>
</blockquote>
<p>当然也可以自定义shell的显示样式：如<br><code>PS1=&#39;$&#123;debian_chroot:+($debian_chroot)&#125;\u:\W\$ &#39;</code></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>irb中使用方向键</title>
    <url>/irb-cmd-use-fang-xiang-jian/</url>
    <content><![CDATA[<p>我们在irb中习惯使用方向键来重复输入过的命令行。</p>
<p>如果在使用时出现“^[[D” (就是方向键失效) ，是因为在编译安装ruby时没有安装readline.so库，这种情况在linux下比较容易出现。</p>
<p>由于没有安装readline.so库，也会造成在使用console时启动失败。</p>
<p>解决方法：进入ruby源文件包中的ext文件夹中，进入readline文件夹进行编译安装，即可解决问题。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby initialize 返回对象</title>
    <url>/ruby-initialize-back-class-self/</url>
    <content><![CDATA[<p>initialize 返回的对象为类的实例，即使在此方法中写入其它类，也会返回类本身的实例</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Hi</span>
  <span class="token keyword">include</span> <span class="token constant">Module2</span>
  <span class="token keyword">include</span> <span class="token constant">Module1</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
    <span class="token constant">HelloWorld</span><span class="token punctuation">.</span><span class="token keyword">new</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">back_hello_world</span></span> <span class="token comment">#  back HelloWorld instance</span>
    <span class="token constant">HelloWorld</span><span class="token punctuation">.</span><span class="token keyword">new</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu命令行提示符参数</title>
    <url>/ubuntu-cmd-shell-args/</url>
    <content><![CDATA[<p>Ubuntu的命令行是可以定制的，可以使用下面的命令来显示当前的提示符设置：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$PS1</span>
<span class="token builtin class-name">echo</span> <span class="token environment constant">$PS2</span>
修改~/.bashrc文件中的<span class="token environment constant">PS1</span>行即可,默认为<span class="token variable">$&#123;debian_chroot<span class="token operator">:+</span>($debian_chroot)&#125;</span><span class="token punctuation">\</span>u@<span class="token punctuation">\</span>h:<span class="token punctuation">\</span>w<span class="token punctuation">\</span>$

<span class="token environment constant">$PS1</span>是主要的提示符设置，在ubuntu一般为：

<span class="token variable">$&#123;debian_chroot<span class="token operator">:+</span>($debian_chroot)&#125;</span><span class="token punctuation">\</span>u@<span class="token punctuation">\</span>h:<span class="token punctuation">\</span>w<span class="token punctuation">\</span>$

<span class="token environment constant">$PS2</span>是次要提示符，一般为“<span class="token operator">></span>”。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>具体的提示符，按分类含义如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span>u 当前登录用户名
<span class="token punctuation">\</span>h 当前计算机名称（譬如ubuntu）
<span class="token punctuation">\</span>H 当前计算机的域名全程，譬如（ubuntu.ubuntu.com<span class="token punctuation">)</span>
<span class="token punctuation">\</span>w 当前目录
<span class="token punctuation">\</span>W 当前目录的basename
<span class="token punctuation">\</span>$ 一般用户为$，root用户为<span class="token operator">></span>

（可以看到Ubuntu缺省的提示符设置）

时间显示
<span class="token punctuation">\</span>t 当前时间（24小时制，HH:MM:SS 分别代表 小时：分钟：秒）
<span class="token punctuation">\</span>T 当前时间（12小时制）
<span class="token punctuation">\</span>@ 当前时间（AM/PM显示）
<span class="token punctuation">\</span>d 当前日期
Shell信息：
<span class="token punctuation">\</span>v Bash版本
<span class="token punctuation">\</span>V Bash的发布版本号
<span class="token punctuation">\</span>S Shell名称
<span class="token punctuation">\</span><span class="token operator">!</span> Bash命令的历史编号
<span class="token punctuation">\</span>j job序号
<span class="token punctuation">\</span>l Shell的终端名称

控制符：
<span class="token punctuation">\</span><span class="token punctuation">\</span> <span class="token punctuation">\</span>
<span class="token punctuation">\</span>n 换行
<span class="token punctuation">\</span>r
<span class="token punctuation">\</span><span class="token punctuation">]</span> <span class="token punctuation">]</span>
<span class="token punctuation">\</span>e Esc
<span class="token punctuation">\</span><span class="token punctuation">[</span> <span class="token punctuation">[</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装vmware tools</title>
    <url>/ubuntu-install-vmware-tools/</url>
    <content><![CDATA[<p>一、安装系统编译环境</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span>  <span class="token function">install</span> build-essential
build-essential<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>依赖:</p>
<blockquote>
<p>libc6-dev<br><libc-dev> libc6-dev<br>g++<br>make<br>dpkg-dev</p>
</blockquote>
<p>安装完成后，我们就有了g++,make，在安装Vmware-tool时，会用到。</p>
<p>二、查看是否已经安装了相应的 linux-headers</p>
<ul>
<li><p>查看系统使用的系统发行编号<br>运行  <code>uname -r</code><br>返回 <code>2.6.27-11-generic</code></p>
</li>
<li><p>安装 linux-headers-2.6.27-11-generic<br><code>apt-get install linux-headers-2.6.27-11-generic</code><br>被安装到 <code>/usr/src/linux-headers-2.6.27-11-generic</code></p>
</li>
</ul>
<span id="more"></span>

<p>三、安装VMware-tools<br>若是桌面环境可以直接从光盘解压 ：vmware-linux-tools.tar.gz 包<br>文字模式下挂载光驱</p>
<p>运行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> -t iso9660 /dev/cdrom /mnt
<span class="token comment"># 加载CDROM设备，这时如果进入 /mnt 目录下，你将会发现多了一个文件：vmware-linux-tools.tar.gz。这就是WMWARE TOOLS的LINUX软件包。</span>

<span class="token function">cp</span> ./vmware-linux-tools.tar.gz  /home/g
<span class="token function">umount</span> /dev/cdrom

<span class="token function">tar</span> zxpf vmware-linux-tools.tar.gz
<span class="token builtin class-name">cd</span>  vmware-linux-tools
./vmware-install.pl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>安装开始</p>
<blockquote>
<p>对应的进行相关选择即可，注意，切不可一路回车，因为有的选项默认是[no]，这时你若回了车，则表时不安装，可能会失去相应功能。</p>
</blockquote>
<blockquote>
<p>在选择 /usr/src/linux/include 时，就手动录入为 /usr/src/linux-headers-2.6.27-11-generic/include，就是我们刚才手动安装的headers-2.6.27-11-generic。如果选择默路径<br>则系统会提示路径不正确。你仍然需要手动安装。</p>
</blockquote>
<p>此安装过程主要针对ubuntu 8.10 server。ubuntu 8.10 desktop 安装时要相对简单，VMware所有依赖的软件包大部分都已经安装好了。</p>
<p>对于ubuntu10.10 还可能需要进行下面的操作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/src/2.6.35-22-generic/include
<span class="token function">cp</span> -p generated/utsrelease.h linux/utsrelease.h
<span class="token function">cp</span> -p generated/autoconf.h linux/autoconf.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>最后就是在”首选项 -&gt; 启动应用程序” 里把vmware-toolbox添加进去就可以了</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Bash on windows</title>
    <url>/git-bash-on-windows/</url>
    <content><![CDATA[<p>在shell下完全可以使用linux中的命令，并且支持色彩输出</p>
<p><a href="//img.gagahappy.cn/blog/2011/02/21.jpg"><img src="//img.gagahappy.cn/blog/2011/02/21.jpg" title="Git Bash on windows"></a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Yet Another Related Posts Plugin 简单教程</title>
    <url>/how-to-use-yet-another-related-posts-plugin/</url>
    <content><![CDATA[<p>YARPP在首次使用时往往会出现无法显示关联文章的情况（即，没有找到和当前浏览文章相关的文章）</p>
<p>大多数原因都是由于“Relatedness options”选项没有设置正确造成的。</p>
<p><a href="//img.gagahappy.cn/blog/2011/02/112.jpg"><img src="//img.gagahappy.cn/blog/2011/02/112.jpg" title="Relatedness option"></a></p>
<span id="more"></span>

<p>一、Relatedness options 设置：</p>
<ol>
<li><p>”Match threshol“：即匹配指数，匹配指数越高，搜索到的关联文章就越精确，但文章数量也会越少，反之亦然。这里建议可以把数值设置的低一些，例如：1</p>
</li>
<li><p>选择从哪里进行匹配：分别是 titles, bodies, tags, categories</p>
</li>
<li><p>选择关联程度：do not consider, consider</p>
</li>
</ol>
<blockquote>
<p>在这里本博建议的设置是：<br>Match threshol: 1<br>titles, bodies: do not consider<br>tags：require at least one tag in common<br>catetories： consider<br>使用这个设置，关联文章一般情况下就都能显示出来了。</p>
</blockquote>
<p>二、让关联文章在feed中显示<br>默认设置是不在在feed中显示关联文章，需要构选” Display related posts in feeds“才可以</p>
<p><a href="//img.gagahappy.cn/blog/2011/02/a.jpg"><img src="//img.gagahappy.cn/blog/2011/02/a.jpg" title="Display options for RSS"></a></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>为你的类混入Enumerable</title>
    <url>/mix-enumerable-into-your-class/</url>
    <content><![CDATA[<p>在你的聚合类中混入Enumerable后，如果实现了 each 方法，并且为每个成员实现在了&lt;=&gt;，那么你的类瞬间就拥有了 sort，max， min等方法，如果没有实现&lt;=&gt;，你的类也具有了include，any，all等方法!</p>
<p><a href="//img.gagahappy.cn/blog/2011/02/111.jpg"><img src="//img.gagahappy.cn/blog/2011/02/111.jpg" title="Enumerable"></a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>phpMyAdmin 配置文件现在需要一个短语密码</title>
    <url>/phpmyadmin-need-a-phrase-password/</url>
    <content><![CDATA[<p>上传安装phpMyAdmin后，出现”配置文件现在需要一个短语密码“的错误提示，上网查找，解决方法如下</p>
<p>修改phpmyadmin/libraries/config.default.php中的$cfg[‘blowfish_secret’]的值为任意字符串</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/**
 * The 'cookie' auth_type uses blowfish algorithm to encrypt the password. If
 * at least one server configuration uses 'cookie' auth_type, enter here a
 * pass phrase that will be used by blowfish. The maximum length seems to be 46
 * characters.
 *
 * @global string $cfg['blowfish_secret']
 */</span>
<span class="token variable">$cfg</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'blowfish_secret'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'yourpassword'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>整理wordpress标签</title>
    <url>/sort-out-wordpress-tags/</url>
    <content><![CDATA[<p>整理网站的标签，发现要改的太多了，不得不数据库一下了，无奈之下硬着头皮把wordpress的数据库的相关表研究了下~~呃~~~~</p>
<p><a href="//img.gagahappy.cn/blog/2011/02/wordpress.jpg"><img src="//img.gagahappy.cn/blog/2011/02/wordpress.jpg" title="wordpress"></a></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>wordpress 3.1 分类链接不正确</title>
    <url>/wordpress-3-1-category-url-bug/</url>
    <content><![CDATA[<p>怀着激动的心情把wordpress升级到了3.1，新的变化是在首页顶部为登录用户添加了后台工具栏，可以让用户在前台快速访问后台经常要使用的操作。</p>
<p>但美中不足的是，这次升级后，分类链连指向不正确，点击后全部指向了首页，如果不启用重定向，则不会出现问题，不知道是什么原因，头痛中。</p>
<p><a href="//img.gagahappy.cn/blog/2011/02/wordpress.jpg"><img src="//img.gagahappy.cn/blog/2011/02/wordpress.jpg" title="wordpress"></a></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>我的Google Reader啊</title>
    <url>/can-not-access-google-reader-you-know/</url>
    <content><![CDATA[<p>经查证：Google Reader 目前已经无法使用，现象为可以登录，但无法阅读订阅，原因就不说了，你懂的！</p>
<p><a href="//img.gagahappy.cn/blog/2011/03/11.jpg"><img src="//img.gagahappy.cn/blog/2011/03/11.jpg" title="Google Reader"></a></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>[emerg]: getpwnam(“nginx”) failed</title>
    <url>/emerg-getpwnam-nginx-failed/</url>
    <content><![CDATA[<p>在启动nginx之前还需要添加nginx用户组，否则会提示</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>emerg<span class="token punctuation">]</span>: getpwnam<span class="token punctuation">(</span>“nginx”<span class="token punctuation">)</span> failed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>添加用户组</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> adduser --system --no-create-home --disabled-password --group nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>find_all终成大患了</title>
    <url>/find-all-is-error-in-rails-2-0-up/</url>
    <content><![CDATA[<p>正如之前预料的那样，升级到rails2.3后，find_all终成大患了。其实早在rails 1.2时就已经提示，find_all方法将在2.0版本的时候被移除，所以当时最稳妥的做法就是使用find(:all)这样的原生方法。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># In rails2.0 up can not work</span>
find_all<span class="token punctuation">(</span><span class="token symbol">:all</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># In rails2.0  still work</span>
find<span class="token punctuation">(</span><span class="token symbol">:all</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql select 蹩脚的语法</title>
    <url>/mysql-select-strange-syntax/</url>
    <content><![CDATA[<p>发现mysql对于处理这样相同的查询，居然有两种截然不同的结果</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT *,slug FROM wp_terms;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行正确</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT slug,* FROM wp_terms;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行错误：You have an error in your SQL syntax</p>
<p>费解啊~~~，在MSSQL中不会出现此现象</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx编译选项</title>
    <url>/nginx-config-option/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure --prefix<span class="token operator">=</span>/opt/nginx <span class="token punctuation">\</span>
--conf-path<span class="token operator">=</span>/etc/nginx/nginx.conf <span class="token punctuation">\</span>
--error-log-path<span class="token operator">=</span>/var/log/nginx/error.log  <span class="token punctuation">\</span>
--pid-path<span class="token operator">=</span>/var/tmp/nginx/nginx.pid  <span class="token punctuation">\</span>
--lock-path<span class="token operator">=</span>/var/lock/nginx.lock  <span class="token punctuation">\</span>
--user<span class="token operator">=</span>nginx  <span class="token punctuation">\</span>
--group<span class="token operator">=</span>nginx  <span class="token punctuation">\</span>
--with-http_flv_module   <span class="token punctuation">\</span>
--with-http_ssl_module  <span class="token punctuation">\</span>
--add-module<span class="token operator">=</span><span class="token string">'/opt/passenger/ext/nginx'</span> <span class="token punctuation">\</span>
--with-http_gzip_static_module  <span class="token punctuation">\</span>
--http-log-path<span class="token operator">=</span>/var/log/nginx/access.log  <span class="token punctuation">\</span>
--http-client-body-temp-path<span class="token operator">=</span>/var/tmp/nginx/client/  <span class="token punctuation">\</span>
--http-proxy-temp-path<span class="token operator">=</span>/var/tmp/nginx/proxy/  <span class="token punctuation">\</span>
--http-fastcgi-temp-path<span class="token operator">=</span>/var/tmp/nginx/fastcgi/  <span class="token punctuation">\</span>
--http-scgi-temp-path<span class="token operator">=</span>/var/tmp/nginx/scgi/  <span class="token punctuation">\</span>
--http-uwsgi-temp-path<span class="token operator">=</span>/var/tmp/nginx/uwsgi/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>Configuration summary</p>
<blockquote>
<ul>
<li>using system PCRE library</li>
</ul>
</blockquote>
<ul>
<li>using system OpenSSL library</li>
<li>md5: using OpenSSL library</li>
<li>sha1 library is not used</li>
<li>using system zlib library</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx path prefix: <span class="token string">"/opt/nginx"</span>
nginx binary file: <span class="token string">"/opt/nginx/sbin/nginx"</span>
nginx configuration prefix: <span class="token string">"/etc/nginx"</span>
nginx configuration file: <span class="token string">"/etc/nginx/nginx.conf"</span>
nginx pid file: <span class="token string">"/var/run/nginx/nginx.pid"</span>
nginx error log file: <span class="token string">"/var/log/nginx/error.log"</span>
nginx http access log file: <span class="token string">"/var/log/nginx/access.log"</span>
nginx http client request body temporary files: <span class="token string">"/var/tmp/nginx/client"</span>
nginx http proxy temporary files: <span class="token string">"/var/tmp/nginx/proxy"</span>
nginx http fastcgi temporary files: <span class="token string">"/var/tmp/nginx/fastcgi"</span>
nginx http uwsgi temporary files: <span class="token string">"uwsgi_temp"</span>
nginx http scgi temporary files: <span class="token string">"scgi_temp"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>rewrite module requires the PCRE library</title>
    <url>/rewrite-module-requires-the-pcre-library/</url>
    <content><![CDATA[<p>在编译nginx时遇到rewrite module requires the PCRE library错误，提示需要PCRE库，解决方法：</p>
<p>ubuntu下执行<br>apt-get install libpcre3-dev</p>
<p>RHEL下执行<br>yum -y install pcre-devel</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 快捷键</title>
    <url>/ten-chrome-shortcut-keys/</url>
    <content><![CDATA[<ul>
<li>Alt+F 或 Alt+E – 打开扳手工具菜单，之后就可以用上下箭头键来进入你想要的功能了</li>
<li>Ctrl+Shift+B — 切换收藏工具条是否显示</li>
<li>Ctrl+D – 将当前标签页加入收藏</li>
<li>Ctrl+Shift+D – 将现在所有打开的标签页都放到同一个收藏夹目录里</li>
<li>Ctrl+J – 打开“下载”标签页</li>
<li>Shift+Esc — 打开“任务管理器”，在这里你可以关闭无响应的标签页</li>
<li>Ctrl+Shift+J — 打开 Chrome 开发工具</li>
<li>Ctrl+L – 选中当前标签页的URL地址，好直接输入新网址</li>
<li>Ctrl+Backspace — 删除地址栏里光标左边的一个词</li>
<li>Ctrl+G – 找到通过Ctrl+F查找的下一个词，Ctrl+Shift+G则是查找上一个词</li>
<li>Ctrl+U — 查看当前标签页的源代码</li>
<li>Ctrl+R — 跟F5一样都是刷新当前标签页</li>
<li>Ctrl+1(2, 3, 4等等) — 切换到第几个标签页（从左数）</li>
<li>Ctrl+Shift+T — 重新打开刚刚关闭的标签页</li>
</ul>
<p><a href="//img.gagahappy.cn/blog/2011/03/chromelogo.jpg"><img src="//img.gagahappy.cn/blog/2011/03/chromelogo.jpg" title="chrome"></a></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrum较传统开发模型的优点</title>
    <url>/scrum-advantages-over-the-traditional-development-model/</url>
    <content><![CDATA[<p>Scrum模型的一个显著特点就是响应变化，它能够尽快地响应变化。下面的图片使用传统的软件开发模型(瀑布模型、螺旋模型或迭代模型)。随着系统因素（内部和外部因素）的复杂度增加，项目成功的可能性就迅速降低。<br><a href="//img.gagahappy.cn/blog/2011/03/1256169664.gif"><img src="//img.gagahappy.cn/blog/2011/03/1256169664.gif"></a></p>
<span id="more"></span>

<p>下图是Scrum模型和传统模型的对比：<br><a href="//img.gagahappy.cn/blog/2011/03/1256169681.gif"><img src="//img.gagahappy.cn/blog/2011/03/1256169681.gif"></a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>scrum</tag>
      </tags>
  </entry>
  <entry>
    <title>在sprint中需要完成的非编程性任务</title>
    <url>/the-task-need-to-be-finished-in-the-sprint-that-is-non-programming/</url>
    <content><![CDATA[<ul>
<li>搭建测试环境。</li>
<li>明确需求。</li>
<li>与运营部门讨论部署的操作细节。</li>
<li>编写部署文档（版本说明，RFC，或任何在你们组织中要写的东西）。</li>
<li>和外界的资源进行联系（例如GUI设计师）。</li>
<li>改进构建脚本。</li>
<li>将故事进一步拆分成任务。</li>
<li>标识出来自开发人员的核心问题，并帮助解决这些问题。</li>
</ul>
<p><a href="//img.gagahappy.cn/blog/2011/03/sprint_planning1.jpg"><img src="//img.gagahappy.cn/blog/2011/03/sprint_planning1.jpg" title="sprint_planning"></a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>scrum</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是Scrum</title>
    <url>/what-is-scrum/</url>
    <content><![CDATA[<p>Scrum的原始含义</p>
<p><a href="//img.gagahappy.cn/blog/2011/03/12822075301.jpg"><img src="//img.gagahappy.cn/blog/2011/03/12822075301.jpg" title="Scrum"></a></p>
<span id="more"></span>
<p>Scrum原始含义是指英式橄榄球次要犯规时在犯规地点对阵争球。争球双方各有8个队员参与，各方出3名前锋队员，并肩各站成一横排，面对面躬身互相顶肩，中间形成一条通道，其他前锋队员分别站在后面，后排队员用肩顶住前锋队员的臀部，组成3、2、3或3、4、1阵形。然后，由犯规队的对方队员在对阵一侧1码外，用双手低手将球抛入通道，不得有利于本队。当球抛入通道时，前排的3对前锋队员互相抗挤，争相踢球给本方前卫或后卫队员，前卫和后卫队员必须等候前锋将球踢回后，方可移动。</p>
<p>1986 Scrum这个词汇首次应用于产品开发</p>
<p>1986年，竹内弘高和 野中郁次郎在New New Product Development<br>Game文章首次提到将Scrum应用与产品开发，他们指出：</p>
<p>传统的“接力式”的开发模式已经不能满足快速灵活的市场需求，<br>而整体或“橄榄球式”的方法——团队作为一个整体前进，在团队的内部传球并保持前进，这也许可以更好的满足当前激烈的市场竞争。</p>
<p>1993年Jeff Sutherland首次将Scrum用于软件开发<br>敏捷思想深受日本工业界最佳实践的影响，尤其是丰田和本田公司推行的精益原则，以及竹内弘高和 野中郁次郎开发的知识管理策略。受到以上思想的影响，以及对世界范围内软件项目的研究，Jeff Sutherland在 1993年首次在Easel公司定义了用于了软件开发行业的Scrum流程，并开始实施。</p>
<p>1995年Jeff Sutherland和Ken Schwaber规范化了Scrum框架，并在OOPSLA 95上公开发布。</p>
<p>2001年 敏捷宣言及原则发布、敏捷联盟成立，Scrum是其中一种敏捷方法。</p>
<p>2001年，Ken Schwaber和Mike Beedle推出第一本Scrum书籍《Scrum敏捷软件开发》。</p>
<p>2002年Ken Schwaber 和Mike Cohn共同创办了Scrum联盟。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>scrum</tag>
      </tags>
  </entry>
  <entry>
    <title>APR-UTIL wasnt linked against Berkeley DB</title>
    <url>/apr-util-wasnt-linked-against-berkeley-db/</url>
    <content><![CDATA[<p>Subversion仓库的存储可以用Berkley DB数据库（一般叫做Berkley DB 类型）或者普通的文件系统（一般叫做FSFS 类型）来实现。</p>
<p>FSFS 类型subversion在安装编译安装时默认安装，支持Berkley DB 类型需要在编译安装时指定 –with-berkeley-db 选项，并且在安装apr-util时必须把 –with-berkeley-db 一起编译进去。</p>
<p>安装subversion提示APR-UTIL wasn’t linked against Berkeley DB，在安装时已经指明 –with-berkeley-db 所在路径，但依然没有找到。</p>
<p>berkeley-db安装版本为5.1.25，怀疑是berkeley-db版本太高造成apr-util无法识别，更换为4.8.30后，重新编译apr-util，Subversion 编译顺利通过。</p>
<p>经验总结：1、不能太追新了～～～2、遇到问题时要仔细看错误提示。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Subversion</tag>
      </tags>
  </entry>
  <entry>
    <title>Fedora 14  安装 NVIDIA 显卡驱</title>
    <url>/fedora-14-install-nvidia-drives/</url>
    <content><![CDATA[<p>首先，安装 RPM Fusion 软件仓库</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> -c <span class="token string">'rpm -Uvh http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm'</span>
<span class="token function">su</span> -c <span class="token string">'rpm -Uvh http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm'</span>
<span class="token function">su</span> -c <span class="token string">'yum update'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后，安装 NVIDIA 显卡驱动</p>
<ol>
<li>确定显卡类型（当然，如果你知道你的显卡类型，就没必要执行这一步了）<br><code>su -c &#39;/sbin/lspci | grep VGA&#39;</code></li>
<li>安装nvidia驱动<blockquote>
<ul>
<li>如果是 GeForce 6, 7, 8, 9, 200, 300, 400 &amp; 500 系列显卡：<br><code>su -c &#39;yum install kmod-nvidia xorg-x11-drv-nvidia-libs&#39;</code></li>
<li>如果你使用内核的是 PAE 内核：<br><code>su -c &#39;yum install kmod-nvidia-PAE&#39;</code></li>
<li>或者：<br><code>su -c &#39;yum install akmod-nvidia xorg-x11-drv-nvidia-libs&#39;</code></li>
<li>如果是 GeForce Fx 显卡：<br>yum install kmod-nvidia-173xx xorg-x11-drv-nvidia-173xx-libs</li>
<li>如果你使用内核的是 PAE 内核：<br><code>su -c &#39;yum install kmod-nvidia-173xx-PAE&#39;</code></li>
<li>或者：<br><code>su -c &#39;yum install akmod-nvidia-173xxxorg-x11-drv-nvidia-173xx-libs&#39;</code></li>
<li>如果是 GeForce 4 或者更低系列的显卡：<br><code>su -c &#39;yum install kmod-nvidia-96xx</code> xorg-x11-drv-nvidia-96xx-libs’</li>
<li>如果你使用内核的是 PAE 内核：<br><code>su -c &#39;yum install kmod-nvidia-96xx-PAE&#39;</code></li>
<li>或者：<br><code>su -c &#39;yum install akmod-nvidia-96xxxorg-x11-drv-nvidia-96xx-libs&#39;</code></li>
</ul>
</blockquote>
</li>
</ol>
<p>最后，重启系统</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora 14 apache不能访问 subversion 仓库</title>
    <url>/fedora-apache-can-not-access-subversion-repository/</url>
    <content><![CDATA[<p>使用apache访问svn仓库目录时，仓库文件放在/home/主目录下，用户及用户组与apache用户一至，apache配置也没有问题，却总是提示无法访问format文件，很是无奈。</p>
<p>随后把仓库目录放到/下，问题消失。但把仓库目录再次移回到主目录下，问题依然存在。可以确定就是权限不对造成apache无法访问。</p>
<p>最后在/home/主目录/ 文件夹上找到问题，其权限是700，难怪apache无法访问，改成755后，问题解决。</p>
<p>总结：fedora 默认主目录文件夹的权限是700，所以如果想让apache访问在主目录下的站点，第一步要做的工作就是设置权限为755。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora 删除旧内核</title>
    <url>/delete-fedora-kernel/</url>
    <content><![CDATA[<p>由于Fedora更新升级非常的频繁， 所以， 非常有必要清除陈旧的内核，方法如下：</p>
<ol>
<li><p>查看当前系统中已安装的内核相关包：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -qa <span class="token operator">|</span> <span class="token function">grep</span> kernel
kernel-2.6.35.6-45.fc14.i686
kernel-2.6.35.12-88.fc14.i686
abrt-addon-kerneloops-1.1.17-1.fc14.i686<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>查看当前系统内核<br>shell&gt; uname -r<br>kernel-2.6.35.12-88.fc14.i686</p>
</li>
<li><p>确定要删除的内核：<br>这里为：kernel-2.6.35.6-45.fc14.i686</p>
</li>
<li><p>删除内核：<br><code>yum remove kernel-2.6.35.6-45.fc14.i686</code></p>
</li>
</ol>
<p>说明：</p>
<blockquote>
<p>没有直接使用: rpm -e 的方法删除内核包， 而是使用 yum remove 进行删除，<br>因为使用yum remove删除， yum 会自动移除 ： /boot/grub/menu.lst 中的相关启动项。</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>How to get Ubuntu 11.04</title>
    <url>/how-to-get-ubuntu-11-04/</url>
    <content><![CDATA[<p>Upgrade from Ubuntu 10.10<br><a href="//img.gagahappy.cn/blog/2011/04/U_11.jpg"><img src="//img.gagahappy.cn/blog/2011/04/U_11.jpg" title="Ubuntu 11.04"></a></p>
<p>To upgrade from Ubuntu 10.10 on a desktop system, press Alt+F2, type in “update-manager -d” (without the quotes), and press Enter. Update Manager will open up and display the message, “New distribution release ‘11.04’ is available.” Click Upgrade and follow the on-screen instructions.</p>
<p>To upgrade from Ubuntu 10.10 on a server system, install the package update-manager-core if it is not already installed. Then execute the command sudo do-release-upgrade -d, and follow the on-screen instructions. Note that the server upgrade is now more robust, and thus will utilize GNU screen and automatically re-attach in case unexpected problems arise, e.g. dropped connection problems.</p>
<p>The same instructions apply to all other editions of Ubuntu (such as Kubuntu, Xubuntu, etc.)</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora 14文件默认权限莫明变更</title>
    <url>/fedora-default-right-changed/</url>
    <content><![CDATA[<p>fedora14下用个人帐户登录系统建立目录时，默认权限变成了drwxrwxr-x，而不是我们通常设置的drwxr-xr-x。另建其他帐户问题依然存在，很是奇怪，经过一番的查找，问题出在了系统环境文件里。具体解决方法如下</p>
<p>打开系统环境文件，发现文件中多了以下几行，怀疑是升级时系统加入的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token environment constant">$UID</span> -gt <span class="token number">199</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">id</span> -gn<span class="token variable">`</span></span>"</span> <span class="token operator">=</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">id</span> -un<span class="token variable">`</span></span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">umask</span> 002
<span class="token keyword">else</span>
    <span class="token builtin class-name">umask</span> 022
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>umask把普通用户登录后文件及目录的默认权限设置为775了，改回755问题即可解决。在文件尾端加入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">umask</span> 022<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>移步<a href="http://www.gagahappy.com/linux-modify-default-rights-by-umask/"> fedora 设置文件默认权限</a>了解相关umask知识</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora 设置文件默认权限</title>
    <url>/linux-modify-default-rights-by-umask/</url>
    <content><![CDATA[<p>linux默认的权限可用umask命令修改，用法非常简单，只需执行umask 777 命令，便代表屏蔽所有的权限，因而之后建立的文件或目录，其权限都变成000，依次类推。通常root帐号搭配umask命令的数值为022、027和 077，普通用户则是采用002，这样所产生的权限依次为755、750、700、775。</p>
<p>用户登录系统时，用户环境就会自动执行rmask命令来决定文件、目录的默认权限。</p>
<p><a href="//img.gagahappy.cn/blog/2011/04/fedora-2103061.jpg"><img src="//img.gagahappy.cn/blog/2011/04/fedora-2103061.jpg" title="fedora"></a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora 解压 rar文件</title>
    <url>/fedora-install-urar/</url>
    <content><![CDATA[<p>yum install unrar</p>
<p>unrar是免费软件，看来是可以免费解压的，但如果要压缩成rar文件的话，就要收费了。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>apache 配置文件</title>
    <url>/apache-svn-config/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>Location /svn<span class="token operator">></span>
DAV svn
SVNParentPath D:<span class="token punctuation">\</span>SVN
AuthType Basic
AuthName <span class="token string">"Subversion repositories"</span>
AuthUserFile D:<span class="token punctuation">\</span>passwd
<span class="token comment">#AuthzSVNAccessFile D:\svnaccessfile</span>
Require valid-user
<span class="token operator">&lt;</span>/Location<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Subversion</tag>
      </tags>
  </entry>
  <entry>
    <title>git blob 对象</title>
    <url>/git-blob-object/</url>
    <content><![CDATA[<p><a href="//img.gagahappy.cn/blog/2011/07/blob.jpg"><img src="//img.gagahappy.cn/blog/2011/07/blob.jpg" title="blob"></a><br>一个”blob对象”就是一块二进制数据，它没有指向任何东西或有任何其它属性，甚至连文件名都没有.</p>
<p>因为blob对象内容全部都是数据，如两个文件在一个目录树（或是一个版本仓库）中有同样的数据内容，那么它们将会共享同一个blob对象。Blob对象和其所对应的文件所在路径、文件名是否改被更改都完全没有关系。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 恢复单个文件</title>
    <url>/git-checkout-file/</url>
    <content><![CDATA[<p>如果你只是要恢复一个文件(修复未提交文件中的错误),如”hello.rb”, 你就要使用 git checkout</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout -- hello.rb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 多人协作，提交流程</title>
    <url>/git-commit-flow/</url>
    <content><![CDATA[<p>提交流程大致如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone lyr@192.168.0.7:~/work/m2ge
<span class="token comment">#... 项目开发 ...</span>
$ <span class="token function">git</span> <span class="token function">add</span> 改动的文件
$ <span class="token function">git</span> commit
$ <span class="token function">git</span> pull
<span class="token comment">#... 解决版本合并问题 ...</span>
$ <span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora下使用UML</title>
    <url>/fedor-uml-software-dia/</url>
    <content><![CDATA[<p>Dia是一款可以在linux下进入UML设计的软件，它能很方便地加入文字，还能画电路图、ER图、CISCO系列设计图等几十种图。</p>
<p><a href="//img.gagahappy.cn/blog/2011/05/pngScreenshot-1.jpg"><img src="//img.gagahappy.cn/blog/2011/05/pngScreenshot-1.jpg" title="decorator"></a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>git commit 对象</title>
    <url>/git-commit-object/</url>
    <content><![CDATA[<p>Commit对象<br><a href="//img.gagahappy.cn/blog/2011/07/commit.jpg"><img src="//img.gagahappy.cn/blog/2011/07/commit.jpg" title="commit"></a></p>
<p>注：合并的提交(merge commits)可能会有不只一个父对象. 如果一个提交没有父对象, 那么我们就叫它“根提交”(root commit), 它就代表着项目最初的一个版本(revision).</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git diff HEAD</title>
    <url>/git-diff-head/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">diff</span> HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上面这条命令会显示你工作目录与上次提交时之间的所有差别，这条命令所显示的 内容都会在执行”git commit -a”命令时被提交。</p>
<p>这句等同于svn中的 svn diff。即比较工作副本与服务器之间的差异。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 多人协作</title>
    <url>/git-init-on-server/</url>
    <content><![CDATA[<p>git 协同开发</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p ~/project/m2ge.git
$ <span class="token builtin class-name">cd</span> ~/project/m2ge.git
$ <span class="token function">git</span> --bare init --shared<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>上述操作中,git-init 命令的 –bare 选项可以让 m2ge.git 目录等价于一个仓<br>库。</p>
<p>也就是说m2ge.git 本来是一个工作树，但是 –bare 选项将本应当存放在m2ge.git/.git 中的仓库内容全部放置在 m2ge.git 目录下，就好像仓库完全的裸露在工作树中，所以称之为赤裸的仓库。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/work/m2ge
$ <span class="token function">git</span> push m2@192.168.0.2:~/project/m2ge.git master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 建立远程分支缩写</title>
    <url>/git-remote-sort/</url>
    <content><![CDATA[<p>git 建立远程分支缩写</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote <span class="token function">add</span> bob /home/bob/myrepo
$ <span class="token function">git</span> log -p master<span class="token punctuation">..</span>bob/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上面的命令把Bob从Alice的主分支(master)中签出后所做的修改全部显示出来。<br>当检查完修改后,Alice就可以把修改合并到她的主分支中。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> merge bob/master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 撤消文件修改</title>
    <url>/git-reset-error-on-git-cn/</url>
    <content><![CDATA[<p>对于 “修复未提交文件中的错误” 时我们可以使用</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset -- yourfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这条命令会把文件恢复到index中的版本，而不是恢复到  HEAD revision。<br>当然，如果你没有把修改后的文件内容添加到index ,这个命令还是可以把你所做的修改恢复成你本地最初始的状态。</p>
<p>建议最好还是能看一下英文版，可以更准确的理解原著中要表达的意思。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 设置用户名</title>
    <url>/git-set-your-name/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"Scott Chacon"</span>
$ <span class="token function">git</span> config --global user.email <span class="token string">"schacon@gmail.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git tag 对象</title>
    <url>/git-tag-object/</url>
    <content><![CDATA[<p><a href="//img.gagahappy.cn/blog/2011/07/tag.jpg"><img src="//img.gagahappy.cn/blog/2011/07/tag.jpg" title="tag"></a></p>
<p>一个标签对象包一个对象名(译者注:就是SHA1签名), 对象类型, 标签名, 标签创建人的名字(“tagger”), 还有一条可能包含有签名(signature)的消息.</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git tree 对象</title>
    <url>/git-tree-object/</url>
    <content><![CDATA[<p>git tree 对象<br><a href="//img.gagahappy.cn/blog/2011/07/tree.jpg"><img src="//img.gagahappy.cn/blog/2011/07/tree.jpg" title="tree"></a></p>
<p>一个tree对象可以指向(reference): 一个包含文件内容的blob对象, 也可以是其它包含某个子目录内容的其它tree对象.</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 如何推送分支</title>
    <url>/how-to-push-git-branch/</url>
    <content><![CDATA[<p>git 如何 推送分支</p>
<p>1、能否把自己建立的分支推送到服务器仓库？<br>2、在分支里修改文件，直接进行合并，会怎么样？（即，在分支修改后，没有提交）</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>安装OpenSSH</title>
    <url>/install-openssh/</url>
    <content><![CDATA[<p>安装OpenSSH<br>Ubuntu缺省没有安装SSH Server，使用以下命令安装：</p>
<p>sudo apt-get install openssh-server openssh-client</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>手动安装jdk6</title>
    <url>/jdk6-install-by-manual/</url>
    <content><![CDATA[<ol>
<li><p>下载</p>
<blockquote>
<p>到<a href="http://java.sum.com/">http://java.sum.com</a> 下载jdk6.bin 下载位置/home/g/jdk.bin</p>
</blockquote>
</li>
<li><p>建立安装目</p>
<blockquote>
<p><code>mkdir /usr/local/java</code></p>
</blockquote>
</li>
<li><p>进行安装目录</p>
<blockquote>
<p><code>cd /usr/lcoal/java</code></p>
</blockquote>
</li>
<li><p>安装</p>
<blockquote>
<p><code>/home/g/jdk.bin 点击同意。一路回车</code></p>
</blockquote>
</li>
<li><p>编辑环境变量</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java/jdk6/jdk1.6.0_11
<span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span>
<span class="token builtin class-name">export</span> CLASSPATH
<span class="token comment"># 上面写法不一定正确</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">MYSQL_HOME</span><span class="token operator">=</span>/opt/mysql
<span class="token builtin class-name">export</span> <span class="token assign-left variable">RUBY_HOME</span><span class="token operator">=</span>/opt/ruby
<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/opt/java/jdk1.6.0_11
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$MYSQL_HOME</span>/bin:<span class="token variable">$RUBY_HOME</span>/bin
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar
java -version <span class="token comment">#如果出现版本号，则说明安装成功。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>解决rails2.2.2不能连接mysql 数据库驱动问题</title>
    <url>/rails2-2-2-can-not-connect-mysql-drive-bug/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gem <span class="token function">install</span> mysql -- --with-mysql-config<span class="token operator">=</span>/usr/local/mysql/bin/mysql_config

gem <span class="token function">install</span> mysql --no-rdoc --no-ri <span class="token punctuation">\</span>
-- --with-mysql-include<span class="token operator">=</span>/usr/local/mysql/include <span class="token punctuation">\</span>
--with-mysql-lib<span class="token operator">=</span>/usr/local/mysql/lib <span class="token punctuation">\</span>
--with-mysql-config<span class="token operator">=</span>/usr/local/mysql/bin/mysql_config

<span class="token string">"/usr/local/mysql/lib"</span> to /etc/ld.so.conf and ran ldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改 <code>/etc/ld.so.conf</code>， 加入<code>include /opt/mysql/lib</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gem <span class="token function">install</span> mysql -- --with-mysql-lib<span class="token operator">=</span>/opt/mysql/lib/mysql --with-mysql-include<span class="token operator">=</span>/opt/mysql/include/mysql/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Rmagick</title>
    <url>/rmagick-install/</url>
    <content><![CDATA[<p>首先下载imagemagick， 进入安装目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> imagemagick
./configure --prefix<span class="token operator">=</span>/opt/imagemagick
<span class="token function">make</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果出现</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/bin/ld: cannot <span class="token function">find</span> -lperl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>请安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libperl-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>rspec  检查类别方法</title>
    <url>/rspec-check-kind-of-and-method/</url>
    <content><![CDATA[<p>rspec  检查类别方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">target<span class="token punctuation">.</span>should be_a_kind_of<span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">)</span>
<span class="token comment"># target.class.should == Array</span>

target<span class="token punctuation">.</span>should be_an_instance_of<span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">)</span>
<span class="token comment"># target.class.should == Array</span>

target<span class="token punctuation">.</span>should response_to<span class="token punctuation">(</span><span class="token symbol">:foo</span><span class="token punctuation">)</span>
<span class="token comment"># target.response_to?(:foo).should == true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>rspec</tag>
      </tags>
  </entry>
  <entry>
    <title>rspec controller 出错</title>
    <url>/rspec-controller-erro/</url>
    <content><![CDATA[<p>运行 spec/controller下的测试时，如果进入到spec/controller 目录下运行相关的spec，会出现undefined method <code>get for #&lt;ActiveSupport::TestCase::Subclass_1::Subclass_1:0xb6ec8cd4&gt;</code>这样类似的错误，解决方法居然是从项目的根目录运行，即<code>spec spec/controller/action_controller_spec.rb</code>。然后everything is ok.</p>
<p>解决方法是从一个老外的网站上找到，这里引用一下他的原话，看着这英文真是解气啊！</p>
<blockquote>
<p>The problem was exactly in the path. I run my tests from spec/controllers folder where they didn’t work. From root folder everything goes right.</p>
<p>I found the solution, but i still don’t understand why, especially that my models tests works fine from user@user:~/application_folder/spec/models$ path</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>rspec</tag>
      </tags>
  </entry>
  <entry>
    <title>rspec expect to </title>
    <url>/rspec-expect-to-change-value-or-raise-error/</url>
    <content><![CDATA[<p>期望改变值或抛出异常</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">expect <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>to change <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>from<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token punctuation">)</span>

expect <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>to raise_error<span class="token punctuation">(</span><span class="token constant">YourMenthodError</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>rspec</tag>
      </tags>
  </entry>
  <entry>
    <title>rspec in controller integration with views</title>
    <url>/rspec-in-controller-integration-with-views/</url>
    <content><![CDATA[<p>If you prefer to integrate views (a la rails functional testing) you can by including<br>the keyword/commmand “integrate_views”.</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">describe <span class="token constant">ArticlesController</span> <span class="token keyword">do</span>
  integrate_views
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>rspec</tag>
      </tags>
  </entry>
  <entry>
    <title>rspec it 描述相同也可以正常执行测试</title>
    <url>/rspec-it-describe-same-and-run/</url>
    <content><![CDATA[<p>目前实践的环境是:同样的it描述在不同的context分组中可以执行各自的测试。如果换成是rails自带的test_开头的方法测试，如果同名肯定会异常。通过这一点又证明了rspec比test更好用的另一个方面。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>rspec</tag>
      </tags>
  </entry>
  <entry>
    <title>rubymine 字体反锯齿</title>
    <url>/rubymine-font-beauty/</url>
    <content><![CDATA[<p>让所有的Java程序都使用反锯齿，就是在~/.profile后面再加上<br>export _JAVA_OPTIONS=’-Dawt.useSystemAAFontSettings=on’</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>rubymine</tag>
      </tags>
  </entry>
  <entry>
    <title>TDD 和 BDD</title>
    <url>/tdd-and-bdd/</url>
    <content><![CDATA[<ul>
<li>TDD 用 test 思維,測試程式的結果</li>
<li>BDD 用 spec 思維,描述程式應該有什麼行為</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>BDD</tag>
        <tag>TDD</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby 中 include 与 extend 区别</title>
    <url>/the-different-between-include-and-extend-in-ruby/</url>
    <content><![CDATA[<p>那么include和extend究竟有什么区别的？</p>
<p>引用如下</p>
<blockquote>
<p>include : mixes in specified module methods as instance methods in the target class<br>extend : mixes in specified module methods as class methods in the target class</p>
</blockquote>
<p>记得有看过的，被用到的时候居然忘记了。杯具啊！</p>
<span id="more"></span>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token constant">A</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">klass_method</span></span>
        puts <span class="token string">'klass method'</span>
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">ins_method</span></span>
        puts <span class="token string">'instance method'</span>
    <span class="token keyword">end</span>

<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">B</span>
<span class="token keyword">end</span>

<span class="token constant">B</span><span class="token punctuation">.</span>class_eval <span class="token keyword">do</span>
    <span class="token keyword">include</span> <span class="token constant">A</span>
<span class="token keyword">end</span>

<span class="token constant">B</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>ins_method <span class="token comment"># 'should puts instance method'</span>
<span class="token comment">#B.klass_method # 'not define'</span>

<span class="token constant">B</span><span class="token punctuation">.</span>class_eval <span class="token keyword">do</span>
    <span class="token keyword">extend</span> <span class="token constant">A</span>
<span class="token keyword">end</span>

<span class="token constant">B</span><span class="token punctuation">.</span>klass_method <span class="token comment"># 'klass method'</span>
<span class="token constant">B</span><span class="token punctuation">.</span>ins_method <span class="token comment"># also as class method</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>git fetch origin</title>
    <url>/git-fetch-origin/</url>
    <content><![CDATA[<p>可以运行 git fetch origin 来同步远程服务器上的数据到本地。</p>
<p>那么用 git pull 不是也可以吗？区别是啥？</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>rails 页面缓存路径</title>
    <url>/how-rails-caches-page-work/</url>
    <content><![CDATA[<p>如果使用默认页面缓存设置，在生产环境下，web服务器可以直接访问生成的缓存页面，不再去调用rails。</p>
<p>但是如果修改了默认页面缓的存放位置，又没对web服务器设置相应的规则，web服务器会因找不到页面而再次把请求转发给rails。从而使缓存变得没有意义。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Mock Receive Counts</title>
    <url>/mock-receive-counts/</url>
    <content><![CDATA[<blockquote>
<p>my_mock.should_receive(:sym).once<br>my_mock.should_receive(:sym).twice<br>my_mock.should_receive(:sym).exactly(n).times<br>my_mock.should_receive(:sym).at_least(:once)<br>my_mock.should_receive(:sym).at_least(:twice)<br>my_mock.should_receive(:sym).at_least(n).times<br>my_mock.should_receive(:sym).at_most(:once)<br>my_mock.should_receive(:sym).at_most(:twice)<br>my_mock.should_receive(:sym).at_most(n).times<br>my_mock.should_receive(:sym).any_number_of_times</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>rspec</tag>
      </tags>
  </entry>
  <entry>
    <title>git 与 subversion分支</title>
    <url>/different-of-branch-between-git-and-subversion/</url>
    <content><![CDATA[<p>subversion合并分支消耗太大。然而在 Git 中，一天之内建立、使用、合并再删除多个分支是常见的事。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql不能启动 Manager of pid-file quit without updating file.</title>
    <url>/mysql-manager-of-pid-file-quit-without-updating-file/</url>
    <content><![CDATA[<p>启动mysql失败，提示Manager of pid-file quit without updating file.错误。从网上直接搜索错误信息，感觉出错原因及解决方案都不适用于本机的情况。</p>
<p>本着出错要查出其原因的原则，查看了mysql的出错日志（出错日志所在路径，请根据您自己机子的实际情况查找），发现错误信息：File ‘./mysql-bin.index’ not found (Errcode: 13)，查看数据库文件，mysql-bin.index确实存在。</p>
<p>查看数据库文件的权限，发现全都变成了 drwx—— 2  1001 1001。突然想起之前重建过mysql用户，造成数据库文件的权限用户信息丢失。重新授权即可。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> -R  mysql var/
<span class="token function">sudo</span> <span class="token function">chgrp</span> -R  mysql var/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>再次启动mysql，成功！</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx 405 Not Allowed</title>
    <url>/nginx-405-not-allowed/</url>
    <content><![CDATA[<p>nginx 405 Not Allowed<br>这个错误的原因是：Apache、IIS、Nginx等绝大多数web服务器，都不允许静态文件响应POST请求，否则会返回“HTTP/1.1 405 Method not allowed”错误。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 添加用户到指定组</title>
    <url>/ubuntu-add-users-to-group/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gpasswd -a <span class="token operator">&lt;</span>账号<span class="token operator">></span> <span class="token operator">&lt;</span>组名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 映射远程目录</title>
    <url>/ubuntu-sshfs/</url>
    <content><![CDATA[<p>sshfs 用户名@远程服务器名:远程目录 映射至本地的目录</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 查看用户所在组</title>
    <url>/ubuntu-user-in-groups/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">id</span> yourname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>git log查找某一个author的提交</title>
    <url>/git-log-author/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --author<span class="token operator">=</span><span class="token operator">&lt;</span>pattern<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>硬恢复（删除最后的改动，commit信息和代码）</title>
    <url>/git-recover-delete-file-from-commit/</url>
    <content><![CDATA[<p>git-reset –hard HEAD~1</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>wc命令</title>
    <url>/linux-wc-command/</url>
    <content><![CDATA[<p>wc命令用来打印文件的文本行数、单词数、字节数等（print the number of newlines, words, and bytes in files）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">格式：wc -l <span class="token operator">&lt;</span>file<span class="token operator">></span>

打印指定文件的文本行数。（l<span class="token operator">=</span>小写L）

参数：-c, --bytes
打印字节数（print the byte counts）

参数：-m, --chars
打印字符数（print the character counts）

参数：-l, --lines
打印行数（print the newline counts）

参数：-w, --words
打印单词数（print the word counts）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>memcached 启动参数</title>
    <url>/memcached-setup-config/</url>
    <content><![CDATA[<p>启动参数</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-p memcached监听的TCP端口
-l 监听的ip地址
-d 以daemon方式运行，将程序放入后台
-u memcached的运行用户
-P memcached的pid文件路径
-m memcached可以使用的最大内存数量
-c memcached同时可以接受的最大的连接数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果你希望以socket方式来访问memcached，那么在启动的时候就必须去掉 -l和-p参数，并加上-s参数：</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>memcached</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 删除字段</title>
    <url>/mysql-drop-column/</url>
    <content><![CDATA[<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table &#96;user&#96; drop column dep;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Passing parameters to a shared example group</title>
    <url>/passing-parameters-to-a-shared-example-group/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">shared_examples_for <span class="token string">"a measurable object"</span> <span class="token keyword">do</span> <span class="token operator">|</span>measurement<span class="token punctuation">,</span> measurement_methods<span class="token operator">|</span>
  measurement_methods<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>measurement_method<span class="token operator">|</span>
    it <span class="token string">"should return <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>measurement<span class="token delimiter tag">&#125;</span></span> from #<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>measurement_method<span class="token delimiter tag">&#125;</span></span>"</span> <span class="token keyword">do</span>
      subject<span class="token punctuation">.</span>send<span class="token punctuation">(</span>measurement_method<span class="token punctuation">)</span><span class="token punctuation">.</span>should <span class="token operator">==</span> measurement
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>rspec</tag>
      </tags>
  </entry>
  <entry>
    <title>rails memcache config</title>
    <url>/rails-memcache-config/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">config<span class="token punctuation">.</span>gem <span class="token string">"cached_model"</span>
<span class="token keyword">require</span> <span class="token string">'memcache'</span>
memcache_options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
<span class="token symbol">:c_threshold</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">10</span>_000<span class="token punctuation">,</span>
<span class="token symbol">:compression</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token symbol">:debug</span> <span class="token operator">=</span><span class="token operator">></span><span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token symbol">:namespace</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'my_rails_app'</span><span class="token punctuation">,</span>
<span class="token symbol">:readonly</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token symbol">:urlencode</span> <span class="token operator">=</span><span class="token operator">></span><span class="token boolean">false</span>
<span class="token punctuation">&#125;</span>

<span class="token constant">CACHE</span> <span class="token operator">=</span> <span class="token constant">MemCache</span><span class="token punctuation">.</span><span class="token keyword">new</span> memcache_options
<span class="token constant">CACHE</span><span class="token punctuation">.</span>servers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'localhost:11211'</span><span class="token punctuation">,</span> <span class="token string">'localhost:11212'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>rails validates_presence_of</title>
    <url>/rails-validates-presence-of/</url>
    <content><![CDATA[<p>validates_presence_of<br>在对应属性值为false的时候，rails会认为是空，不能通过验证。<br>rails版本：2.3.5</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby class_variable method</title>
    <url>/ruby-class-variable-method/</url>
    <content><![CDATA[<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">One</span>
  <span class="token variable">@@var1</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">Two</span> <span class="token operator">&lt;</span> <span class="token constant">One</span>
  <span class="token variable">@@var2</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">end</span>
<span class="token constant">One</span><span class="token punctuation">.</span>class_variables   <span class="token comment">#=> [:@@var1]</span>
<span class="token constant">Two</span><span class="token punctuation">.</span>class_variables   <span class="token comment">#=> [:@@var2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>The mate Shell Command for TextMate</title>
    <url>/the-mate-shell-command-for-textmate/</url>
    <content><![CDATA[<p>To add the mate shell command, select the Help menu from within TextMate and select “Terminal Usage…”</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>textmate</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM分屏功能</title>
    <url>/vim-split-window/</url>
    <content><![CDATA[<p>分屏启动Vim</p>
<blockquote>
<p>使用大写的O参数来垂直分屏。<br>vim -On file1 file2 …<br>使用小写的o参数来水平分屏。<br>vim -on file1 file2 …<br>注释: n是数字，表示分成几个屏。</p>
</blockquote>
<p>关闭分屏</p>
<blockquote>
<p>关闭当前窗口。<br>Ctrl+W c<br>关闭当前窗口，如果只剩最后一个了，则退出Vim。<br>Ctrl+W q</p>
</blockquote>
<span id="more"></span>

<p>分屏</p>
<blockquote>
<p>上下分割当前打开的文件。<br>Ctrl+W s<br>上下分割，并打开一个新的文件。<br>:sp filename<br>左右分割当前打开的文件。<br>Ctrl+W v<br>左右分割，并打开一个新的文件。<br>:vsp filename</p>
</blockquote>
<p>移动光标</p>
<blockquote>
<p>Vi中的光标键是h, j, k, l，要在各个屏间切换，只需要先按一下Ctrl+W<br>把光标移到右边的屏。<br>Ctrl+W l<br>把光标移到左边的屏中。<br>Ctrl+W h<br>把光标移到上边的屏中。<br>Ctrl+W k<br>把光标移到下边的屏中。<br>Ctrl+W j<br>把光标移到下一个的屏中。.<br>Ctrl+W w</p>
</blockquote>
<p>移动分屏</p>
<blockquote>
<p>这个功能还是使用了Vim的光标键，只不过都是大写。当然了，如果你的分屏很乱很复杂的话，这个功能可能会出现一些非常奇怪的症状。<br>向右移动。<br>Ctrl+W L<br>向左移动<br>Ctrl+W H<br>向上移动<br>Ctrl+W K<br>向下移动<br>Ctrl+W J</p>
</blockquote>
<p>屏幕尺寸</p>
<blockquote>
<p>下面是改变尺寸的一些操作，主要是高度，对于宽度你可以使用Ctrl+W &lt;或是&gt;，但这可能需要最新的版本才支持。<br>让所有的屏都有一样的高度。<br>Ctrl+W =<br>增加高度。<br>Ctrl+W +<br>减少高度。<br>Ctrl+W -</p>
</blockquote>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>https协议security alert</title>
    <url>/https-security-alert/</url>
    <content><![CDATA[<p>使用https协议的页面，如果页面中引用了非https的链接，会弹出下面的警告窗口</p>
<p><a href="//img.gagahappy.cn/blog/2011/10/CD55ADEB-4097-4DB4-B7DD-7B65612FA552.png"><img src="//img.gagahappy.cn/blog/2011/10/CD55ADEB-4097-4DB4-B7DD-7B65612FA552.png" title="security alert"></a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>写测试代码也可提高程序代码质量</title>
    <url>/tdd-and-code-think-something-1011/</url>
    <content><![CDATA[<p>当你发现测试代码的编写越来越困难时，在一定程度上反映出你的程序代码可能耦合过高，应该重构一下。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>TDD</tag>
      </tags>
  </entry>
  <entry>
    <title>git cherry-pick</title>
    <url>/git-cherry-pick/</url>
    <content><![CDATA[<p>执行git cherry-pick 解决合并冲突之前的提交，好像会自动pull下分支的最新提交内容，造成当前提交下的内容冲突。</p>
<p>为什么会再现之前的冲突，从哪里pull下来的呢？最新commit?</p>
<p>为什么会向暂存区放内容？</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>redis-store的开发首选编辑器</title>
    <url>/redis-store-editor/</url>
    <content><![CDATA[<p>无意中看了一下redis-store项目的.gitignore文件，发现上面居然有.idea。看来redis-store的作者也在用rubymine作为开发的首选编辑器啊。不知道他们用的是不是正版的呢～～～。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>rspec mock 多次</title>
    <url>/rspec-mock-more-time/</url>
    <content><![CDATA[<p>rspec mock 同一个方法多次</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">mock_1</span></span>
  <span class="token constant">Car</span><span class="token punctuation">.</span>should<span class="token punctuation">.</span>receive<span class="token punctuation">(</span><span class="token symbol">:new</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">mock_2</span></span>
  <span class="token constant">Car</span><span class="token punctuation">.</span>should<span class="token punctuation">.</span>receive<span class="token punctuation">(</span><span class="token symbol">:new</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
mock_1
mock_2
<span class="token keyword">class</span> <span class="token class-name">Peo</span>
 car <span class="token operator">=</span> <span class="token constant">Car</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>实际代码里只调用一次Car.new，但mock的时候用了2次，运行时提示expected :new with (any args) once, but received it 0 times</p>
<blockquote>
<p>解决方法，mock一次Car.new即可。<br>以上程序运行环境rspec 1.3.2</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>rspec</tag>
      </tags>
  </entry>
  <entry>
    <title>what is dup</title>
    <url>/what-is-dup/</url>
    <content><![CDATA[<p>dup returns a copy (duplicate) of the object. In the above code, it is<br>used to let you get back a shuffled copy of the Array, without<br>shuffling the original.</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>git 如何自动合并文件内容</title>
    <url>/git-how-to-merge/</url>
    <content><![CDATA[<p>git可以自动进行文件合并</p>
<p>情况1 ：文件A在第一次提交成功后，分别被A用户和B用户编辑后提交，A用户pull B用户的提交，这时，git判断两个文件是否冲突，如果不冲突则进行合并</p>
<p>情况2 ：文件A在第一次提交成功后，B用户对其进行了编辑提交，A用户没有对文件做出任何修改，pull B用户的提交，这时，git会自动用B用户的修改去覆盖A用户的文件，即使A文件同一行的内容不同</p>
<p>思考：git是如何判断什么情况可以直接进行覆盖，什么情况需要进行合并。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>新建git 版本库</title>
    <url>/git-new-repo/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> test_demo
<span class="token builtin class-name">cd</span> test_demo
<span class="token function">git</span> init
<span class="token function">touch</span> README
<span class="token function">git</span> <span class="token function">add</span> README
<span class="token function">git</span> commit -m <span class="token string">'first commit'</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:youname/test_demo.git
<span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git reset 暂存区如何信息提示</title>
    <url>/git-reset-how-to-show-index-info/</url>
    <content><![CDATA[<p>当对一个已经添加到暂存区的文件进行撤销<br><code>git add file</code><br>然后进行撤销<br><code>git reset HEAD -- file</code><br>这时，暂存区中没有任何被添加的文件<br>如果把某个历史提交（非HEAD指向的提示）中的 file添加到暂存区<br><code>git reset commit -- file</code><br>暂存区中则会显示file文件已经被加入，并且合本地文件不同</p>
<p>思考</p>
<blockquote>
<p>如果把HEAD对应的文件放入暂存区，是否因为文件是HEAD中的，所以暂存区认为文件已经提交过了，所以没有已添加，待提交的提示。</p>
</blockquote>
<blockquote>
<p>而其它非HEAD中的文件则认为是还没有提交的，所以显示为已添加，待提交。</p>
</blockquote>
<p>试验：</p>
<blockquote>
<p>如果历史提交中的file文件内容与工作区中的file文件内容一样,执行<br><code>git reset commit -- file</code><br>则暂存区应该显示已添加，待提交的提示，但不会显示与本地有差异。</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Resque生效的必要条件</title>
    <url>/make-resque-work/</url>
    <content><![CDATA[<p>Resque生效的必要条件：启动redis-server，执行rake resque:work或resque:workers监听</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>resque</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 编译安装选择配置文件my.cnf</title>
    <url>/mysql-select-my-cnf-how-to/</url>
    <content><![CDATA[<p>mysql 在编译安装初始化数据库时需要读取my.cnf文件，默认读取的位置是/etc/mysql，所以如果你把my.cnf文件copy到/etc/下的话，mysql读取的是/etc/mysql下的my.cnf，而不是/etc/my.cnf。如果想要读取my.cnf，请删除/etc/mysql文件夹。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>rails 加载schema到指定环境</title>
    <url>/rails-load-schema/</url>
    <content><![CDATA[<p>rake db:schema:load RAILS_ENV=production</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>redis 存入hash值</title>
    <url>/redis-store-hash/</url>
    <content><![CDATA[<p>redis&gt;  HMSET myhash field1 “Hello” field2 “World”</p>
<p>redis&gt;  HMGET myhash field1 field2</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用tar对整个文件夹打包</title>
    <url>/tar-cvzf-folder/</url>
    <content><![CDATA[<p>如何使用tar对整个文件夹打包?<br>tar cvzf xxx.tar.gz xxx/</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>thin 配置</title>
    <url>/thin-configuration/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> thin config -C /etc/thin/<span class="token operator">&lt;</span>config-name<span class="token operator">></span>.yml -c <span class="token operator">&lt;</span>rails-app-root-path<span class="token operator">></span> --servers <span class="token operator">&lt;</span>number-of-threads<span class="token operator">></span> -e <span class="token operator">&lt;</span>environment<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">thin config -C /etc/thin/redmine.yml -c /var/www/redmine --servers <span class="token number">5</span> -e production
thin config -C /etc/thin/myapp.yml -c /var/rails/myapp --servers <span class="token number">5</span> --socket /tmp/thin.myapp.sock -e production<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<!--more+阅读全文+-->

<p>当执行第一条config命令，可能得到/etc/thin/redmine.yml内容如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">address: localhost
pid: tmp/pids/thin.pid
wait: <span class="token number">30</span>
port: <span class="token number">3000</span>
timeout: <span class="token number">30</span>
log: log/thin.log
max_conns: <span class="token number">1024</span>
require: <span class="token punctuation">[</span><span class="token punctuation">]</span>

environment: production
max_persistent_conns: <span class="token number">512</span>
servers: <span class="token number">5</span>
daemonize: <span class="token boolean">true</span>
chdir: /var/www/redmine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>启动应用<br><code>sevice thin start</code><br>将会启动3000~3004共5个端口。<br>如果你有Nginx就可以设置一个代理转发了</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>thin</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 安装mysql Could not find mysqld</title>
    <url>/ubuntu-intall-mysql-fatal-error-could-not-find-mysqld/</url>
    <content><![CDATA[<p>错误信息:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#./bin/mysql_install_db –user=mysql</span>
FATAL ERROR: Could not <span class="token function">find</span> mysqld


The following directories were searched:
/usr/libexec
/usr/sbin
/usr/bin

If you compiled from source, you need to run ‘make install’to copy the software into the correct location ready <span class="token keyword">for</span> operation.

If you are using a binary release, you must either be at the <span class="token function">top</span> of the level of the extracted archivem or pass the –basedir option pointing to that location.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解决办法：<br><code>scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql</code><br>（这里mysql是所使用的用户名，basedir是mysql的安装目录）</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言 无缓冲通道的cap是零</title>
    <url>/golang-unbuffered-channel-no-cap/</url>
    <content><![CDATA[<p>无缓冲通道的cap是零</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token comment">// 无缓冲通道的cap、len永远是0</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	noCache <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> noCache <span class="token operator">&lt;-</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"cap of noCache pipeline is"</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>noCache<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// => 0</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"len of noCache pipeline is"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>noCache<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// => 0</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"noCache "</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>noCache<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL自增值不能回退</title>
    <url>/mysql-auto-increment/</url>
    <content><![CDATA[<p>MySql 主键不连续的原因之一是自增值不能回退</p>
<p>设当前自增值=2，此时并发两个事务T1,T2。T1先申请到自增值，插入ID=3，自增值更为4</p>
<table>
<thead>
<tr>
<th></th>
<th>Tx1</th>
<th>Tx2</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>申请到自增值=2，set id =2, 更新自增值=3</td>
<td></td>
</tr>
<tr>
<td>T2</td>
<td>插入数据失败</td>
<td>申请到自增值=3，set id=3，更新自增值=4</td>
</tr>
<tr>
<td>T3</td>
<td>如果让自增值回退到=2</td>
<td>插入数据成功</td>
</tr>
<tr>
<td>T4</td>
<td>申请到自增值=2，set id =2, 更新自增值=3</td>
<td></td>
</tr>
<tr>
<td>T5</td>
<td>插入数据成功</td>
<td>申请到自增值=3，set id=3，更新自增值=4</td>
</tr>
<tr>
<td>T6</td>
<td></td>
<td>插入数据失败，插入语句报错“主键冲突” id=3已经存在</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 行锁两阶段</title>
    <url>/mysql-recordlock-2phase/</url>
    <content><![CDATA[<h1 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h1><p>优点：</p>
<p>比起表锁，可以支持更大的并发</p>
<h1 id="行锁的实现"><a href="#行锁的实现" class="headerlink" title="行锁的实现"></a>行锁的实现</h1><p>由存储引擎自已实现，每个存储引擎实现的方式都不一样</p>
<p> MyISAM 引擎不支持行锁</p>
<h1 id="两阶段锁"><a href="#两阶段锁" class="headerlink" title="两阶段锁"></a>两阶段锁</h1><p>在更新数据时，需要对数据所在行加锁，但更新数据完成后，锁并不会马上释放，而是要等到事务提交才释放</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table t_07_recordlock(
	id int not null auto_increment primary key,
  c int,
  d int,
 	key c (c)
) engine&#x3D;innodb;

insert into t_07_recordlock values (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<table>
<thead>
<tr>
<th></th>
<th>Session A</th>
<th>Session B</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>Begin;</td>
<td>begin;</td>
</tr>
<tr>
<td>T2</td>
<td>update t_07_recordlock set d=d+1 where id = 1;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>update t_07_recordlock set d=d+1 where id = 2;</td>
<td></td>
</tr>
<tr>
<td>T3</td>
<td></td>
<td>update t_07_recordlock set d=d+1 where id = 1;</td>
</tr>
<tr>
<td>T4</td>
<td>Commit</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>T2时刻，SessionA已经完成了对两行数据的更新，但没有提交</li>
<li>T3时候，SessionB对id=1的行进行更新，由于Session A没有提交，其依然持有id=1上的写锁，与Session B要加的写锁互斥，所以SessionB被阻塞，直到Session A提交，释放锁，才能对执行更新语句</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言 主程序退出时会进行一些额外工作</title>
    <url>/golang-main-do-something-when-quit/</url>
    <content><![CDATA[<p>主goroutine先执行完,子goroutine居然还可以运行</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"==========="</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"doing in sub goroutine"</span><span class="token punctuation">)</span>
		<span class="token comment">// 主程序向通道发送数据，但此时由于 主 gor 行速度慢</span>
		<span class="token comment">// 程序还没有执行到 fmt.Println("x in ch is:", &lt;-ch)，</span>
		<span class="token comment">// 通道还没有接收数据，所以此时发生 阻塞</span>
		ch <span class="token operator">&lt;-</span> <span class="token number">1</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"done in sub goroutine"</span><span class="token punctuation">)</span> <span class="token comment">// 竞争打印，顺序不定</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 模拟执行速度慢</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>

	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"doing in main goroutine"</span><span class="token punctuation">)</span>
	<span class="token comment">// 1. 执行到这里时发生，由于子 gor 已经在等待向通道发送数据</span>
	<span class="token comment">//    所以此处的 从通道接收数据的 &lt;-ch 立即执行</span>
	<span class="token comment">// 2. 子 gor 被唤酲, 立即向通道发送数据</span>
	<span class="token comment">// 3. &lt;-ch 开始接收数据</span>

	<span class="token comment">// 当从通道中取出数据时，数据是通道中复制的，这需要花费一定的时间</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"x in ch is:"</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>      <span class="token comment">// 竞争打印，顺序不定</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"done in main goroutine"</span><span class="token punctuation">)</span> <span class="token comment">// 竞争打印，顺序不定</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  output：这个比较奇怪,主 先执行完,子居然还可以运行</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 2021/03/04 16:26:35 doing in sub goroutine</span>
<span class="token comment">// 2021/03/04 16:26:36 doing in main goroutine</span>
<span class="token comment">// x in ch is: 1</span>
<span class="token comment">// 2021/03/04 16:26:36 done in main goroutine (主 先执行完)</span>
<span class="token comment">// 2021/03/04 16:26:36 done in sub goroutine （子居然还可以运行）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>关于原因</p>
<ol>
<li><p>Stack Overflow上的答案是 在主 gor 的最后一行代码</p>
<p><code>log.Println(&quot;done in main goroutine&quot;)</code> 执行完成后，main 所在的 goroutine 还有一些在 <code>runtime</code> 时</p>
<p>需要完成一些扫尾工作，这些扫尾工作会花费非常少的时间，在这段时间里，子 gor 依然可以运行</p>
<p>所以可以执行 <code>log.Println(&quot;done in sub goroutine&quot;)</code></p>
</li>
<li><p>这也说明了 此次 主 gor 运行的比较慢，给子gor 留下了运行完所有代码的时间</p>
<p>如果主 gor 运行的特别快，即使扫尾工作需要花费一定的时间，但整体速度依然比</p>
<p>子 gor 快，则 <code>log.Println(&quot;done in sub goroutine&quot;)</code> 不能被执行</p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL自增值申请策略</title>
    <url>/mysql-auto-increment-strategy/</url>
    <content><![CDATA[<h1 id="自增值申请策略"><a href="#自增值申请策略" class="headerlink" title="自增值申请策略"></a>自增值申请策略</h1><ol>
<li><p>能否先查ID，再查入数据？</p>
<p>不能，如果每次插入前，都要在主键的索引树上查询要插入的id是否存在，会大大降低插入插入的效率。</p>
</li>
<li><p>能否等事务完成后，再释放自增值的锁？</p>
<p>不能，如果需要等待当前事务完成，其它事务先能获取自增值的锁，就会大大降低并发。</p>
</li>
</ol>
<h2 id="innodb-autoinc-lock-mode"><a href="#innodb-autoinc-lock-mode" class="headerlink" title="innodb_autoinc_lock_mode"></a><code>innodb_autoinc_lock_mode</code></h2><p>MySQL通过参数<code>innodb_autoinc_lock_mode</code>，来设置自值锁的行为，默认值为1</p>
<ol>
<li><p>0值 ：等事务完成才释放锁</p>
</li>
<li><p>1值 ：</p>
<ul>
<li>对于普通的<code>insert into table</code>，申请到自增锁后就释放，不用等插入语句的完成。</li>
<li>对于批量插入，类似<code>insert ... select</code>，一直持有自增锁，直到事务执行完成。这样也保证了id的连续性。</li>
</ul>
</li>
<li><p>2值：所有插入操作在申请到自增锁后就释放，包括<code>insert ... select </code>这种</p>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>git 使用 rebase 代替 merge</title>
    <url>/git-using-rebase-instead-of-merge/</url>
    <content><![CDATA[<h1 id="合并还是变基"><a href="#合并还是变基" class="headerlink" title="合并还是变基"></a>合并还是变基</h1><p>合并分支时，应使用<code>rebase</code>合并分支而不是使用<code>merge</code></p>
<h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><p>在分支很多的时候，<code>merge</code>会使提交变得异常混乱，查找某个提交会非常不好找，即使使用图形工具，也无法快速的查找，如果想退到某次提交更是难上加难。<code>merge</code>即使删除了合并过来的分支，其合并轨迹也依然被保留，所以还是很乱。</p>
<p><img src="//img.gagahappy.cn/blog/2021/04/using-rebase-instead-of-merge-merge.png_b1" alt="git merge" title="git merge"></p>
<h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><p>在分支很多的时候，不会产生很多的分支线，实践中应该就只有<code>master</code>,<code>release</code>等分支线，功能分支线在合并到<code>master</code> 上后都被删除，这样提交基本都在一条线上，十分清楚整洁。</p>
<p><img src="//img.gagahappy.cn/blog/2021/04/using-rebase-instead-of-merge-rebase.png_b1" alt="git rebase" title="git rebase"></p>
<h1 id="使用rebase合并分支"><a href="#使用rebase合并分支" class="headerlink" title="使用rebase合并分支"></a>使用rebase合并分支</h1><h2 id="场景分析："><a href="#场景分析：" class="headerlink" title="场景分析："></a>场景分析：</h2><p>功能<code>feature1</code>与<code>feature2</code>都在开发，<code>feature1</code>先上线，合并到了master，此时，<code>feature2</code>不应使用<code>merge</code>对<code>master</code>进行合并操作，而是使用<code>rebase</code>进行合并</p>
<ul>
<li><p>master上的提交有：<code>[m1, m2, m3]</code></p>
</li>
<li><p>feature1上的提交有: <code>[f1_01, f1_02, f1_03]</code></p>
</li>
<li><p>feature2上的提交有: <code>[f2_01, f2_02, f2_03]</code></p>
</li>
</ul>
<p><code>feature1</code>先被合并到master:</p>
<ul>
<li>master上的提交有：<code>[m1, m2, m3, f1_01, f1_02, f1_03]</code></li>
</ul>
<p><code>feature2</code>合并master</p>
<ul>
<li><code>feature2</code>上的提交有：<code>[m1, m2, m3, f1_01, f1_02, f1_03，f2_01_new, f2_02_new, f2_03_new]</code></li>
</ul>
<h2 id="合并步骤"><a href="#合并步骤" class="headerlink" title="合并步骤"></a>合并步骤</h2><p><code>feature2</code>要把<code>master</code>上的提交合并过来，使用<code>rebase</code> 而不是<code>merge</code>，这样就会不产生合并提交，在向<code>master</code>提交时就变成了<code>快速向前</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> co feature2
<span class="token function">git</span> rebase master

<span class="token comment"># 如果发生冲突，解决冲突后把冲突文件加入 index 区</span>
<span class="token function">git</span> <span class="token function">add</span> -u
<span class="token comment"># 运行continue 以使rebase完成</span>
<span class="token function">git</span> rebase --continue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>步骤1：<code>git rebase master</code>：以<code>master</code>分支做为<code>feature2</code>的基础</p>
</li>
<li><p>步骤2：计算出<code>feature2</code>与<code>master</code>上的差异提交，相当于<code>git log master...feture2</code>，即<code>[f2_01, f2_02, f2_03]</code></p>
</li>
<li><p>步骤3：把<code>[f2_01, f2_02, f2_03]</code>在<code>master</code>上的最新提交<code>f1_03</code>上进行重放生成新的提交</p>
<p><code>[f2_01_new, f2_02_new, f2_03_new]</code></p>
<p>重放生成过程：</p>
<ol>
<li>f2_01以f1_03为基础，生成新的f2_01_new</li>
<li>f2_02以f2_01_new为基础，生成新的f2_02_new</li>
<li>f2_03以f2_02_new为基础，生成新的f2_03_new</li>
</ol>
</li>
<li><p>步骤4：把当前分支设置为<code>feature2</code></p>
<p>feature2<code>rebase</code>后的提交有<code>[m1, m2, m3, f1_01, f1_02, f1_03，f2_01_new, f2_02_new, f2_03_new]</code></p>
<p>之前的旧的<code>[f2_01, f2_02, f2_03]</code> 在<code>feature2</code>上就看不到了，但依然在git中，如果没有其它分支指向它们，则会被git 回收机制删除</p>
</li>
</ul>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol>
<li>merge会让提交变得越来越混乱</li>
<li>rebase可以使主线一直保持清晰，rebase操作可以看是剪支操作，把分支剪下来，接到主线上。这样就可以把多条分支线变为一条，使所有提交变得清晰。</li>
<li>不要对已经<code>push</code>了的分支进行<code>rebase</code>，这会让已经存在的提交丢失，如果有人已经拉取了这个分支，也会给别人提交带来混乱</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言 在动态值为 nil 的接口上调用方法</title>
    <url>/golang-call-method-on-nil-of-interface-value/</url>
    <content><![CDATA[<h1 id="在动态值为-nil-的接口上调用方法"><a href="#在动态值为-nil-的接口上调用方法" class="headerlink" title="在动态值为 nil 的接口上调用方法"></a>在动态值为 nil 的接口上调用方法</h1><p>把一个值为nil的某个实现类型的变量赋给了接口变量，是否可以在这个接口变量上调用该接口的方法</p>
<p>lib/lib.go</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Name <span class="token builtin">string</span>
	Age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Superman <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	People
	color <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Mutant <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Speaking</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Fly <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>sp Superman<span class="token punctuation">)</span> <span class="token function">Speaking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"I'm %s"</span><span class="token punctuation">,</span> sp<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>sp <span class="token operator">*</span>Superman<span class="token punctuation">)</span> <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"I can fly"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>value.go</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">callMethodOnNil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> mu lib<span class="token punctuation">.</span>Mutant
	<span class="token keyword">var</span> xman <span class="token operator">*</span>lib<span class="token punctuation">.</span>Superman

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"xman:"</span><span class="token punctuation">,</span> xman<span class="token punctuation">)</span> <span class="token comment">// nil</span>
	mu <span class="token operator">=</span> xman
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"mu:"</span><span class="token punctuation">,</span> mu<span class="token punctuation">)</span> <span class="token comment">// nil</span>
	<span class="token comment">// Panic: runtime error: invalid memory address or nil pointer dereference</span>
	<span class="token comment">// 动态类值为 nil 时，不能在其上调用值方法</span>
	<span class="token comment">// mu.Speaking()</span>

	<span class="token keyword">var</span> fly lib<span class="token punctuation">.</span>Fly
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"xman:"</span><span class="token punctuation">,</span> xman<span class="token punctuation">)</span> <span class="token comment">// nil</span>
	fly <span class="token operator">=</span> xman
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"fly:"</span><span class="token punctuation">,</span> fly<span class="token punctuation">)</span> <span class="token comment">// nil</span>

	<span class="token comment">// 动态类值为 nil 时，可以在其上调用指针方法</span>
	<span class="token comment">// Fly()方法可以被调用，它的接收者是 *T 类型，且方法中没有涉及到对类型属性的调用</span>
	fly<span class="token punctuation">.</span><span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// I can fly</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol>
<li><p>值类型(T)的方法不能被调用，无论这个方法中是否涉及了对类型属性的调用</p>
</li>
<li><p>指针类型(*T)的方法可以被调用，但方法中不能涉及类型属性的调用</p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言 sync.Wait的使用</title>
    <url>/golang-sync-wait/</url>
    <content><![CDATA[<p>如何让主 goroutine 在所有其他 goroutine 都运行完后，再退出</p>
<h1 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h1><p>通过 sleep 让主 goroutine 在所有子goroutine运行结束后，再退出</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">usingSleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">go</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>缺点：无法判断 for 循环到底需要多长时间，导致估计sleep的时间要么不够，要么太长</p>
<h1 id="缓冲通道"><a href="#缓冲通道" class="headerlink" title="缓冲通道"></a>缓冲通道</h1><p>通过缓冲通道让主 goroutine 在所有子goroutine运行结束后，再退出</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">usingChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
			c <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token operator">&lt;-</span>c
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>缺点：</p>
<ul>
<li>channel应该被用在goroutine间的通信</li>
<li>如果子goroutine太多，使用通道也会消耗很多资源</li>
</ul>
<h1 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h1><p>使用 sync.WaitGroup()控制主 goroutine 在所有子goroutine运行结束后，再退出</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">waitGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 一直阻塞主goroutine，直到wg为零</span>

	<span class="token comment">// output</span>
	<span class="token comment">// 乱序输出,并不是按1,2,3,4...</span>
	<span class="token comment">// 2</span>
	<span class="token comment">// 4</span>
	<span class="token comment">// 7</span>
	<span class="token comment">// 3</span>
	<span class="token comment">// 1</span>
	<span class="token comment">// 0</span>
	<span class="token comment">// 9</span>
	<span class="token comment">// 5</span>
	<span class="token comment">// 8</span>
	<span class="token comment">// 6</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>Wait() 方法的功能是，阻塞当前的 goroutine，直到其所属值中的计数器归零</p>
</li>
<li><p>不要把增加其计数器值的操作和调用其Wait方法的代码，放在不同的 goroutine 中执行，如果同时启用的两个 goroutine ，分别调用这两个方法(add 和 wait)，那么就有可能会让这里的Add方法抛出一个 panic。最好用“先统一Add，再并发Done，最后Wait”这种标准方式，来使用WaitGroup值</p>
</li>
<li><p>计数器不能为负值，发生为负的情况是：不适当地调用Done方法和Add方法都会如此。</p>
</li>
<li><p>Done()是Add(-1)的别名</p>
</li>
<li><p>计数不为0, 阻塞Wait()的运行</p>
</li>
</ul>
<h1 id="WaitGroup对象不是一个引用类型"><a href="#WaitGroup对象不是一个引用类型" class="headerlink" title="WaitGroup对象不是一个引用类型"></a>WaitGroup对象不是一个引用类型</h1><p>在通过函数传值的时候需要使用地址，不然会出现 <code>fatal error: all goroutines are asleep - deadlock!</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">passWGByPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token function">wgDone</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">wgDone</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言 buffer.truncate 分析</title>
    <url>/golang-bytes-buffer-truncate/</url>
    <content><![CDATA[<p>对于Golang的初学者，<code>Truncate</code>方法的行为使人迷惑，它不是从 <code>buffer</code>的头部截取 <code>n 个</code>字节，而是丢弃<code>除了前n个</code>未读取的字节之外的所有未读取的字节，也是就只保留已读取的字节和还没有读取的<code>前n个</code>字节。这种逻辑确实让人不太适应</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Truncate discards all but the first n unread bytes from the buffer</span>
<span class="token comment">// but continues to use the same allocated storage.</span>
<span class="token comment">// It panics if n is negative or greater than the length of the buffer.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Buffer<span class="token punctuation">)</span> <span class="token function">Truncate</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		b<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	b<span class="token punctuation">.</span>lastRead <span class="token operator">=</span> opInvalid
	<span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"bytes.Buffer: truncation out of range"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	b<span class="token punctuation">.</span>buf <span class="token operator">=</span> b<span class="token punctuation">.</span>buf<span class="token punctuation">[</span><span class="token punctuation">:</span>b<span class="token punctuation">.</span>off<span class="token operator">+</span>n<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从源码的注释中还可以看到，截取后使用原 <code>buffer</code>保存保留下来的节字，不再额外占用内存空间。同时 n 的大小不能超过未读取字节的长度(第10行)</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">truncate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> buffer bytes<span class="token punctuation">.</span>Buffer
  str <span class="token operator">:=</span> <span class="token string">"Simple byte buffer for marshaling data."</span>
  buffer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
  p <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
  buffer<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// Simple b</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>

  buffer<span class="token punctuation">.</span><span class="token function">Truncate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment">// 截断到前10个未读节字 Simple byte buffer</span>
  buffer<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>         <span class="token comment">// 读取8个字节</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// yte buff</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>p := make([]byte, 8)</code>先读取了8个字节</li>
<li><code>buffer.Truncate(10) </code>再从没有读取的字节中取出10个，丢掉其余未读取的字节，把已读取的8个字节和取出的10个字节保存到 <code>buffer</code>中，此时buffer中的内容为<code>Simple byte buffer</code></li>
<li><code>buffer.Read(p) </code>再读取8个字节，注意：这里不是从 buffer 的头部读取，而是从未读取处开始读取，即从<code>y</code>开始读取</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言 结构体在内存中的布局</title>
    <url>/golang-layout-of-struct/</url>
    <content><![CDATA[<h1 id="一些基础知识"><a href="#一些基础知识" class="headerlink" title="一些基础知识"></a>一些基础知识</h1><ul>
<li>字节对齐</li>
<li>unsafe.Sizeof</li>
<li>unsafe.Offsetof</li>
<li>内存空洞</li>
</ul>
<h2 id="字节对齐"><a href="#字节对齐" class="headerlink" title="字节对齐"></a>字节对齐</h2><p>可以使计算机在加载和保存数据时，更加的有效率</p>
<p>通常情况下布尔和数字类型需要对齐到它们本身的大小（最多8个字节），其它的类型对齐到机器字大小</p>
<h2 id="unsafe-Sizeof"><a href="#unsafe-Sizeof" class="headerlink" title="unsafe.Sizeof"></a>unsafe.Sizeof</h2><p>返回操作数在内存中的字节大小，参数可以是任意类型的表，但不会对表达式进行求值(不求值也能知道大小，好神奇呀)</p>
<p>unsafe.Sizeof 返回的大小只包含数据结构中固定的部分。如果结构体含有指针字段，不包括针指向的内容。Go语言中非聚合类型通常有一个固定的大小，而聚合类型没有固定的大小，比如 结构体类型和数组类型</p>
<h2 id="unsafe-Offsetof"><a href="#unsafe-Offsetof" class="headerlink" title="unsafe.Offsetof"></a>unsafe.Offsetof</h2><p>函数的参数必须是一个字段 x.f，然后返回 f 字段相对于 x 起始地址的偏移量，包括可能的空洞</p>
<h2 id="内存空洞"><a href="#内存空洞" class="headerlink" title="内存空洞"></a>内存空洞</h2><p>一个聚合类型（结构体或数组）的大小至少是所有字段或元素大小的总和，或者更大。因为可能存在内存空洞，内存空洞是编译器自动添加的没有被使用的内存空间，用于保证后面每个字段或元素的地址相对于结构或数组的开始地址能够合理地对齐。内存空洞可能会存在一些随机数据，可能会对用unsafe包直接操作内存的处理产生影响</p>
<h1 id="结构体内存布局"><a href="#结构体内存布局" class="headerlink" title="结构体内存布局"></a>结构体内存布局</h1><p>设：机器字大小为8个字节</p>
<h2 id="产生的空洞"><a href="#产生的空洞" class="headerlink" title="产生的空洞"></a>产生的空洞</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  a <span class="token builtin">bool</span>
  b <span class="token builtin">int16</span>
  c <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* output
Sizeof(x)   = 32  Alignof(x)   = 8
Sizeof(x.a) = 1   Alignof(x.a) = 1 Offsetof(x.a) = 0
Sizeof(x.b) = 2   Alignof(x.b) = 2 Offsetof(x.b) = 2
Sizeof(x.c) = 24  Alignof(x.c) = 8 Offsetof(x.c) = 8
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>x</code> 占用内存大小为 32字节</li>
<li><code>x.c</code>字段是一个切片，占用24个字节(3个机器字)，<code>c.data, c.len, c.cap</code> 分别用 8个字节(1 个机器字)</li>
<li><code>x.a + x.b</code> 总共占用 3字节。用<code>x</code>的占用总字节数 <code>32 - (1 + 2 + 24) = 5</code>， 说明有5字节的内存空洞</li>
<li>由于<code>x.c</code>占用了3个机器字，所以空洞不是它产生的</li>
<li> <code>x.a + x.b = 3</code>字节，不满一个机器字(8字节)，所以a和b之间，b和c之间产生了总共5字节的空洞</li>
</ul>
<h2 id="字段偏移分析"><a href="#字段偏移分析" class="headerlink" title="字段偏移分析"></a>字段偏移分析</h2><ul>
<li><code>Offsetof(x.a) = 0</code> 说明 字段 a 处在结构的起始处，a与结构体起始处没有偏移(与起始处没有空洞)</li>
<li><code>Offsetof(x.b) = 2</code> 说明 字段 b 相对于结构体 起始处 偏移了 2 字节，而<code>Sizeof(x.a) = 1</code>说明 <code>x.a</code> 占用只占用了1字节，但 b 偏移了 2 字节，说明<code>b与a</code>之间有 1 字节的空洞，否则 b 只应该偏移 1 字节，即<code>x.a</code>的大小。</li>
<li>那么 a与b之间，总共是4字节的大小: <code>x.a</code> 1字节 + 空洞 1 字节 + <code>x.b</code> 2字节</li>
<li>如果 <code>x.c 与 x.b</code>之前没有空洞，则<code>x.c</code>只应该偏移4字节，但实际却偏移了8字节，则 说明 <code>x.c 与 x.b</code> 之间 存在 <code>8 - 4 = 4</code> 字节的空洞</li>
<li>所以 x 结构体的内存 分布是: x.a(1)____空洞(1)____x.b(2)____空洞(4)____x.c(24)</li>
<li>对齐方式：按一个机器字对齐的</li>
</ul>
<p><img src="//img.gagahappy.cn/blog/2021/05/layout-of-struct.png_b1" alt="layout of struck" title="layout of struck"></p>
<h1 id="结构体字段顺序"><a href="#结构体字段顺序" class="headerlink" title="结构体字段顺序"></a>结构体字段顺序</h1><p>Go 语言中，结构内部字段的声明顺序和它们在内存中的顺序可能是不一样的。一个编译器可以随意地重新排列每个字段的内存位置，有效的包装可以使数据结构更加紧凑，从而节省内存空间</p>
<h2 id="内存占用"><a href="#内存占用" class="headerlink" title="内存占用"></a>内存占用</h2><p>不同结构体相同字段占用内存大小也会不一样，虽然 s1，s2，s3 有着相同的字段，但s1占用了较多的内存空间</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>a <span class="token builtin">bool</span><span class="token punctuation">;</span>b <span class="token builtin">float64</span><span class="token punctuation">;</span>c <span class="token builtin">int16</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 3 words</span>
<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>a <span class="token builtin">float64</span><span class="token punctuation">;</span>b <span class="token builtin">int16</span><span class="token punctuation">;</span>c <span class="token builtin">bool</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 2 words</span>
<span class="token keyword">var</span> s3 <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>a <span class="token builtin">bool</span><span class="token punctuation">;</span>b <span class="token builtin">int16</span><span class="token punctuation">;</span>c <span class="token builtin">float64</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 2 words</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h2 id="s1占用空间"><a href="#s1占用空间" class="headerlink" title="s1占用空间"></a>s1占用空间</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">sizeof</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">=</span>   <span class="token number">24</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">=</span>    <span class="token number">8</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">1</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">1</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">0</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">2</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">2</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>综上: <code>s1.a 与 s1.b</code> 之间有 7 字节 的空洞，<code>s1.c与结构体结束处</code>(尾部)有 6 字节的空洞</p>
<p>所以: s1 总字节数是 1 + 8 + 2 + (7 + 6) 空洞 = 24 <em>byte</em>，即3个机器字，可以看出 s1 的字段与字段之间，排列的并不是很紧凑，有较大空洞，造成了内存的浪费</p>
<p>对齐方式：按一个机器字对齐的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">|</span>-a-<span class="token operator">|</span>----------holes------------<span class="token operator">|</span> <span class="token number">8</span>字节，即一个机器字
<span class="token operator">|</span>---------------b---------------<span class="token operator">|</span> <span class="token number">8</span>字节，即一个机器字
<span class="token operator">|</span>---c---<span class="token operator">|</span>---------holes---------<span class="token operator">|</span> <span class="token number">8</span>字节，也可看出是按一个机器字对齐的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h2 id="s2-占用空间"><a href="#s2-占用空间" class="headerlink" title="s2 占用空间"></a>s2 占用空间</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">sizeof</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">=</span>   <span class="token number">16</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">=</span>    <span class="token number">8</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">0</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">2</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">2</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">1</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">1</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>综上: <code>s2.a</code> 的大小是一个机器字，本身就是对齐的，且是所有字段中长度最大的，与 <code>s2.b</code>之间没有空洞，<code>s2.c紧贴s2.b</code>，它们之间也没有空洞，<code>s2.c与结构体结束处</code>(尾部)有 5(8-2+1) 字节的空洞</p>
<p>所以: <code>s2</code> 总字节数是 <code>8 + 2 + 1 + (5) 空洞 = 16 byte</code>，即2个机器字，可以看出 s2 的字段与字段之间，排列是很紧凑，可以大大节省内存空间</p>
<p>对齐方式：按一个机器字对齐的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">|</span>---------------a---------------<span class="token operator">|</span> <span class="token number">8</span>字节，即一个机器字
<span class="token operator">|</span>---b---<span class="token operator">|</span>-c-<span class="token operator">|</span>-------holes-------<span class="token operator">|</span> <span class="token number">8</span>字节，即一个机器字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h2 id="s3占用空间"><a href="#s3占用空间" class="headerlink" title="s3占用空间"></a>s3占用空间</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">sizeof</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token operator">=</span>   <span class="token number">16</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token operator">=</span>    <span class="token number">8</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">1</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">1</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">0</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">2</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">2</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">2</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>对齐方式：按一个机器字对齐的</p>
<p>s3 布局与 s2 相似，可以看成是上下两层对调了，但排列是很紧凑的，也是2个机器字</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">|</span>-a-<span class="token operator">|</span>---b---<span class="token operator">|</span>-------holes-------<span class="token operator">|</span> <span class="token number">8</span>字节，即一个机器字
<span class="token operator">|</span>---------------c---------------<span class="token operator">|</span> <span class="token number">8</span>字节，也可看出是按一个机器字对齐的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h1 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h1><p>未来的Go语言编译器应该会默认优化结构体的顺序，当然应该也能够指定具体的内存布局，相同讨论请参考 <a href="https://github.com/golang/go/issues/10014">Issue10014</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS 安装 gdb</title>
    <url>/gdb-setup-on-macos/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> gdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>也可以从源码进安装，<a href="https://www.gnu.org/software/gdb/">官网</a>，目前GDB对下列语言进行了支持</p>
<blockquote>
<p>Ada<br>Assembly<br>C<br>C++<br>D<br>Fortran<br>Go<br>Objective-C<br>OpenCL<br>Modula-2<br>Pascal<br>Rust</p>
</blockquote>
<p>安装后还不能直接使用，MacOS 对安全性有效高的要求，不允许没有许可的程序运行其它程序</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb helloworld
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> run

Unable to <span class="token function">find</span> Mach task port <span class="token keyword">for</span> process-id <span class="token number">798</span>: <span class="token punctuation">(</span>os/kern<span class="token punctuation">)</span> failure <span class="token punctuation">(</span>0x5<span class="token punctuation">)</span>.
 <span class="token punctuation">(</span>please check gdb is codesigned - see taskgated<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>提示<code>please check gdb is codesigned - see taskgated(8)</code>，原因是还没有为<code>gdb</code>签名，需要在系统的<code>Keychain</code>中创建用于签名的证书</p>
<h1 id="创建certificate"><a href="#创建certificate" class="headerlink" title="创建certificate"></a>创建certificate</h1><p>步骤如下：</p>
<ol>
<li>Launch Keychain Access application: Applications &gt; Utilities &gt; Keychain Access.</li>
<li>From the Keychains list on the left, right-click on the System item and select Unlock Keychain “System”.</li>
<li>From the toolbar, go to Keychain Access &gt; Certificate Assistant &gt; Create a Certificate.</li>
<li>Choose a name (e.g. gdb-cert).</li>
<li>Set Identity Type to Self Signed Root.</li>
<li>Set Certificate Type to Code Signing.</li>
<li>Check the Let me override defaults checkbox.</li>
<li>At this point, you can go on with the installation process until you get the Specify a Location For The Certificate dialogue box. Here you need to set Keychain to System. Finally, you can click on the Create button.</li>
<li>After these steps, you can see the new certificate under System keychains. From the contextual menu of the newly created certificate (right-click on it) select the Get info option. In the dialogue box, expand the Trust item and set Code signing to Always Trust.</li>
<li>Then, from the Keychains list on the left, right-click on the System item and select Lock Keychain “System”.</li>
<li>Finally, reboot your system.</li>
</ol>
<h1 id="gdb签名"><a href="#gdb签名" class="headerlink" title="gdb签名"></a>gdb签名</h1><p>在创建你自己的证书后，就可以给gdb进行签名了，在签名前要先配置<code>gdb-entitlement.xml</code>文件，它允许MacOs信任gdb</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">plist</span> <span class="token name">PUBLIC</span> <span class="token string">"-//Apple//DTD PLIST 1.0//EN"</span>
<span class="token string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plist</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dict</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>com.apple.security.cs.allow-jit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>com.apple.security.cs.allow-unsigned-executable-memory<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>com.apple.security.cs.allow-dyld-environment-variables<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>com.apple.security.cs.disable-library-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>com.apple.security.cs.disable-executable-page-protection<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>com.apple.security.cs.debugger<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>com.apple.security.get-task-allow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dict</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plist</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在命令行运行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">codesign --entitlements gdb-entitlement.xml -fs gdb-cert <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> gdb<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>-fs</code>: 要填写你刚刚生成的证书的名子，<code>$(which gdb)</code>: 是gdb的安装路径</p>
<p>接着在<code>home</code>目录创建<code>~/.gdbinit</code>文件，并写入如下内容</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"set startup-with-shell off"</span> <span class="token operator">>></span> ~/.gdbinit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h1 id="编译文件"><a href="#编译文件" class="headerlink" title="编译文件"></a>编译文件</h1><p>为了解决<code>No symbol table is loaded</code>问题，可以在编译时加入<code>-ggdb</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc hello_world.c -o hello_world -ggdb

<span class="token comment"># 使用示例</span>
gdb hello_world
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> list
<span class="token number">1</span>	<span class="token comment">#include &lt;stdio.h></span>
<span class="token number">2</span>
<span class="token number">3</span>	int my_strlen<span class="token punctuation">(</span>char *string<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4</span>
<span class="token number">5</span>	int main<span class="token punctuation">(</span>int argc, char const *argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">6</span>	<span class="token punctuation">&#123;</span>
<span class="token number">7</span>	  // char *string<span class="token punctuation">;</span>
<span class="token number">8</span>	  // string <span class="token operator">=</span> <span class="token string">"hello world haha"</span><span class="token punctuation">;</span>
<span class="token number">9</span>	  char string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world haha"</span><span class="token punctuation">;</span>
<span class="token number">10</span>	  printf<span class="token punctuation">(</span><span class="token string">"The string '%s' len is <span class="token entity" title="\&quot;">\"</span>%d<span class="token entity" title="\&quot;">\"</span><span class="token entity" title="\n">\n</span>"</span>, string, my_strlen<span class="token punctuation">(</span>string<span class="token punctuation">))</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> run
Starting program: /Users/ga/m/book/c-lang/ch02-basic/hello_world
<span class="token punctuation">[</span>New Thread 0x2603 of process <span class="token number">6002</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>New Thread 0x1803 of process <span class="token number">6002</span><span class="token punctuation">]</span>
warning: unhandled dyld version <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>
The string <span class="token string">'hello world haha'</span> len is <span class="token string">"16"</span>
<span class="token punctuation">[</span>Inferior <span class="token number">1</span> <span class="token punctuation">(</span>process <span class="token number">6002</span><span class="token punctuation">)</span> exited normally<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="使用gdb调试golang"><a href="#使用gdb调试golang" class="headerlink" title="使用gdb调试golang"></a>使用gdb调试golang</h1><p>本博没有成功，一直提示错误<code>No symbol table is loaded.  Use the &quot;file&quot; command.</code> ，后来查看了Go的官方文档，官方建议使用<code>Delve</code>进行调试。<a href="https://golang.org/doc/gdb">官方原文</a></p>
<blockquote>
<p><em>Note that <a href="https://github.com/go-delve/delve">Delve</a> is a better alternative to GDB when debugging Go programs built with the standard toolchain. It understands the Go runtime, data structures, and expressions better than GDB. Delve currently supports Linux, OSX, and Windows on <code>amd64</code>. For the most up-to-date list of supported platforms, please see <a href="https://github.com/go-delve/delve/tree/master/Documentation/installation">the Delve documentation</a>.</em></p>
</blockquote>
<p>并且在官方给出的示例中，也不保证你照着运行也可以成功</p>
<blockquote>
<p>In short, the instructions below should be taken only as a guide to how to use GDB when it works, not as a guarantee of success. Besides this overview you might want to consult the <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/">GDB manual</a>.</p>
</blockquote>
<p>最后祝你一切顺利</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>gdb</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 创建标签</title>
    <url>/git-create-tag/</url>
    <content><![CDATA[<h1 id="Git-创建标签"><a href="#Git-创建标签" class="headerlink" title="Git 创建标签"></a>Git 创建标签</h1><p>Git 标签分两种</p>
<ul>
<li>附注标签: annotated: 是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息</li>
<li>轻量级标签: lightweight: 像一个不会改变的分支——它只是某个特定提交的引用。在实践中不推荐使用</li>
</ul>
<h2 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 附注标签
git tag -a v0.0.1 -m &quot;first release try&quot;

# 发布标签
# 标签不会随push而自动被push到远程，需要单独push
git push origin v0.0.1

# 给某个commit单独打tag
# 这种操作多用于给历史commit打tag,原因可能是当时没有打
git tag -a v0.0.2 2234093<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag

<span class="token comment"># 查看某个tag的具体内容</span>
<span class="token function">git</span> show v0.0.1
<span class="token function">git</span> cat-file -p v0.0.1

<span class="token comment"># 删除标签</span>
<span class="token function">git</span> tag -d v0.0.1
<span class="token operator">=</span><span class="token operator">></span> Deleted tag <span class="token string">'v0.0.1'</span> <span class="token punctuation">(</span>was 79db751<span class="token punctuation">)</span>

<span class="token comment"># 删除远程标签</span>
<span class="token function">git</span> push origin :v0.0.1

<span class="token comment"># 查看tag的sha1</span>
<span class="token function">cat</span> .git/refs/tags/v5.4.1 <span class="token comment"># 在标签被删除的时候会显示这个值</span>
<span class="token comment"># => 79db751</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="签名tag"><a href="#签名tag" class="headerlink" title="签名tag"></a>签名tag</h2><p>前置条件：要先配置GPG</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 强制给tag 签名</span>
<span class="token comment"># 直接编辑  ~/.gitconfig 也可以</span>
<span class="token function">git</span> config --global tag.forcesignannotated <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 Gitalk 评论系统</title>
    <url>/gitalk-install/</url>
    <content><![CDATA[<h1 id="申请GitHub应用"><a href="#申请GitHub应用" class="headerlink" title="申请GitHub应用"></a>申请GitHub应用</h1><h2 id="1-注册一个新应用"><a href="#1-注册一个新应用" class="headerlink" title="1.  注册一个新应用"></a>1.  注册一个新应用</h2><p><a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a> 有三项内容必须填写</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">Application name：这个随意填写
Homepage URL：你的网站的URL地址，包含http部分。
Authorization callback URL：你的网站的URL地址，包含http部分，和上面的 Homepage URL 一致就行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="2-Homepage-URL与Authorization-callback-URL的填写"><a href="#2-Homepage-URL与Authorization-callback-URL的填写" class="headerlink" title="2. Homepage URL与Authorization callback URL的填写"></a>2. <code>Homepage URL</code>与<code>Authorization callback URL</code>的填写</h2><ol>
<li>如果你的网站是host在github上的，是通过github分配给你的网址进行访问的，直接填写github分配给你的网站就可以，类似 <code>yourgithub.github.io</code></li>
<li>如果你有自己的域名，但网站内容是host在github上的，是通过cname的方式访问的，那么这两项都填你的域名</li>
<li>如果你有自己的域名，也有自己的站点，那么这两项都填你的域名</li>
</ol>
<p>在调试阶段，可以把这两项设置为你的本地地址，这样方便测试，而不用一次又一次的部署网站，等测试好之后再统一部署。</p>
<h2 id="3-生成Client信息"><a href="#3-生成Client信息" class="headerlink" title="3. 生成Client信息"></a>3. 生成Client信息</h2><p>点击 “register application”完成注册，系统会生成<code>Client ID</code>和<code>Client secrets</code>(需要手动点一下旁边的按钮)</p>
<h1 id="配置Gitalk"><a href="#配置Gitalk" class="headerlink" title="配置Gitalk"></a>配置Gitalk</h1><h2 id="通过Next主题进行配置"><a href="#通过Next主题进行配置" class="headerlink" title="通过Next主题进行配置"></a>通过<code>Next</code>主题进行配置</h2><p>如果你的网点是用Hexo驱动，且主题是<code>Next</code>，这个主题已经为我们配置了gitalk，只需配置即可</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">github_id</span><span class="token punctuation">:</span> 你的Github登录账号
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> gitalk 你的 Github仓库的名称
  <span class="token key atrule">client_id</span><span class="token punctuation">:</span> 上面刚刚申请的 Client ID
  <span class="token key atrule">client_secret</span><span class="token punctuation">:</span> 上面刚刚申请的 Client Secret
  <span class="token key atrule">admin_user</span><span class="token punctuation">:</span> 你的Github登录账号
  <span class="token key atrule">distraction_free_mode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">proxy</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cors<span class="token punctuation">-</span>anywhere.azm.workers.dev/https<span class="token punctuation">:</span>//github.com/login/oauth/access_token
  language<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="使用官网配置"><a href="#使用官网配置" class="headerlink" title="使用官网配置"></a>使用官网配置</h2><p>官网地址：<a href="https://github.com/gitalk/gitalk">https://github.com/gitalk/gitalk</a></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> gitalk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gitalk</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  clientID<span class="token operator">:</span> <span class="token string">'GitHub Application Client ID'</span><span class="token punctuation">,</span>
  clientSecret<span class="token operator">:</span> <span class="token string">'GitHub Application Client Secret'</span><span class="token punctuation">,</span>
  repo<span class="token operator">:</span> <span class="token string">'GitHub repo'</span><span class="token punctuation">,</span>      <span class="token comment">// The repository of store comments,</span>
  owner<span class="token operator">:</span> <span class="token string">'GitHub repo owner'</span><span class="token punctuation">,</span>
  admin<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'GitHub repo owner and collaborators, only these guys can initialize github issues'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  id<span class="token operator">:</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>      <span class="token comment">// Ensure uniqueness and length less than 50</span>
  distractionFreeMode<span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token comment">// Facebook-like distraction free mode</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

gitalk<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'gitalk-container'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p>注：官网配置的参数和Hexo主题Next的参数是通用的</p>
<ul>
<li><code>repo</code>: 要求填写你的Github仓库的名称，这个仓库可以是你的github上的任意一个，但必须是公开的。评论内容会以 <code>issue</code>的形式保存到仓库的<code>issues</code>中，所以建议为评论单独新建一个仓库</li>
<li><code>admin</code>: 指定了可以初始化文章评论的github用户，一般只填写你自己就可以了</li>
<li><code>id</code>: 文章的URL路径，不包括域名，这个路径要求必须是唯一的，且不能超过50个字符(如果超过了，可以使用md5等工具对路径进行摘要缩短长度即可)。每一扁文章的评论和这个路径相关联，所以即使域名不同，只要文章的URL一样，就会显示相关联的评论。在Next主题中是自动配置的Hexo主题Next的参数定义在<code>layout/_third-party/comments/gitalk.njk</code>中</li>
<li><code>distractionFreeMode</code>：是否是聚精会神模式，即评论框在写评论的时候，周围是否变成黑</li>
</ul>
<h1 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h1><p>1. Error: Not Found：一般是仓库名称没有正确设置，请依据上面的参数说明部分进行设置</p>
<p>2. Related Issues not found：未找到相关的issue进行评论，出现这种情况是因为文章评论还未初始化，只需要点击下面的按钮，登录 GitHub 账户即可</p>
<p>3. 评论区一直加载不上：配置中的<code>proxy</code>地址不正确或已经失效。官网默认地址是<code>https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</code>。如果你使用的是Next主题，请确保也是这个地址</p>
<p>4.  评论时是黑色的：设置<code>distractionFreeMode</code>为false</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言 对指针类型接收者本身赋值</title>
    <url>/golang-assign_receiver_of_ptr/</url>
    <content><![CDATA[<p><code>r</code> 是指针类型接收者，可以对其进行解引赋值。结构体的<code>0值</code>不是<code>nil</code>，而是其各个成员的<code>0值</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">newReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> reader <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	buf  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	r<span class="token punctuation">,</span> w <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">newReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	r <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token comment">// &amp;&#123;[] 0 0&#125;</span>
	r<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token comment">// &amp;&#123;[0 0 0 0 0] -1 -1&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>reader<span class="token punctuation">)</span> <span class="token function">reset</span><span class="token punctuation">(</span>buf <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token operator">*</span>r <span class="token operator">=</span> reader<span class="token punctuation">&#123;</span>buf<span class="token punctuation">:</span> buf<span class="token punctuation">,</span> r<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> w<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言 bufio.Peek 源码</title>
    <url>/golang-bufio-reader-peek/</url>
    <content><![CDATA[<p> <code>bufio.Peek(n)</code>返回前N个未读字节 ，不会更改已读计数的值。在方法调用后，要查看返回参数<code>error</code>是否为nil，以确保操作满足要求</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Reader<span class="token punctuation">)</span> <span class="token function">Peek</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrNegativeCount
	<span class="token punctuation">&#125;</span>

	b<span class="token punctuation">.</span>lastByte <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
	b<span class="token punctuation">.</span>lastRuneSize <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>

	<span class="token comment">// 当未读字节数小于n，且缓冲区不满(b.w-b.r &lt; len(b.buf))，</span>
	<span class="token comment">// 即缓冲区中从头到尾必须都是未读字节才算是缓冲区已经满</span>
	<span class="token comment">// 且 b.err 为nil，这三者都满足时，开始调用b.fill()填充缓冲区</span>
	<span class="token comment">// fill()方法会把未读数据移动到缓冲区头部，并把后面空出来的部分写满</span>
	<span class="token comment">// for 保证了至少可以把缓冲区填满</span>
	<span class="token keyword">for</span> b<span class="token punctuation">.</span>w<span class="token operator">-</span>b<span class="token punctuation">.</span>r <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>w<span class="token operator">-</span>b<span class="token punctuation">.</span>r <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>buf<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		b<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// b.w-b.r &lt; len(b.buf) => buffer is not full</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// 当要读取的字节数大于缓冲区长度时，返回所有未读节字，并附带错误信息</span>
	<span class="token keyword">if</span> n <span class="token operator">></span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> b<span class="token punctuation">.</span>buf<span class="token punctuation">[</span>b<span class="token punctuation">.</span>r<span class="token punctuation">:</span>b<span class="token punctuation">.</span>w<span class="token punctuation">]</span><span class="token punctuation">,</span> ErrBufferFull
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// 0 &lt;= n &lt;= len(b.buf)</span>
	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	<span class="token comment">// 当要读取的字节数大于所有未读节字数时，返回所有未读节字，并附带错误信息</span>
	<span class="token keyword">if</span> avail <span class="token operator">:=</span> b<span class="token punctuation">.</span>w <span class="token operator">-</span> b<span class="token punctuation">.</span>r<span class="token punctuation">;</span> avail <span class="token operator">&lt;</span> n <span class="token punctuation">&#123;</span>
		<span class="token comment">// not enough data in buffer</span>
		n <span class="token operator">=</span> avail
		err <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">readErr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			err <span class="token operator">=</span> ErrBufferFull
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 当 n 小于 未读字节数时，程序直接跳到这里</span>
	<span class="token keyword">return</span> b<span class="token punctuation">.</span>buf<span class="token punctuation">[</span>b<span class="token punctuation">.</span>r <span class="token punctuation">:</span> b<span class="token punctuation">.</span>r<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> err
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言 截取0长度的Slice</title>
    <url>/golang-create-slice-with-zero-length/</url>
    <content><![CDATA[<p>截取0长度的<code>slice</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span>
	s2 <span class="token operator">:=</span> s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token comment">// 5 0 []</span>

	s2 <span class="token operator">=</span> s1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token comment">// 0 0 []</span>

	s2 <span class="token operator">=</span> s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token comment">// 5 1 [2]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>s1[1:1]</code>表示截取的位置从第一个元素最后一个字节的后面开始，到第一个元素最后一个字节的后面结束，所以生成的<code>slice</code>的长度是0，容量是5(6-1)</p>
<p><code>s1[6:6]</code>表示截取的位置从最后一个元素最后一个字节的后面开始，到最后一个元素最后一个字节的后面结束，所以生成的<code>slice</code>的长度是0，容量是0(6-6)</p>
<p><code>s1[1:2]</code>表示截取的位置从第一个元素最后一个字节的后面开始，到第二个元素最后一个字节的后面结束，在这个范围内的元素只有 <code>2</code>，所以生成的<code>slice</code>的长度是1，容量是5(1-6)</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言 外部测试包</title>
    <url>/golang-external-test-packages/</url>
    <content><![CDATA[<h1 id="外部包"><a href="#外部包" class="headerlink" title="外部包"></a>外部包</h1><p>外部包使用<code>package xxx_test</code>方式来命名，比如<code>package bytes_test</code>就是<code>src/btyes/buffer_test.go</code>外部包的命名方式，<code>_test</code>后缀告诉go test工具它应该建立一个额外的包来运行测试。</p>
<p>通过外部测试包的方式可以解决导入包循环依赖的问题，因为外部测试包是一个独立的包，所以能够导入那些<code>依赖待测代码本身</code>的其他辅助包；包内的测试代码就无法做到这点。注意：外部包不能被其它包导入</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 文件 src/btyes/buffer_test.go</span>
<span class="token keyword">package</span> bytes_test
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token punctuation">.</span> <span class="token string">"bytes"</span>
	<span class="token operator">...</span> 代码片段
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TestNewBuffer</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	buf <span class="token operator">:=</span> <span class="token function">NewBuffer</span><span class="token punctuation">(</span>testBytes<span class="token punctuation">)</span>
	<span class="token function">check</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"NewBuffer"</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> testString<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token operator">...</span> 代码片段
<span class="token keyword">func</span> <span class="token function">empty</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">,</span> testname <span class="token builtin">string</span><span class="token punctuation">,</span> buf <span class="token operator">*</span>Buffer<span class="token punctuation">,</span> s <span class="token builtin">string</span><span class="token punctuation">,</span> fub <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="测试技巧"><a href="#测试技巧" class="headerlink" title="测试技巧"></a>测试技巧</h1><p>如果在测试中，需要对包内部的没有导出的函数进行测试，可以利用包内的 <code>_test.go</code>文件，如 <code>export_test.go</code>，在这个文件中将包的内部函数、方法导出，以供外部测试包使用。<code>indexBytePortable</code>方法在 src/bytes/bytes.go 中定义</p>
<p><code>src/bytes/bytes.go</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">indexBytePortable</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> c <span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>把<code>bytes</code>包中的内部方法导出，供外部包<code>package bytes_test</code>使用</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// src/bytes/export_test.go</span>
<span class="token keyword">package</span> bytes
<span class="token comment">// Export func for testing</span>
<span class="token keyword">var</span> IndexBytePortable <span class="token operator">=</span> indexBytePortable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>外部包使用导出的方法<code>IndexBytePortable</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// src/bytes/bytes_test.go</span>
<span class="token keyword">package</span> bytes_test

<span class="token keyword">func</span> <span class="token function">TestIndexByte</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> indexTests <span class="token punctuation">&#123;</span>
		<span class="token operator">...</span> 代码片段
		posp <span class="token operator">:=</span> <span class="token function">IndexBytePortable</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
		<span class="token keyword">if</span> posp <span class="token operator">!=</span> tt<span class="token punctuation">.</span>i <span class="token punctuation">&#123;</span>
			t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">`indexBytePortable(%q, '%c') = %v`</span><span class="token punctuation">,</span> tt<span class="token punctuation">.</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> posp<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试文件<code>export_test.go</code>并没有定义测试代码，它只是通过<code>bytes.IndexBytePortable</code>简单导出了内部的<code>indexBytePortable</code>函数，这个技巧可以广泛用于位于外部测试包的白盒测试</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li><p>Go语言规范是禁止包的循环依赖</p>
</li>
<li><p>go list命令 查看包对应目录中哪些Go源文件</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> list <span class="token operator">-</span>f<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>GoFiles<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> bytes <span class="token comment">// => [buffer.go bytes.go reader.go]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>查看包内部的测试代码</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> list <span class="token operator">-</span>f<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>TestGoFiles<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> bytes <span class="token comment">// => [export_test.go]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>XTestGoFiles表示的是属于外部测试包的测试代码</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> list <span class="token operator">-</span>f<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>XTestGoFiles<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> bytes 
<span class="token comment">// => [buffer_test.go bytes_test.go compare_test.go example_test.go reader_test.go]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言 fmt对string中零值的处理</title>
    <url>/golang-fmt-string-with-zerovalue/</url>
    <content><![CDATA[<p><code>fmt</code>格式化含有0值的<code>string</code>时，是如何显示的</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'A'</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"cap(%d),len(%d)\n"</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"buf:"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"buf:%q\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"buf:"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>

	str <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>
	str <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">" world"</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// => 16</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>      <span class="token comment">// => helloA world</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* output
cap(10),len(10)
buf: [104 101 108 108 111 0 0 0 65 0]
buf:"hello\x00\x00\x00A\x00"
buf: helloA
16
helloA world
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>1. 使用<code>fmt</code>打印<code>string(buf)</code>虽然显示为<code>helloA</code>，看上去字符数变少了，只有6个(0值没有显示，其<code>ascii码</code>是不可打印码)，但底层数据没变，依然是<code>[104 101 108 108 111 0 0 0 65 0]</code></p>
<p>2. 格式化参数<code>%q</code>直接对0值进行了输出<code>hello\x00\x00\x00A\x00</code>，它打印了<code>string</code>中的每一个字节，包括不可打印的字节</p>
<p>3. <code>str + &quot; world&quot;</code>的长度为16，也证明了<code>str</code>中的0值没有被去除(10 + 6 = 16)</p>
<p>4.使用<code>fmt</code>查看数据”长什么样子”有时候是不准确的</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言 io.Writer 接口</title>
    <url>/golang-io-writer/</url>
    <content><![CDATA[<h1 id="io-Writer接口实现要求"><a href="#io-Writer接口实现要求" class="headerlink" title="io.Writer接口实现要求"></a><code>io.Writer</code>接口实现要求</h1><p>开始以为只是实现了<code>Write</code>方法就行，看了源码发现还有很多细节上的要求</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// src/io/io.go</span>
<span class="token keyword">type</span> Writer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Write</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>1.要把 <code>p</code>写入实现类型的底层数据中</p>
<p>2.要返回实际写入的长度和在写入时遇到的错误，如果实际写入的长度小于<code>len(p)</code>，返回的<code>err</code>必须是非<code>nil</code>的</p>
<p>3. <code>p</code>不能在方法内部被修改，即使临时性的也不可以</p>
<p>4. 不能对<code>p</code>进行保存</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言 程序性能分析</title>
    <url>/golang-pprof/</url>
    <content><![CDATA[<h1 id="性能分析API"><a href="#性能分析API" class="headerlink" title="性能分析API"></a>性能分析API</h1><p>可以使用标准库中的 <code>runtime/pprof</code>，<code>runtime/trace</code>，<code>net/http/pprof</code>这三个包中提供的API来对Go程序进行性能分析，其中 <code>runtime/pprof</code>包中还提供了生成性能分析概要文件的API。概要文件是以二进制格式存储的，<code>go test</code> 命令也可以生成概要文件</p>
<h1 id="概要文件的读取"><a href="#概要文件的读取" class="headerlink" title="概要文件的读取"></a>概要文件的读取</h1><p>概要文件有：CPU 概要文件（CPU Profile）、内存概要文件（Mem Profile）和阻塞概要文件（Block Profile），是Go程序在某一段时间内，对相关指标采样后，得到的概要信息。Go标准工具中<code>go tool pprof</code> 和 <code>go tool trace</code>可以解析概要文件中的信息，以可以阅读的方式展现出来，供分析性能使用</p>
<h1 id="概要文件的生成"><a href="#概要文件的生成" class="headerlink" title="概要文件的生成"></a>概要文件的生成</h1><h2 id="protocol-buffers"><a href="#protocol-buffers" class="headerlink" title="protocol buffers"></a>protocol buffers</h2><p>概要文件其实就是 由 <code>protocol buffers</code> 生成的二进制数据流，<code>protocol buffers</code> 是一种数据序列化协议，它定义了程序对象如 <code>map</code>，结构体，数组等与字节之间如何相互转化。同时 <code>protocol buffers</code> 不仅仅是协议，也可以作为转化工具来使用。<code>protocol buffers</code> 会对生成的字节流进行压缩，它的体积比(<code>JSON，XML</code>)都要更小，所以也更适合用于数据在网上传输</p>
<h2 id="StartCPUProfile-函数"><a href="#StartCPUProfile-函数" class="headerlink" title="StartCPUProfile 函数"></a>StartCPUProfile 函数</h2><p>对CPU信息进行定时采样生成概要文件，默认采样频率是100Hz，即每秒采样100次，调用<code>pprof.StartCPUProfile()</code>函数开始进行采样，调用<code>pprof.StopCPUProfile()</code>停止采样</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">StopCPUProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cpu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> cpu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token operator">!</span>cpu<span class="token punctuation">.</span>profiling <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	cpu<span class="token punctuation">.</span>profiling <span class="token operator">=</span> <span class="token boolean">false</span>
	runtime<span class="token punctuation">.</span><span class="token function">SetCPUProfileRate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token operator">&lt;-</span>cpu<span class="token punctuation">.</span>done
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>StopCPUProfile</code>是通过设置<code>SetCPUProfileRate(0)</code>为0，来停止采样的，而<code>pprof.StartCPUProfile</code> 是把<code>runtime.SetCPUProfileRate(100)</code>设置为100来开始采样的</p>
<h2 id="runtime-MemProfileRate值"><a href="#runtime-MemProfileRate值" class="headerlink" title="runtime.MemProfileRate值"></a>runtime.MemProfileRate值</h2><p>对堆内存的使用进行采样，通过对其赋值指定平均每分配多少个字节，就对堆内存的使用情况进行一次采样。默认值是512KB，对其赋0值表示停止采样。把收集到的采样信息写入文件需要调用<code>WriteHeapProfile(f)</code>函数，它会把概要文件信息写入传入的参数文件<code>f</code>中。<code>WriteHeapProfile(f)</code>函数记录的并不是实时的内存概要信息，而是最近一次内存垃圾工作完成后产生的。要得到实时信息可以使用<code>runtime.ReadMemStats()</code>函数</p>
<h2 id="SetBlockProfileRate函数"><a href="#SetBlockProfileRate函数" class="headerlink" title="SetBlockProfileRate函数"></a>SetBlockProfileRate函数</h2><p>对阻塞概要信息的采样进行设定，其参数<code>rate</code>的值表示，当阻塞持续多少纳秒后对其进行进行采样。如果这个值小于等于0，则停止采样。把概要信息写入文件需要调用<code>pprof.Lookup(&quot;block&quot;)</code>，并传入值为<code>block</code>的参数，函数会返回一个<code>*pprof.Profile</code>类型的值，对这个值调用<code>WriteTo(w io.Writer, debug int)</code>方法，把概要信息写入文件。这个方法的第一个参数传入要写入概要信息的文件</p>
<h1 id="pprof-Lookup函数的使用"><a href="#pprof-Lookup函数的使用" class="headerlink" title="pprof.Lookup函数的使用"></a>pprof.Lookup函数的使用</h1><p><code>Lookup(name string)</code>通过给定的<code>name</code> 的值，返回对应的概要信息。可以得到的概要信息有<code>goroutine, threadcreate, heap, allocs, block, mutex</code>这6个预定义指标的概要信息，它们都是<code>*Profile</code>类型的值，可以通过调用<code>WriteTo(w io.Writer, debug int)</code>方法，把采样的概要信息写入指定的文件中(通过第一个参数设置)，第二个参数表示了写入信息的详细细节，有<code>0,1,2</code>3个值，这6个指标使用不同的值写入细节信息</p>
<ul>
<li><code>goroutine</code>：此指标可以收集正在使用的所有 goroutine 的堆栈跟踪信息</li>
<li><code>heap、allocs</code>：此指标会收集与堆内存的分配和释放有关的采样信息，可以看成是内存概要信息，heap 与 allocs 的展示视角不同</li>
<li><code>threadcreate</code>：此指标会收集堆栈跟踪信息。这些堆栈跟踪信息中的每一个都会描绘出一个代码调用链，这些调用链上的代码都导致新的操作系统线程产生</li>
<li><code>block</code>：此指标会收集因争用同步原语而被阻塞的那些代码的堆栈跟踪信息</li>
<li><code>mutex</code>：此指标会收集曾经作为同步原语持有者的那些代码，它们的堆栈跟踪信息</li>
</ul>
<h1 id="使用在线网页查看程序性能"><a href="#使用在线网页查看程序性能" class="headerlink" title="使用在线网页查看程序性能"></a>使用在线网页查看程序性能</h1><p>在我们编写网络服务程序的时候，使用<code>net/http/pprof</code>包要比直接使用<code>runtime/pprof</code>包方便和实用很多，这个代码包可以为网络服务的监测提供有力的支撑</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">"net/http/pprof"</span>
log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">"localhost:8082"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>直接访问<a href="http://localhost:8082/debug/pprof">http://localhost:8082/debug/pprof</a> 可以看到<code>goroutine,threadcreate,heap, allocs,block,mutex</code>这6个指标的概要信息。</p>
<p>当访问<a href="http://localhost:8082/debug/pprof/profile">http://localhost:8082/debug/pprof/profile</a> 时，程序会执行对 CPU 概要信息的采样，可以通过加入参数<code>seconds</code>来控制对cpu的访问时间(默认是30秒)，当采样结束后，会提示你下载概要文件。你也可以执行下面命令，直接读取概要文件</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> tool pprof http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">6060</span><span class="token operator">/</span>debug<span class="token operator">/</span>pprof<span class="token operator">/</span>profile?seconds<span class="token operator">=</span><span class="token number">60</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 中的文件描述符</title>
    <url>/linux-fd-in-linux/</url>
    <content><![CDATA[<h1 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h1><p>即<code>file descriptor</code>，简称<code>FD</code> ，用于指代被打开的文件，用一个非负的整数表示</p>
<h1 id="对文件描述符的误区"><a href="#对文件描述符的误区" class="headerlink" title="对文件描述符的误区"></a>对文件描述符的误区</h1><p>每个程序启动的时候，都会打开3个文件，分别是，0标准输入，1标准输出，2标准错误，此后再打开文件的文件描述符就是3，依次类推。之前的误区是，当在进程中打开一个文件，它的文件描述符应该已经很大了，不应该是<code>3</code>，因为系统本身已经运行了很多程序。正确的应该是：进程只能看到自己的文件描述符，每个进程的文件描述符的编号都是从0开始，进程启动，默认都会打开<code>标准输入，标准输出，标准错误</code>这三个文件，之后再打开的文件的描述符从编号3开始</p>
<h1 id="文件件描述符列表"><a href="#文件件描述符列表" class="headerlink" title="文件件描述符列表"></a>文件件描述符列表</h1><p>每个进程都有着自己的文件描述符列表。进程A启动后，拥有<code>stdin,stdout,stderr</code>这三个文件描述符 ，再打开一个文件，这个文件的文件描述符就是3。进程B启动后，拥有<code>stdin,stdout,stderr</code>这三个文件描述符，再打一个文件，它的文件描述符也是3，和进程A的一样。所以，不同进程，可以拥有相同的文件描述符。</p>
<p>当一个文件在同一个进程中，被打开多次，那么这个文件具有不同的文件描述符，在同一个进程中，每个文件描述符只能对应一个文件。同一个进程，不同文件描述符可以指向同一个文件。</p>
<p>不同进程，如果都打开了同一个文件(文件描述符都指向同一个文件)，那么它们都具有这个文件的句柄，其中一个进程对文件的修改，对其它进程是可见的。比如进程A对文件写入了10个字节，进程B在对文件进行写入时，是从第11个字节处开始写入的，而不是从文件头开始写入，这些操作包括<code>read(),write(),seek()</code>等</p>
<h1 id="文件描述符限制"><a href="#文件描述符限制" class="headerlink" title="文件描述符限制"></a>文件描述符限制</h1><p>内核为了不让某个进程消耗掉所有的文件资源，会对单个进程最大打开文件数做默认值处理（称之为用户级限制），默认值一般是1024。注意：同一个文件，可以有多个文件句柄，这可能是不同进程打开了同一个文件，或者是同一个进程内，对一个文件打开了多次</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ab 压力测试 设置 nginx gzip</title>
    <url>/nginx-set-gzip-http-version/</url>
    <content><![CDATA[<h1 id="设置gzip-http-version"><a href="#设置gzip-http-version" class="headerlink" title="设置gzip_http_version"></a>设置<code>gzip_http_version</code></h1><p>使用<code>ab</code> 测试网站，参数如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ab -n <span class="token number">50</span> -c <span class="token number">10</span> -H <span class="token string">"Accept-Encoding: gzip, deflate"</span> https://example.com/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>发现返回的文档没有被压缩，查看<code>nginx</code>日志也显示返回的是原始大小，查询资料后发现是<code>nginx</code> 配置<code>gzip_http</code>版本问题</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">gzip</span> on<span class="token punctuation">;</span>

<span class="token keyword">gzip_vary</span> on<span class="token punctuation">;</span>
<span class="token keyword">gzip_min_length</span> <span class="token number">1</span>k<span class="token punctuation">;</span>
<span class="token keyword">gzip_proxied</span> any<span class="token punctuation">;</span>
<span class="token keyword">gzip_comp_level</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">gzip_buffers</span> <span class="token number">16</span> <span class="token number">8</span>k<span class="token punctuation">;</span>
<span class="token keyword">gzip_http_version</span> <span class="token number">1.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>gzip_http_version </code>设置为了1.1，而 <code>ab</code>只支持<code>http_version:1.0</code>，改为<code>1.0</code>即可。</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">gzip_http_version</span> <span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>再次测试，返回数据是被压缩后的数据，从<code>nginx</code>日志也可以看到数据是压缩后的。类似的<code>ab</code> 的工具还有<a href="https://github.com/JoeDog/siege">siege</a>，可以很好的支持<code>http 1.1</code></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>在<code>nginx</code>配置中，有些属性如果没有显示的进行设置，比如设置<code>gzip on;</code>时，没有设置<code>gzip_http_version</code>，<code>nginx</code>会启用默认值 <code>gzip_http_version:1.1;</code>，所以当你不想限制<code>http_version</code>的最低版本时，仅仅把<code>gzip_http_version</code>注释掉是不行的，你必须给其赋一个值才可以。类似这种问题不光在<code>nginx</code>配置中需要注意，在其它软件配置文件中也要注意</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby 字符和 ascii 码之间的转换</title>
    <url>/ruby-character-to-ascii/</url>
    <content><![CDATA[<h1 id="字符-转-ascii"><a href="#字符-转-ascii" class="headerlink" title="字符 转 ascii"></a>字符 转 ascii</h1><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token string">'a'</span><span class="token punctuation">.</span>ord <span class="token comment"># => 97</span>

<span class="token string">"a"</span><span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token comment">#=> 97 `c` 提取一个字符作为整数</span>

<span class="token string">"string"</span><span class="token punctuation">.</span>each_byte <span class="token keyword">do</span> <span class="token operator">|</span>c<span class="token operator">|</span>
    puts c
<span class="token keyword">end</span>

<span class="token string">'hello world'</span><span class="token punctuation">.</span>each_byte<span class="token punctuation">.</span>to_a
<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span>

<span class="token string">'hello world'</span><span class="token punctuation">.</span>bytes
<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="Ascii-转-字符"><a href="#Ascii-转-字符" class="headerlink" title="Ascii 转 字符"></a>Ascii 转 字符</h1><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token number">97.</span>chr <span class="token comment"># => "a"</span>

<span class="token string">'hello world'</span><span class="token punctuation">.</span>bytes <span class="token comment"># => [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]</span>
<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">&#123;</span><span class="token operator">|</span>m<span class="token operator">|</span>m<span class="token punctuation">.</span>chr<span class="token punctuation">&#125;</span>
<span class="token comment"># => ["h", "e", "l", "l", "o", " ", "w", "o", "r", "l", "d"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="字符转二进制"><a href="#字符转二进制" class="headerlink" title="字符转二进制"></a>字符转二进制</h1><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token string">"aa"</span><span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'b8B8'</span><span class="token punctuation">)</span>  <span class="token comment">#=> ["10000110", "01100001"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>B</code> 从每个字符中提取位（首先是最高有效位）</p>
<p><code>b</code> 从每个字符中提取位（首先是最低有效位）</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Safari 网站图标 favicon 不显示</title>
    <url>/safari-favicon-setting/</url>
    <content><![CDATA[<h1 id="favicon图标不显示"><a href="#favicon图标不显示" class="headerlink" title="favicon图标不显示"></a><code>favicon</code>图标不显示</h1><p>发现博客的<code>favicon</code>图标一直不能在<code>safari</code> 的标签栏上显示，只能显示在地址栏，经过一番研究后发现是Hexo 的 Next主题的设置不正确造成的</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">favicon</span><span class="token punctuation">:</span>
  <span class="token key atrule">small</span><span class="token punctuation">:</span> /favicon<span class="token punctuation">-</span>16x16.png
  <span class="token key atrule">medium</span><span class="token punctuation">:</span> /favicon<span class="token punctuation">-</span>32x32.png
  <span class="token key atrule">apple_touch_icon</span><span class="token punctuation">:</span> /apple<span class="token punctuation">-</span>touch<span class="token punctuation">-</span>icon.png

  <span class="token comment"># 不能把 safari_pinned_tab 注释掉，只能留空，表示不启用,</span>
  <span class="token comment"># 注释掉会默认使用 next 主题中的设置.</span>

  <span class="token comment"># 注意: &lt;link rel="mask-icon" href="logo.svg"> 会覆盖</span>
  <span class="token comment"># &lt;link rel="icon" href="favicon.png"> 导致safari favicon图标被替换为logo.svg</span>
  safari_pinned_tab<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>small</code>与<code>medium</code>会生成两个与<code>favicon</code>相关的设置，用来在地址栏与标签栏显示网站图标</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/png<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32x32<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/favicon-32x32.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/png<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16x16<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/favicon-16x16.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>safari_pinned_tab</code>会生成<code>&lt;link rel=&quot;mask-icon&quot; href=&quot;logo.svg&quot;&gt;</code>，它会覆盖标签栏上的<code>favicon</code>图标，由于在设置这个属性的时候，错误的使用了非<code>svg</code>文件(用的是png)导致了图标不能正确显示。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>设置正确的<code>svg</code>文件，或者就不设置<code>&lt;link rel=&quot;mask-icon&quot;&gt;</code>属性，只使用<code>&lt;link rel=&quot;icon&quot; &gt;</code>设置<code>favicon</code>图标即可。如果不设置<code>&lt;link rel=&quot;mask-icon&quot;&gt;</code>属性，需要在配置文件中把<code>safari_pinned_tab</code>的值留空，而不是不设置或注释掉，这样做会使用next 主题中的默认设置，造成<code>favicon</code>图标显示为Next官网的图标</p>
<h1 id="关于safari缓存图标的问题"><a href="#关于safari缓存图标的问题" class="headerlink" title="关于safari缓存图标的问题"></a>关于<code>safari</code>缓存图标的问题</h1><p><code>safari</code>会对图标按域名进行缓存，从而造成更新图标后不能马上更新显示的问题，需要对缓存的图标进行清理。</p>
<ul>
<li>首先要清理它的缓存：<code>setting</code>-&gt;<code>privacy</code>-&gt;<code>Manage Website Date</code>，搜索相关域名，删除即可。</li>
<li>磁盘缓存文件：<code>~/Library/Safari</code>目录下，删除<code>Template Icons</code>文件夹，如果不起作用，删除<code>Favicon Cache</code>，<code>Touch Icons Cache</code>文件夹</li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>safari</tag>
      </tags>
  </entry>
</search>
