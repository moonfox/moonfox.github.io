<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git blob 对象</title>
    <url>/git-blob-object/</url>
    <content><![CDATA[<p><a href="//img.gagahappy.cn/blog/2011/07/blob.jpg"><img src="//img.gagahappy.cn/blog/2011/07/blob.jpg" title="blob"></a><br>一个”blob对象”就是一块二进制数据，它没有指向任何东西或有任何其它属性，甚至连文件名都没有.</p>
<p>因为blob对象内容全部都是数据，如两个文件在一个目录树（或是一个版本仓库）中有同样的数据内容，那么它们将会共享同一个blob对象。Blob对象和其所对应的文件所在路径、文件名是否改被更改都完全没有关系。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 恢复单个文件</title>
    <url>/git-checkout-file/</url>
    <content><![CDATA[<p>如果你只是要恢复一个文件(修复未提交文件中的错误),如”hello.rb”, 你就要使用 git checkout</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout -- hello.rb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 多人协作提交流程</title>
    <url>/git-commit-flow/</url>
    <content><![CDATA[<p>提交流程大致如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone lyr@192.168.0.7:~/work/m2ge
<span class="token comment">#... 项目开发 ...</span>
$ <span class="token function">git</span> <span class="token function">add</span> 改动的文件
$ <span class="token function">git</span> commit
$ <span class="token function">git</span> pull
<span class="token comment">#... 解决版本合并问题 ...</span>
$ <span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git commit 对象</title>
    <url>/git-commit-object/</url>
    <content><![CDATA[<p>Commit对象<br><a href="//img.gagahappy.cn/blog/2011/07/commit.jpg"><img src="//img.gagahappy.cn/blog/2011/07/commit.jpg" title="commit"></a></p>
<p>注：合并的提交(merge commits)可能会有不只一个父对象. 如果一个提交没有父对象, 那么我们就叫它“根提交”(root commit), 它就代表着项目最初的一个版本(revision).</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git diff HEAD</title>
    <url>/git-diff-head/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">diff</span> HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上面这条命令会显示你工作目录与上次提交时之间的所有差别，这条命令所显示的 内容都会在执行”git commit -a”命令时被提交。</p>
<p>这句等同于svn中的 svn diff。即比较工作副本与服务器之间的差异。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 多人协作</title>
    <url>/git-init-on-server/</url>
    <content><![CDATA[<p>git 协同开发</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p ~/project/m2ge.git
$ <span class="token builtin class-name">cd</span> ~/project/m2ge.git
$ <span class="token function">git</span> --bare init --shared<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>上述操作中,git-init 命令的 –bare 选项可以让 m2ge.git 目录等价于一个仓<br>库。</p>
<p>也就是说m2ge.git 本来是一个工作树，但是 –bare 选项将本应当存放在m2ge.git/.git 中的仓库内容全部放置在 m2ge.git 目录下，就好像仓库完全的裸露在工作树中，所以称之为赤裸的仓库。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/work/m2ge
$ <span class="token function">git</span> push m2@192.168.0.2:~/project/m2ge.git master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 建立远程分支缩写</title>
    <url>/git-remote-sort/</url>
    <content><![CDATA[<p>git 建立远程分支缩写</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote <span class="token function">add</span> bob /home/bob/myrepo
$ <span class="token function">git</span> log -p master<span class="token punctuation">..</span>bob/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上面的命令把Bob从Alice的主分支(master)中签出后所做的修改全部显示出来。<br>当检查完修改后,Alice就可以把修改合并到她的主分支中。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> merge bob/master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 撤消文件修改</title>
    <url>/git-reset-error-on-git-cn/</url>
    <content><![CDATA[<p>对于 “修复未提交文件中的错误” 时我们可以使用</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset -- yourfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这条命令会把文件恢复到index中的版本，而不是恢复到  HEAD revision。<br>当然，如果你没有把修改后的文件内容添加到index ,这个命令还是可以把你所做的修改恢复成你本地最初始的状态。</p>
<p>建议最好还是能看一下英文版，可以更准确的理解原著中要表达的意思。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 设置用户名</title>
    <url>/git-set-your-name/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"Scott Chacon"</span>
$ <span class="token function">git</span> config --global user.email <span class="token string">"schacon@gmail.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git tag 对象</title>
    <url>/git-tag-object/</url>
    <content><![CDATA[<p><a href="//img.gagahappy.cn/blog/2011/07/tag.jpg"><img src="//img.gagahappy.cn/blog/2011/07/tag.jpg" title="tag"></a></p>
<p>一个标签对象包一个对象名(译者注:就是SHA1签名), 对象类型, 标签名, 标签创建人的名字(“tagger”), 还有一条可能包含有签名(signature)的消息.</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git tree 对象</title>
    <url>/git-tree-object/</url>
    <content><![CDATA[<p>git tree 对象<br><a href="//img.gagahappy.cn/blog/2011/07/tree.jpg"><img src="//img.gagahappy.cn/blog/2011/07/tree.jpg" title="tree"></a></p>
<p>一个tree对象可以指向(reference): 一个包含文件内容的blob对象, 也可以是其它包含某个子目录内容的其它tree对象.</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 与 subversion分支</title>
    <url>/git-different-of-branch-between-subversion/</url>
    <content><![CDATA[<p>subversion合并分支消耗太大。然而在 Git 中，一天之内建立、使用、合并再删除多个分支是常见的事。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git fetch origin</title>
    <url>/git-fetch-origin/</url>
    <content><![CDATA[<p>可以运行 git fetch origin 来同步远程服务器上的数据到本地。</p>
<p>那么用 git pull 不是也可以吗？区别是啥？</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git log查找某一个author的提交</title>
    <url>/git-log-author/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --author<span class="token operator">=</span><span class="token operator">&lt;</span>pattern<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 硬恢复</title>
    <url>/git-recover-delete-file-from-commit/</url>
    <content><![CDATA[<p>git-reset –hard HEAD~1</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git cherry-pick</title>
    <url>/git-cherry-pick/</url>
    <content><![CDATA[<p>执行git cherry-pick 解决合并冲突之前的提交，好像会自动pull下分支的最新提交内容，造成当前提交下的内容冲突。</p>
<p>为什么会再现之前的冲突，从哪里pull下来的呢？最新commit?</p>
<p>为什么会向暂存区放内容？</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 如何自动合并文件内容</title>
    <url>/git-how-to-merge/</url>
    <content><![CDATA[<p>git可以自动进行文件合并</p>
<p>情况1 ：文件A在第一次提交成功后，分别被A用户和B用户编辑后提交，A用户pull B用户的提交，这时，git判断两个文件是否冲突，如果不冲突则进行合并</p>
<p>情况2 ：文件A在第一次提交成功后，B用户对其进行了编辑提交，A用户没有对文件做出任何修改，pull B用户的提交，这时，git会自动用B用户的修改去覆盖A用户的文件，即使A文件同一行的内容不同</p>
<p>思考：git是如何判断什么情况可以直接进行覆盖，什么情况需要进行合并。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 新建 版本库</title>
    <url>/git-new-repo/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> test_demo
<span class="token builtin class-name">cd</span> test_demo
<span class="token function">git</span> init
<span class="token function">touch</span> README
<span class="token function">git</span> <span class="token function">add</span> README
<span class="token function">git</span> commit -m <span class="token string">'first commit'</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:youname/test_demo.git
<span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git reset 暂存区如何信息提示</title>
    <url>/git-reset-how-to-show-index-info/</url>
    <content><![CDATA[<p>当对一个已经添加到暂存区的文件进行撤销<br><code>git add file</code><br>然后进行撤销<br><code>git reset HEAD -- file</code><br>这时，暂存区中没有任何被添加的文件<br>如果把某个历史提交（非HEAD指向的提示）中的 file添加到暂存区<br><code>git reset commit -- file</code><br>暂存区中则会显示file文件已经被加入，并且合本地文件不同</p>
<p>思考</p>
<blockquote>
<p>如果把HEAD对应的文件放入暂存区，是否因为文件是HEAD中的，所以暂存区认为文件已经提交过了，所以没有已添加，待提交的提示。</p>
</blockquote>
<blockquote>
<p>而其它非HEAD中的文件则认为是还没有提交的，所以显示为已添加，待提交。</p>
</blockquote>
<p>试验：</p>
<blockquote>
<p>如果历史提交中的file文件内容与工作区中的file文件内容一样,执行<br><code>git reset commit -- file</code><br>则暂存区应该显示已添加，待提交的提示，但不会显示与本地有差异。</p>
</blockquote>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git cat-file type选项和p选项的区别</title>
    <url>/git-cat-file-type-option/</url>
    <content><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cat-file type选项和-p选项的区别
<span class="token function">git</span> cat-file 查看对象内容
<span class="token function">git</span> cat-file <span class="token punctuation">[</span>commit <span class="token operator">|</span> blob <span class="token operator">|</span> tree <span class="token operator">|</span> tag<span class="token punctuation">]</span> <span class="token operator">&lt;</span>object<span class="token operator">></span> 可以用来查看一个对象的内容，但要求object一定要和<span class="token punctuation">[</span>commit <span class="token operator">|</span> blob <span class="token operator">|</span> tree <span class="token operator">|</span> tag<span class="token punctuation">]</span>相匹配

可以使用一个通用的option: -p
<span class="token function">git</span> cat-file -p object来搞定，这样就不用区分object的类型了

PS：不太明白为什么要提供 <span class="token punctuation">[</span>commit <span class="token operator">|</span> blob <span class="token operator">|</span> tree <span class="token operator">|</span> tag<span class="token punctuation">]</span> ，它和-p的区别是什么<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git ls-files 显示暂存区目录树</title>
    <url>/git-ls-files-show-index-files/</url>
    <content><![CDATA[<p>git ls-files 显示暂存区目录树</p>
<p>如果一个删除的文件已经git add到暂存区，则暂存区的目录树不会包含这个文件，这也证明了暂存区有着自己的目录树</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git stash 使用 index 恢复暂存区</title>
    <url>/git-stash-index-option/</url>
    <content><![CDATA[<p>在git stash 中使用–index 恢复暂存区</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash pop --index

Your branch is up-to-date with <span class="token string">'origin/develop'</span><span class="token builtin class-name">.</span>
Changes to be committed: <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file>..."</span> to unstage<span class="token punctuation">)</span>

modified:   metaprogramming/blocks/block_args.rb

Changes not staged <span class="token keyword">for</span> commit:
<span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to update what will be committed<span class="token punctuation">)</span>
<span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file>..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>

modified:   metaprogramming/blocks/block_args.rb
modified:   metaprogramming/blocks/block_binding.rb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git write-tree 生成tree对象</title>
    <url>/git-write-tree-generate-tree-id/</url>
    <content><![CDATA[<p>可以用git write-tree 为暂存区生成tree对象，以便可以用ls-tree对暂存区进行查看</p>
<p>执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> write-tree
<span class="token function">git</span> ls_tree <span class="token operator">&lt;</span>git write-tree 的输出<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git rebase 与 git reset的应用</title>
    <url>/git-rebase-vs-git-reset/</url>
    <content><![CDATA[<h3 id="常用的应用场景"><a href="#常用的应用场景" class="headerlink" title="常用的应用场景"></a>常用的应用场景</h3><ol>
<li><p>合并提交</p>
</li>
<li><p>去除不要的提交</p>
</li>
</ol>
<h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><h3 id="场景1，合并多个提交"><a href="#场景1，合并多个提交" class="headerlink" title="场景1，合并多个提交"></a>场景1，合并多个提交</h3><p>有 A B C D E F 6个提交，当前分支develop的最新提交为F，C D E F都是某一功能的持续提交，现需要把C到F的commit合并成一个commit，去除多余提交</p>
<ol>
<li>方法一: <code>git reset</code></li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset B --soft
<span class="token function">git</span> ci -m <span class="token string">"merge C to F"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="2">
<li>方法二: <code>git rebase</code></li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase --onto B C^ develop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="场景2，去掉D提交"><a href="#场景2，去掉D提交" class="headerlink" title="场景2，去掉D提交"></a>场景2，去掉D提交</h3><p>此时，<code>git reset</code>已经不再适合这个场景</p>
<p>使用<code>git rebase</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase --onto C E^ develop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><ol>
<li><code>git rebase</code> 语法</li>
</ol>
<p>  <code>git rebase --onto &lt;onbase&gt; &lt;since&gt; &lt;till&gt;</code><br>  <code>git rebase --onto &lt;onbase&gt; &lt;since&gt;</code><br>  <code>git rebase &lt;since&gt; &lt;till&gt;</code><br>  <code>git rebase &lt;since&gt;</code><br>  <code>git rebase -i</code></p>
<p>  onbase为要架接到的commit, since表示不包括自身到till的所有提交</p>
<p>  <code>git rebase --continue</code> # 解决冲突后使用，以完成rebase<br>  <code>git rebase --skip</code>     # 跳过当前commit，进行下一个commit的合并<br>  <code>git rebase --abort</code>    # 放弃此次操作，还原工作区</p>
<ol start="2">
<li><code>git rebase</code>的莫名冲突</li>
</ol>
<p>  对于场景二： 使用<code>git rebase</code>可能出现冲突（感觉不应该出现冲突的，对此不是很理解，难道是因为丢弃D后使查找链C-D-E-F断裂造成git认为这两个commit需要合并，是因为E无法知道C是它的祖先吗）</p>
<p>  在解决冲突后，使用<code>git rebase --continue</code>完成rebase操作</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next主题 Rss 侧边栏</title>
    <url>/hexo-next-theme/</url>
    <content><![CDATA[<p>无意间发现 <code>Hexo</code> 的 <code>Next</code> 主题也很好看，之前的 <code>Yelee</code> 主题使用了好久，决定换成 <code>Next</code>。在配置过程中遇到不少问题，主要有两点值得分享：</p>
<ul>
<li>不要直接在主题配置文件上进行修改</li>
<li>修改RSS显示位置使其在首页显示</li>
</ul>
<h3 id="配置主题文件"><a href="#配置主题文件" class="headerlink" title="配置主题文件"></a>配置主题文件</h3><p>根据 Hexo 官方的推荐，不要直接修改主题的配置文件</p>
<blockquote>
<p>The file should be placed in your site folder, both <code>yml</code> and <code>json</code> are supported. <code>theme</code> inside <code>_config.yml</code> must be configured for Hexo to read <code>_config.[theme].yml</code></p>
</blockquote>
<p>根据推荐执行以下操作:</p>
<ol>
<li>配置主题为 Next 主题</li>
</ol>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># _config.yml</span>
theme: <span class="token string">"next"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="2">
<li><p>在 site 根目录新建 <code>_config.next.yml</code>文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> _config.next.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>打开 <code>theme/next/_config.yml</code>把需要修改的选项 copy 到 <code>_config.next.yml</code>中</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># _config.next.yml
# 设置网站图标
favicon:
  small: &#x2F;favicon.ico
  medium: &#x2F;favicon.ico
  apple_touch_icon: &#x2F;apple-touch-icon.png
  safari_pinned_tab: &#x2F;apple-touch-icon.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>hexo启动时，会自动合并 <code>_config.next.yml</code> 与<code>theme/next/_config.yml</code> 的设置内容，从而达到配置主题的作用。</p>
</li>
</ol>
<p>不直接修改<code>theme/next/_config.yml</code>的好处是，当拉取新的更新时，不会因修改了<code>_config.yml</code>而发生冲突。（每个主题都是一个独立的 <code>git</code>项目）</p>
<h3 id="修改RSS显示位置"><a href="#修改RSS显示位置" class="headerlink" title="修改RSS显示位置"></a>修改RSS显示位置</h3><p>看到网上说Rss的显示位置由首页侧边栏的位置移动到了每篇文章的最底部，这显然是不适合的，因为订阅不是按文章订阅，而是直接在首页中订阅。</p>
<p>自定义RSS到侧边栏：请先确认已经安装 <code>hexo-generator-feed</code>插件</p>
<ol>
<li>删除文章底部的Rss(整个 follow me 设置都删除)</li>
</ol>
  <pre class="line-numbers language-njk" data-language="njk"><code class="language-njk"># theme&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post.njk

# 删除以下代码
&#123;%- if theme.follow_me %&#125;
  &#123;&#123; partial(&#39;_partials&#x2F;post&#x2F;post-followme.njk&#39;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;
&#123;%- endif %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li><p>修改 Rss 样式</p>
<pre class="line-numbers language-njk" data-language="njk"><code class="language-njk"># theme&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;post&#x2F;post-followme.njk

&lt;div class&#x3D;&quot;followme&quot;&gt; # 修改为 &lt;div class&#x3D;&quot;&quot;&gt;
  &lt;span&gt;&#123;&#123; __(&#39;follow_me.welcome&#39;) &#125;&#125;&lt;&#x2F;span&gt; # 删除这一行
  &lt;div class&#x3D;&quot;social-list&quot;&gt; # #修改为 &lt;div class&#x3D;&quot;&quot;&gt;
  # 省略部分源码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>添加 Rss 到侧边栏(其实就是整个的 follwe me)</p>
<pre class="line-numbers language-njk" data-language="njk"><code class="language-njk"># theme&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;sidebar&#x2F;site-overview.njk
&#123;%- if theme.follow_me %&#125;
  &#123;&#123; partial(&#39;_partials&#x2F;post&#x2F;post-followme.njk&#39;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;
&#123;%- endif %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>在站点配置文件中打开 Rss 设置</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># _config.yml</span>
<span class="token key atrule">follow_me</span><span class="token punctuation">:</span>
  <span class="token key atrule">RSS</span><span class="token punctuation">:</span> /rss2.xml <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>rss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>重启站点即可，就可以看到 Rss 显示在侧边栏了</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 批量插入数据</title>
    <url>/mysql-bluk-insert/</url>
    <content><![CDATA[<h2 id="导入大数据到表"><a href="#导入大数据到表" class="headerlink" title="导入大数据到表"></a>导入大数据到表</h2><p>向数据库中插入3万条数据</p>
<h3 id="单个插入数据"><a href="#单个插入数据" class="headerlink" title="单个插入数据"></a>单个插入数据</h3><p>如果每个数据单独插入，效率很低，每个插入都产生一个事务，写入效率低</p>
<h3 id="批量插入数据"><a href="#批量插入数据" class="headerlink" title="批量插入数据"></a>批量插入数据</h3><ul>
<li><p>每1000条插入一次，只产生一个事件，降低了事务的生成，提高了效率</p>
</li>
<li><p>具体方法</p>
<ol>
<li><p>把多条插入语句拼成一条</p>
</li>
<li><p>手动开启一个事务，在插入1000条数据后，提交事务。</p>
<p>这样做可以减少<code>binlog</code>的生成次数，但<code>redolog</code>不一定减少</p>
</li>
</ol>
</li>
</ul>
<h3 id="批量-vs-单个插入"><a href="#批量-vs-单个插入" class="headerlink" title="批量 vs 单个插入"></a>批量 vs 单个插入</h3><ul>
<li><p>单个插入效率很低，30 * 1000 条记录用时 1分钟</p>
</li>
<li><p>批量插入， 每1000条插入一次，效率很高，用时7.99秒</p>
<p><code>5.54s user 0.54s system 77% cpu 7.799 total</code></p>
<p><code>5.38s user 0.48s system 78% cpu 7.452 total</code></p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>插入大量数据时，应减少事务的提交，让多个插入在一个事务中完成，从而提高插入数据的效率</p>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">ImportTradelog</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">import</span></span><span class="token punctuation">(</span>date<span class="token punctuation">)</span>
    <span class="token comment"># 导入30天的数据</span>
    <span class="token number">30.</span>times <span class="token keyword">do</span> <span class="token operator">|</span>offset<span class="token operator">|</span>
      datas <span class="token operator">=</span> init_data<span class="token punctuation">(</span>date <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">*</span> offset<span class="token punctuation">)</span>
      puts datas

      <span class="token comment"># 批量插入， 每1000条插入一次，效率很高，用时7.99秒</span>
      <span class="token comment"># 5.54s user 0.54s system 77% cpu 7.799 total</span>
      <span class="token comment"># 5.38s user 0.48s system 78% cpu 7.452 total</span>
      <span class="token constant">Tradelog</span><span class="token punctuation">.</span>bulk_insert set_size<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> values<span class="token punctuation">:</span> datas
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token comment"># 每天导入1000条数据</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">init_data</span></span><span class="token punctuation">(</span>day<span class="token punctuation">)</span>
    datas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token number">1000.</span>times <span class="token keyword">do</span> <span class="token operator">|</span>index<span class="token operator">|</span>
      <span class="token comment"># 插入效率很低，30 * 1000 条记录用时 1分钟</span>
      <span class="token comment"># date = &#123;tradeid: tradeid, operator: operator, t_modified: t_modified&#125;</span>
      <span class="token comment"># Tradelog.create(date)</span>
      datas <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token punctuation">&#123;</span>
        tradeid<span class="token punctuation">:</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>day<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token delimiter tag">&#125;</span></span><span class="token interpolation"><span class="token delimiter tag">#&#123;</span>format<span class="token punctuation">(</span><span class="token string">'%04d'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token delimiter tag">&#125;</span></span>"</span><span class="token punctuation">,</span>
        operator<span class="token punctuation">:</span> rand<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        t_modified<span class="token punctuation">:</span> <span class="token punctuation">(</span>day <span class="token operator">+</span> <span class="token number">60</span> <span class="token operator">*</span> index<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token keyword">end</span>

    datas
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>git 知识补充</title>
    <url>/git-learning-supplement/</url>
    <content><![CDATA[<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ol>
<li><p>git 可以只提交文件的部分内容， git add -p,称之为hunk, sourcetree也可以进行设置</p>
</li>
<li><p>分支改名<br>git branch -m cat tiger</p>
</li>
<li><p>分支合并后产生的commit, A合并B，commit 信息中，父提交记录顺序，parents : A, B</p>
<p>A在前，B在后，表示是A 合并的B</p>
</li>
<li><p>git如何判断分支是否可以删除<br>当前分支所指向的commit ，没有其它commit指向它（这个提交(分支)还没有被合并），或只有当前分支指向它，没有其它分支指向它时，在删除这个分支时就会有提示不能直接删除</p>
</li>
<li><p>rebase 后，对应commit 值是否发生变化<br>看情况，嫁接到其它commit 之上的commit 的值会发生变化，因为其父提交发生了变化，同理，在这个commit 之后的提交的值也发生变化<br>A B C D E F，把F嫁接到其它 COMMIT后，A到E的COMMIT的值都发生变化</p>
<p>修改现有COMMIT 的注释，也会发生这样的连锁反应</p>
</li>
<li><p>rebase 的其他用途<br>修改历史提交注释 r选项<br>合并多个提交 s 选项<br>把一个提交拆分成多个commit 在操作列表使用使用 edit<br>在commit 之间添加新的commit edit选项<br>调整commit 之间的顺序 直接在列表里调整，<br>删除commit 在列表里删除相关行过使用drop,删除后对它之后commit 的影响如何</p>
</li>
<li><p>空目录无法被添加到git<br>因为根据算法，添加的对象必须要有内容，以供sha1算法使用</p>
</li>
<li><p>合并后再使用 <code>git rebase </code> 使提交成为一条直线</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge upstream-master
Auto-merging layout/_partials/sidebar/site-overview.njk
Auto-merging layout/_partials/post/post-followme.njk
Merge made by the <span class="token string">'recursive'</span> strategy.
 layout/_partials/header/menu-item.njk      <span class="token operator">|</span> <span class="token number">5</span> +----
 layout/_partials/page/breadcrumb.njk       <span class="token operator">|</span> <span class="token number">6</span> +-----
 layout/_partials/post/post-followme.njk    <span class="token operator">|</span> <span class="token number">2</span> +-
 layout/_partials/sidebar/site-overview.njk <span class="token operator">|</span> <span class="token number">2</span> +-

<span class="token function">git</span> slog --graph
*   b1b3e13 <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> release<span class="token punctuation">)</span> Merge branch <span class="token string">'upstream-master'</span> into release
<span class="token operator">|</span><span class="token punctuation">\</span>
<span class="token operator">|</span> * d51ca0e <span class="token punctuation">(</span>upstream/master, upstream-master<span class="token punctuation">)</span> Fix: handle invalid config
* <span class="token operator">|</span> 369c5b5 <span class="token punctuation">(</span>origin/release, origin/master, origin/HEAD, master<span class="token punctuation">)</span> Resolve conflicts
<span class="token operator">|</span>/
* d6f344f Refactor sidebar-panel using flex layout
* edefcda Add NProgress <span class="token punctuation">(</span><span class="token comment">#79)</span>

<span class="token comment"># 把前分支作为基础分枝, 把 upstream-master 分支的提交嫁接在其上面</span>
<span class="token function">git</span> rebase
First, rewinding <span class="token function">head</span> to replay your work on <span class="token function">top</span> of it<span class="token punctuation">..</span>.
Applying: Fix: handle invalid config
Using index info to reconstruct a base tree<span class="token punctuation">..</span>.
M	layout/_partials/post/post-followme.njk
M	layout/_partials/sidebar/site-overview.njk
Falling back to patching base and <span class="token number">3</span>-way merge<span class="token punctuation">..</span>.
Auto-merging layout/_partials/sidebar/site-overview.njk
Auto-merging layout/_partials/post/post-followme.njk

<span class="token function">git</span> slog --graph
* 217e224 <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> release<span class="token punctuation">)</span> Fix: handle invalid config
* 369c5b5 <span class="token punctuation">(</span>origin/release, origin/master, origin/HEAD, master<span class="token punctuation">)</span> Resolve conflicts <span class="token comment"># 以这个提交做为 rebase</span>
* d6f344f Refactor sidebar-panel using flex layout
* edefcda Add NProgress <span class="token punctuation">(</span><span class="token comment">#79)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>使用merge出现了分支线路</li>
<li>rebase后，分支线路消失，成为一条直线。 是 以当前分支的最TOP的那个(369c5b5)提交做为rebase，重放合并进来的分支上的提交的</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>linux What does kill 0 do</title>
    <url>/linux-what-does-kill-zero/</url>
    <content><![CDATA[<h3 id="What-does-kill-0-do"><a href="#What-does-kill-0-do" class="headerlink" title="What does kill -0 ... do?"></a>What does <code>kill -0 ...</code> do?</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">kill</span> -0 <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /path/to/file.pid<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token punctuation">..</span>. <span class="token keyword">do</span> something <span class="token punctuation">..</span>.
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="kill-1"><a href="#kill-1" class="headerlink" title="kill(1)"></a><em>kill(1)</em></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">man</span> <span class="token number">1</span> <span class="token function">kill</span>
<span class="token punctuation">..</span>.
If sig is <span class="token number">0</span>, <span class="token keyword">then</span> no signal is sent, but error checking is still performed.
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="kill-2"><a href="#kill-2" class="headerlink" title="kill(2)"></a><em>kill(2)</em></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">man</span> <span class="token number">2</span> <span class="token function">kill</span>
<span class="token punctuation">..</span>.
If sig is <span class="token number">0</span>, <span class="token keyword">then</span> no signal is sent, but error checking is still performed<span class="token punctuation">;</span>
this can be used to check <span class="token keyword">for</span> the existence of a process ID or process
group ID.
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>So signal 0 will not actually in fact send anything to your process’s PID, but will check whether you have permissions to do so.</p>
<h3 id="Where-might-this-be-useful"><a href="#Where-might-this-be-useful" class="headerlink" title="Where might this be useful?"></a>Where might this be useful?</h3><p>One obvious place would be if you were trying to determine if you had permissions to send signals to a running process via <code>kill</code>. You could check prior to sending the actual <code>kill</code> signal that you want, by wrapping a check to make sure that <code>kill -0 &lt;PID&gt;</code> was first allowed.</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Say a process was being run by root as follows:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">sleep</span> <span class="token number">2500</span> <span class="token operator">&amp;</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">15693</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>Now in another window if we run this command we can confirm that that PID is running.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pgrep <span class="token function">sleep</span>
<span class="token number">15693</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>Now let’s try this command to see if we have access to send that PID signals via <code>kill</code>.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">kill</span> -0 <span class="token variable"><span class="token variable">$(</span>pgrep <span class="token function">sleep</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">"You're weak!"</span><span class="token punctuation">;</span> <span class="token keyword">fi</span>
bash: kill: <span class="token punctuation">(</span><span class="token number">15693</span><span class="token punctuation">)</span> - Operation not permitted
You're weak<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>So it works, but the output is leaking a message from the <code>kill</code> command that we don’t have permissions. Not a big deal, simply catch STDERR and send it to <code>/dev/null</code>.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">kill</span> -0 <span class="token variable"><span class="token variable">$(</span>pgrep <span class="token function">sleep</span><span class="token variable">)</span></span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">"You're weak!"</span><span class="token punctuation">;</span> <span class="token keyword">fi</span>
You're weak<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="Complete-example"><a href="#Complete-example" class="headerlink" title="Complete example"></a>Complete example</h3><p>So then we could do something like this, <code>killer.bash</code>:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>pgrep <span class="token function">sleep</span><span class="token variable">)</span></span>
<span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">kill</span> -0 <span class="token variable">$PID</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">echo</span> <span class="token string">"you don't have permissions to kill PID:<span class="token variable">$PID</span>"</span>
  <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">fi</span>

<span class="token function">kill</span> -9 <span class="token variable">$PID</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Now when I run the above as a non-root user:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ~/killer.bash
you don't have permissions to <span class="token function">kill</span> PID:15693

$ <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>
<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>However when it’s run as root:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ~/killer.bash

$ <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>
<span class="token number">0</span>

$ pgrep <span class="token function">sleep</span>
$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql binlog index 文件内容</title>
    <url>/mysql-binlog-index/</url>
    <content><![CDATA[<h3 id="binlog-index文件内容"><a href="#binlog-index文件内容" class="headerlink" title="binlog.index文件内容"></a><code>binlog.index</code>文件内容</h3><p>记录了<code>binlog</code>文件的具体路径，在MySQL启动时，会找到<code>binlog.index</code>文件，然后读取它里面的条目，从而读取<code>binlog</code>文件。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /mysql/3306/data/master.index

/mysql/3306/data/master.000001
/mysql/3306/data/master.000002
/mysql/3306/data/master.000003
./master.000004
./master.000005<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li><code>binlog</code>文件的路径可以是相对路径，也可以是绝对路径</li>
<li>如果是绝对路径，当文件被移动到其它地方时，只能手动修改对应的路径，否则MySQL在启动时，会报找不到文件路径的错误</li>
</ol>
<h3 id="设置binlog文件路径"><a href="#设置binlog文件路径" class="headerlink" title="设置binlog文件路径"></a>设置<code>binlog</code>文件路径</h3><p>可以在 <code>my.cnf</code>中设置<code>binlog</code>的文件路径</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[mysqld]
log-bin&#x3D;master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>或设置为绝对路径</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
log-bin<span class="token operator">=</span>/mysql/3306/data/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="参数-log-bin身兼多职"><a href="#参数-log-bin身兼多职" class="headerlink" title="参数 log-bin身兼多职"></a>参数 <code>log-bin</code>身兼多职</h3><p>设置后生效多个参数</p>
<ol>
<li>表示启用 <code>binlog</code>功能</li>
<li>同时设置 <code>binlog.index</code>的文件名</li>
<li>同时设置<code>binlog</code>的文件名</li>
</ol>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like &#39;%log_bin%&#39;;
+---------------------------------+----------------------------------------------+
| Variable_name                   | Value                                        |
+---------------------------------+----------------------------------------------+
| log_bin                         | ON                                           |
| log_bin_basename                | &#x2F;mysql&#x2F;3306&#x2F;data&#x2F;master       |
| log_bin_index                   | &#x2F;mysql&#x2F;3306&#x2F;data&#x2F;master.index |
| log_bin_trust_function_creators | OFF                                          |
| log_bin_use_v1_row_events       | OFF                                          |
| sql_log_bin                     | ON                                           |
+---------------------------------+----------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="binlog文件的读取"><a href="#binlog文件的读取" class="headerlink" title="binlog文件的读取"></a><code>binlog</code>文件的读取</h3><p>MySQL在启动时会读取<code>data</code>目录下的所有以<code>.index</code>后缀的文件(默认值)，然后在读取每个<code>index</code>文件中的条目</p>
<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><blockquote>
<p>The default location for binary log files and the binary log index file is the data directory. You can use the <a href="https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#option_mysqld_log-bin"><code>--log-bin</code></a> option to specify an alternative location, by adding a leading absolute path name to the base name to specify a different directory. When the server reads an entry from the binary log index file, which tracks the binary log files that have been used, it checks whether the entry contains a relative path. If it does, the relative part of the path is replaced with the absolute path set using the <a href="https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#option_mysqld_log-bin"><code>--log-bin</code></a> option. An absolute path recorded in the binary log index file remains unchanged; in such a case, the index file must be edited manually to enable a new path or paths to be used. The binary log file base name and any specified path are available as the <a href="https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_log_bin_basename"><code>log_bin_basename</code></a> system variable.</p>
</blockquote>
<p>只摘录了一部分，更全面的内容可到官网查看</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 无缓冲通道的cap是零</title>
    <url>/golang-unbuffered-channel-no-cap/</url>
    <content><![CDATA[<p>无缓冲通道的cap是零</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token comment">// 无缓冲通道的cap、len永远是0</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	noCache <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> noCache <span class="token operator">&lt;-</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"cap of noCache pipeline is"</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>noCache<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// => 0</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"len of noCache pipeline is"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>noCache<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// => 0</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"noCache "</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>noCache<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 自增值不能回退</title>
    <url>/mysql-auto-increment/</url>
    <content><![CDATA[<p>MySql 主键不连续的原因之一是自增值不能回退</p>
<p>设当前自增值=2，此时并发两个事务T1,T2。T1先申请到自增值，插入ID=3，自增值更为4</p>
<table>
<thead>
<tr>
<th></th>
<th>Tx1</th>
<th>Tx2</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>申请到自增值=2，set id =2, 更新自增值=3</td>
<td></td>
</tr>
<tr>
<td>T2</td>
<td>插入数据失败</td>
<td>申请到自增值=3，set id=3，更新自增值=4</td>
</tr>
<tr>
<td>T3</td>
<td>如果让自增值回退到=2</td>
<td>插入数据成功</td>
</tr>
<tr>
<td>T4</td>
<td>申请到自增值=2，set id =2, 更新自增值=3</td>
<td></td>
</tr>
<tr>
<td>T5</td>
<td>插入数据成功</td>
<td>申请到自增值=3，set id=3，更新自增值=4</td>
</tr>
<tr>
<td>T6</td>
<td></td>
<td>插入数据失败，插入语句报错“主键冲突” id=3已经存在</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 行锁两阶段</title>
    <url>/mysql-recordlock-2phase/</url>
    <content><![CDATA[<h1 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h1><p>优点：</p>
<p>比起表锁，可以支持更大的并发</p>
<h1 id="行锁的实现"><a href="#行锁的实现" class="headerlink" title="行锁的实现"></a>行锁的实现</h1><p>由存储引擎自已实现，每个存储引擎实现的方式都不一样</p>
<p> MyISAM 引擎不支持行锁</p>
<h1 id="两阶段锁"><a href="#两阶段锁" class="headerlink" title="两阶段锁"></a>两阶段锁</h1><p>在更新数据时，需要对数据所在行加锁，但更新数据完成后，锁并不会马上释放，而是要等到事务提交才释放</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table t_07_recordlock(
	id int not null auto_increment primary key,
  c int,
  d int,
 	key c (c)
) engine&#x3D;innodb;

insert into t_07_recordlock values (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<table>
<thead>
<tr>
<th></th>
<th>Session A</th>
<th>Session B</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>Begin;</td>
<td>begin;</td>
</tr>
<tr>
<td>T2</td>
<td>update t_07_recordlock set d=d+1 where id = 1;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>update t_07_recordlock set d=d+1 where id = 2;</td>
<td></td>
</tr>
<tr>
<td>T3</td>
<td></td>
<td>update t_07_recordlock set d=d+1 where id = 1;</td>
</tr>
<tr>
<td>T4</td>
<td>Commit</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>T2时刻，SessionA已经完成了对两行数据的更新，但没有提交</li>
<li>T3时候，SessionB对id=1的行进行更新，由于Session A没有提交，其依然持有id=1上的写锁，与Session B要加的写锁互斥，所以SessionB被阻塞，直到Session A提交，释放锁，才能对执行更新语句</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 主程序退出时会进行一些额外工作</title>
    <url>/golang-main-do-something-when-quit/</url>
    <content><![CDATA[<p>主goroutine先执行完,子goroutine居然还可以运行</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"==========="</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"doing in sub goroutine"</span><span class="token punctuation">)</span>
		<span class="token comment">// 主程序向通道发送数据，但此时由于 主 gor 行速度慢</span>
		<span class="token comment">// 程序还没有执行到 fmt.Println("x in ch is:", &lt;-ch)，</span>
		<span class="token comment">// 通道还没有接收数据，所以此时发生 阻塞</span>
		ch <span class="token operator">&lt;-</span> <span class="token number">1</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"done in sub goroutine"</span><span class="token punctuation">)</span> <span class="token comment">// 竞争打印，顺序不定</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 模拟执行速度慢</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>

	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"doing in main goroutine"</span><span class="token punctuation">)</span>
	<span class="token comment">// 1. 执行到这里时发生，由于子 gor 已经在等待向通道发送数据</span>
	<span class="token comment">//    所以此处的 从通道接收数据的 &lt;-ch 立即执行</span>
	<span class="token comment">// 2. 子 gor 被唤酲, 立即向通道发送数据</span>
	<span class="token comment">// 3. &lt;-ch 开始接收数据</span>

	<span class="token comment">// 当从通道中取出数据时，数据是通道中复制的，这需要花费一定的时间</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"x in ch is:"</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>      <span class="token comment">// 竞争打印，顺序不定</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"done in main goroutine"</span><span class="token punctuation">)</span> <span class="token comment">// 竞争打印，顺序不定</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  output：这个比较奇怪,主 先执行完,子居然还可以运行</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 2021/03/04 16:26:35 doing in sub goroutine</span>
<span class="token comment">// 2021/03/04 16:26:36 doing in main goroutine</span>
<span class="token comment">// x in ch is: 1</span>
<span class="token comment">// 2021/03/04 16:26:36 done in main goroutine (主 先执行完)</span>
<span class="token comment">// 2021/03/04 16:26:36 done in sub goroutine （子居然还可以运行）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>关于原因</p>
<ol>
<li><p>Stack Overflow上的答案是 在主 gor 的最后一行代码</p>
<p><code>log.Println(&quot;done in main goroutine&quot;)</code> 执行完成后，main 所在的 goroutine 还有一些在 <code>runtime</code> 时</p>
<p>需要完成一些扫尾工作，这些扫尾工作会花费非常少的时间，在这段时间里，子 gor 依然可以运行</p>
<p>所以可以执行 <code>log.Println(&quot;done in sub goroutine&quot;)</code></p>
</li>
<li><p>这也说明了 此次 主 gor 运行的比较慢，给子gor 留下了运行完所有代码的时间</p>
<p>如果主 gor 运行的特别快，即使扫尾工作需要花费一定的时间，但整体速度依然比</p>
<p>子 gor 快，则 <code>log.Println(&quot;done in sub goroutine&quot;)</code> 不能被执行</p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 自增值申请策略</title>
    <url>/mysql-auto-increment-strategy/</url>
    <content><![CDATA[<h1 id="自增值申请策略"><a href="#自增值申请策略" class="headerlink" title="自增值申请策略"></a>自增值申请策略</h1><ol>
<li><p>能否先查ID，再查入数据？</p>
<p>不能，如果每次插入前，都要在主键的索引树上查询要插入的id是否存在，会大大降低插入插入的效率。</p>
</li>
<li><p>能否等事务完成后，再释放自增值的锁？</p>
<p>不能，如果需要等待当前事务完成，其它事务先能获取自增值的锁，就会大大降低并发。</p>
</li>
</ol>
<h2 id="innodb-autoinc-lock-mode"><a href="#innodb-autoinc-lock-mode" class="headerlink" title="innodb_autoinc_lock_mode"></a><code>innodb_autoinc_lock_mode</code></h2><p>MySQL通过参数<code>innodb_autoinc_lock_mode</code>，来设置自值锁的行为，默认值为1</p>
<ol>
<li><p>0值 ：等事务完成才释放锁</p>
</li>
<li><p>1值 ：</p>
<ul>
<li>对于普通的<code>insert into table</code>，申请到自增锁后就释放，不用等插入语句的完成。</li>
<li>对于批量插入，类似<code>insert ... select</code>，一直持有自增锁，直到事务执行完成。这样也保证了id的连续性。</li>
</ul>
</li>
<li><p>2值：所有插入操作在申请到自增锁后就释放，包括<code>insert ... select </code>这种</p>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>git 使用 rebase 代替 merge</title>
    <url>/git-using-rebase-instead-of-merge/</url>
    <content><![CDATA[<h1 id="合并还是变基"><a href="#合并还是变基" class="headerlink" title="合并还是变基"></a>合并还是变基</h1><p>合并分支时，应使用<code>rebase</code>合并分支而不是使用<code>merge</code></p>
<h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><p>在分支很多的时候，<code>merge</code>会使提交变得异常混乱，查找某个提交会非常不好找，即使使用图形工具，也无法快速的查找，如果想退到某次提交更是难上加难。<code>merge</code>即使删除了合并过来的分支，其合并轨迹也依然被保留，所以还是很乱。</p>
<p><img src="//img.gagahappy.cn/blog/2021/04/using-rebase-instead-of-merge-merge.png_b1" alt="git merge" title="git merge"></p>
<h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><p>在分支很多的时候，不会产生很多的分支线，实践中应该就只有<code>master</code>,<code>release</code>等分支线，功能分支线在合并到<code>master</code> 上后都被删除，这样提交基本都在一条线上，十分清楚整洁。</p>
<p><img src="//img.gagahappy.cn/blog/2021/04/using-rebase-instead-of-merge-rebase.png_b1" alt="git rebase" title="git rebase"></p>
<h1 id="使用rebase合并分支"><a href="#使用rebase合并分支" class="headerlink" title="使用rebase合并分支"></a>使用rebase合并分支</h1><h2 id="场景分析："><a href="#场景分析：" class="headerlink" title="场景分析："></a>场景分析：</h2><p>功能<code>feature1</code>与<code>feature2</code>都在开发，<code>feature1</code>先上线，合并到了master，此时，<code>feature2</code>不应使用<code>merge</code>对<code>master</code>进行合并操作，而是使用<code>rebase</code>进行合并</p>
<ul>
<li><p>master上的提交有：<code>[m1, m2, m3]</code></p>
</li>
<li><p>feature1上的提交有: <code>[f1_01, f1_02, f1_03]</code></p>
</li>
<li><p>feature2上的提交有: <code>[f2_01, f2_02, f2_03]</code></p>
</li>
</ul>
<p><code>feature1</code>先被合并到master:</p>
<ul>
<li>master上的提交有：<code>[m1, m2, m3, f1_01, f1_02, f1_03]</code></li>
</ul>
<p><code>feature2</code>合并master</p>
<ul>
<li><code>feature2</code>上的提交有：<code>[m1, m2, m3, f1_01, f1_02, f1_03，f2_01_new, f2_02_new, f2_03_new]</code></li>
</ul>
<h2 id="合并步骤"><a href="#合并步骤" class="headerlink" title="合并步骤"></a>合并步骤</h2><p><code>feature2</code>要把<code>master</code>上的提交合并过来，使用<code>rebase</code> 而不是<code>merge</code>，这样就会不产生合并提交，在向<code>master</code>提交时就变成了<code>快速向前</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> co feature2
<span class="token function">git</span> rebase master

<span class="token comment"># 如果发生冲突，解决冲突后把冲突文件加入 index 区</span>
<span class="token function">git</span> <span class="token function">add</span> -u
<span class="token comment"># 运行continue 以使rebase完成</span>
<span class="token function">git</span> rebase --continue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>步骤1：<code>git rebase master</code>：以<code>master</code>分支做为<code>feature2</code>的基础</p>
</li>
<li><p>步骤2：计算出<code>feature2</code>与<code>master</code>上的差异提交，相当于<code>git log master...feture2</code>，即<code>[f2_01, f2_02, f2_03]</code></p>
</li>
<li><p>步骤3：把<code>[f2_01, f2_02, f2_03]</code>在<code>master</code>上的最新提交<code>f1_03</code>上进行重放生成新的提交</p>
<p><code>[f2_01_new, f2_02_new, f2_03_new]</code></p>
<p>重放生成过程：</p>
<ol>
<li>f2_01以f1_03为基础，生成新的f2_01_new</li>
<li>f2_02以f2_01_new为基础，生成新的f2_02_new</li>
<li>f2_03以f2_02_new为基础，生成新的f2_03_new</li>
</ol>
</li>
<li><p>步骤4：把当前分支设置为<code>feature2</code></p>
<p>feature2<code>rebase</code>后的提交有<code>[m1, m2, m3, f1_01, f1_02, f1_03，f2_01_new, f2_02_new, f2_03_new]</code></p>
<p>之前的旧的<code>[f2_01, f2_02, f2_03]</code> 在<code>feature2</code>上就看不到了，但依然在git中，如果没有其它分支指向它们，则会被git 回收机制删除</p>
</li>
</ul>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol>
<li>merge会让提交变得越来越混乱</li>
<li>rebase可以使主线一直保持清晰，rebase操作可以看是剪支操作，把分支剪下来，接到主线上。这样就可以把多条分支线变为一条，使所有提交变得清晰。</li>
<li>不要对已经<code>push</code>了的分支进行<code>rebase</code>，这会让已经存在的提交丢失，如果有人已经拉取了这个分支，也会给别人提交带来混乱</li>
</ol>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 在动态值为 nil 的接口上调用方法</title>
    <url>/golang-call-method-on-nil-of-interface-value/</url>
    <content><![CDATA[<h1 id="在动态值为-nil-的接口上调用方法"><a href="#在动态值为-nil-的接口上调用方法" class="headerlink" title="在动态值为 nil 的接口上调用方法"></a>在动态值为 nil 的接口上调用方法</h1><p>把一个值为nil的某个实现类型的变量赋给了接口变量，是否可以在这个接口变量上调用该接口的方法</p>
<p>lib/lib.go</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Name <span class="token builtin">string</span>
	Age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Superman <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	People
	color <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Mutant <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Speaking</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Fly <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>sp Superman<span class="token punctuation">)</span> <span class="token function">Speaking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"I'm %s"</span><span class="token punctuation">,</span> sp<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>sp <span class="token operator">*</span>Superman<span class="token punctuation">)</span> <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"I can fly"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>value.go</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">callMethodOnNil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> mu lib<span class="token punctuation">.</span>Mutant
	<span class="token keyword">var</span> xman <span class="token operator">*</span>lib<span class="token punctuation">.</span>Superman

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"xman:"</span><span class="token punctuation">,</span> xman<span class="token punctuation">)</span> <span class="token comment">// nil</span>
	mu <span class="token operator">=</span> xman
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"mu:"</span><span class="token punctuation">,</span> mu<span class="token punctuation">)</span> <span class="token comment">// nil</span>
	<span class="token comment">// Panic: runtime error: invalid memory address or nil pointer dereference</span>
	<span class="token comment">// 动态类值为 nil 时，不能在其上调用值方法</span>
	<span class="token comment">// mu.Speaking()</span>

	<span class="token keyword">var</span> fly lib<span class="token punctuation">.</span>Fly
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"xman:"</span><span class="token punctuation">,</span> xman<span class="token punctuation">)</span> <span class="token comment">// nil</span>
	fly <span class="token operator">=</span> xman
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"fly:"</span><span class="token punctuation">,</span> fly<span class="token punctuation">)</span> <span class="token comment">// nil</span>

	<span class="token comment">// 动态类值为 nil 时，可以在其上调用指针方法</span>
	<span class="token comment">// Fly()方法可以被调用，它的接收者是 *T 类型，且方法中没有涉及到对类型属性的调用</span>
	fly<span class="token punctuation">.</span><span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// I can fly</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol>
<li><p>值类型(T)的方法不能被调用，无论这个方法中是否涉及了对类型属性的调用</p>
</li>
<li><p>指针类型(*T)的方法可以被调用，但方法中不能涉及类型属性的调用</p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 sync.Wait的使用</title>
    <url>/golang-sync-wait/</url>
    <content><![CDATA[<p>如何让主 goroutine 在所有其他 goroutine 都运行完后，再退出</p>
<h1 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h1><p>通过 sleep 让主 goroutine 在所有子goroutine运行结束后，再退出</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">usingSleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">go</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>缺点：无法判断 for 循环到底需要多长时间，导致估计sleep的时间要么不够，要么太长</p>
<h1 id="缓冲通道"><a href="#缓冲通道" class="headerlink" title="缓冲通道"></a>缓冲通道</h1><p>通过缓冲通道让主 goroutine 在所有子goroutine运行结束后，再退出</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">usingChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
			c <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token operator">&lt;-</span>c
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>缺点：</p>
<ul>
<li>channel应该被用在goroutine间的通信</li>
<li>如果子goroutine太多，使用通道也会消耗很多资源</li>
</ul>
<h1 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h1><p>使用 sync.WaitGroup()控制主 goroutine 在所有子goroutine运行结束后，再退出</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">waitGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 一直阻塞主goroutine，直到wg为零</span>

	<span class="token comment">// output</span>
	<span class="token comment">// 乱序输出,并不是按1,2,3,4...</span>
	<span class="token comment">// 2</span>
	<span class="token comment">// 4</span>
	<span class="token comment">// 7</span>
	<span class="token comment">// 3</span>
	<span class="token comment">// 1</span>
	<span class="token comment">// 0</span>
	<span class="token comment">// 9</span>
	<span class="token comment">// 5</span>
	<span class="token comment">// 8</span>
	<span class="token comment">// 6</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>Wait() 方法的功能是，阻塞当前的 goroutine，直到其所属值中的计数器归零</p>
</li>
<li><p>不要把增加其计数器值的操作和调用其Wait方法的代码，放在不同的 goroutine 中执行，如果同时启用的两个 goroutine ，分别调用这两个方法(add 和 wait)，那么就有可能会让这里的Add方法抛出一个 panic。最好用“先统一Add，再并发Done，最后Wait”这种标准方式，来使用WaitGroup值</p>
</li>
<li><p>计数器不能为负值，发生为负的情况是：不适当地调用Done方法和Add方法都会如此。</p>
</li>
<li><p>Done()是Add(-1)的别名</p>
</li>
<li><p>计数不为0, 阻塞Wait()的运行</p>
</li>
</ul>
<h1 id="WaitGroup对象不是一个引用类型"><a href="#WaitGroup对象不是一个引用类型" class="headerlink" title="WaitGroup对象不是一个引用类型"></a>WaitGroup对象不是一个引用类型</h1><p>在通过函数传值的时候需要使用地址，不然会出现 <code>fatal error: all goroutines are asleep - deadlock!</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">passWGByPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token function">wgDone</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">wgDone</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 buffer.truncate 分析</title>
    <url>/golang-bytes-buffer-truncate/</url>
    <content><![CDATA[<p>对于Golang的初学者，<code>Truncate</code>方法的行为使人迷惑，它不是从 <code>buffer</code>的头部截取 <code>n 个</code>字节，而是丢弃<code>除了前n个</code>未读取的字节之外的所有未读取的字节，也是就只保留已读取的字节和还没有读取的<code>前n个</code>字节。这种逻辑确实让人不太适应</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Truncate discards all but the first n unread bytes from the buffer</span>
<span class="token comment">// but continues to use the same allocated storage.</span>
<span class="token comment">// It panics if n is negative or greater than the length of the buffer.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Buffer<span class="token punctuation">)</span> <span class="token function">Truncate</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		b<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	b<span class="token punctuation">.</span>lastRead <span class="token operator">=</span> opInvalid
	<span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"bytes.Buffer: truncation out of range"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	b<span class="token punctuation">.</span>buf <span class="token operator">=</span> b<span class="token punctuation">.</span>buf<span class="token punctuation">[</span><span class="token punctuation">:</span>b<span class="token punctuation">.</span>off<span class="token operator">+</span>n<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从源码的注释中还可以看到，截取后使用原 <code>buffer</code>保存保留下来的节字，不再额外占用内存空间。同时 n 的大小不能超过未读取字节的长度(第10行)</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">truncate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> buffer bytes<span class="token punctuation">.</span>Buffer
  str <span class="token operator">:=</span> <span class="token string">"Simple byte buffer for marshaling data."</span>
  buffer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
  p <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
  buffer<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// Simple b</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>

  buffer<span class="token punctuation">.</span><span class="token function">Truncate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment">// 截断到前10个未读节字 Simple byte buffer</span>
  buffer<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>         <span class="token comment">// 读取8个字节</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// yte buff</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>p := make([]byte, 8)</code>先读取了8个字节</li>
<li><code>buffer.Truncate(10) </code>再从没有读取的字节中取出10个，丢掉其余未读取的字节，把已读取的8个字节和取出的10个字节保存到 <code>buffer</code>中，此时buffer中的内容为<code>Simple byte buffer</code></li>
<li><code>buffer.Read(p) </code>再读取8个字节，注意：这里不是从 buffer 的头部读取，而是从未读取处开始读取，即从<code>y</code>开始读取</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 结构体在内存中的布局</title>
    <url>/golang-layout-of-struct/</url>
    <content><![CDATA[<h1 id="一些基础知识"><a href="#一些基础知识" class="headerlink" title="一些基础知识"></a>一些基础知识</h1><ul>
<li>字节对齐</li>
<li>unsafe.Sizeof</li>
<li>unsafe.Offsetof</li>
<li>内存空洞</li>
</ul>
<h2 id="字节对齐"><a href="#字节对齐" class="headerlink" title="字节对齐"></a>字节对齐</h2><p>可以使计算机在加载和保存数据时，更加的有效率</p>
<p>通常情况下布尔和数字类型需要对齐到它们本身的大小（最多8个字节），其它的类型对齐到机器字大小</p>
<h2 id="unsafe-Sizeof"><a href="#unsafe-Sizeof" class="headerlink" title="unsafe.Sizeof"></a>unsafe.Sizeof</h2><p>返回操作数在内存中的字节大小，参数可以是任意类型的表，但不会对表达式进行求值(不求值也能知道大小，好神奇呀)</p>
<p>unsafe.Sizeof 返回的大小只包含数据结构中固定的部分。如果结构体含有指针字段，不包括针指向的内容。Go语言中非聚合类型通常有一个固定的大小，而聚合类型没有固定的大小，比如 结构体类型和数组类型</p>
<h2 id="unsafe-Offsetof"><a href="#unsafe-Offsetof" class="headerlink" title="unsafe.Offsetof"></a>unsafe.Offsetof</h2><p>函数的参数必须是一个字段 x.f，然后返回 f 字段相对于 x 起始地址的偏移量，包括可能的空洞</p>
<h2 id="内存空洞"><a href="#内存空洞" class="headerlink" title="内存空洞"></a>内存空洞</h2><p>一个聚合类型（结构体或数组）的大小至少是所有字段或元素大小的总和，或者更大。因为可能存在内存空洞，内存空洞是编译器自动添加的没有被使用的内存空间，用于保证后面每个字段或元素的地址相对于结构或数组的开始地址能够合理地对齐。内存空洞可能会存在一些随机数据，可能会对用unsafe包直接操作内存的处理产生影响</p>
<h1 id="结构体内存布局"><a href="#结构体内存布局" class="headerlink" title="结构体内存布局"></a>结构体内存布局</h1><p>设：机器字大小为8个字节</p>
<h2 id="产生的空洞"><a href="#产生的空洞" class="headerlink" title="产生的空洞"></a>产生的空洞</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  a <span class="token builtin">bool</span>
  b <span class="token builtin">int16</span>
  c <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* output
Sizeof(x)   = 32  Alignof(x)   = 8
Sizeof(x.a) = 1   Alignof(x.a) = 1 Offsetof(x.a) = 0
Sizeof(x.b) = 2   Alignof(x.b) = 2 Offsetof(x.b) = 2
Sizeof(x.c) = 24  Alignof(x.c) = 8 Offsetof(x.c) = 8
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>x</code> 占用内存大小为 32字节</li>
<li><code>x.c</code>字段是一个切片，占用24个字节(3个机器字)，<code>c.data, c.len, c.cap</code> 分别用 8个字节(1 个机器字)</li>
<li><code>x.a + x.b</code> 总共占用 3字节。用<code>x</code>的占用总字节数 <code>32 - (1 + 2 + 24) = 5</code>， 说明有5字节的内存空洞</li>
<li>由于<code>x.c</code>占用了3个机器字，所以空洞不是它产生的</li>
<li> <code>x.a + x.b = 3</code>字节，不满一个机器字(8字节)，所以a和b之间，b和c之间产生了总共5字节的空洞</li>
</ul>
<h2 id="字段偏移分析"><a href="#字段偏移分析" class="headerlink" title="字段偏移分析"></a>字段偏移分析</h2><ul>
<li><code>Offsetof(x.a) = 0</code> 说明 字段 a 处在结构的起始处，a与结构体起始处没有偏移(与起始处没有空洞)</li>
<li><code>Offsetof(x.b) = 2</code> 说明 字段 b 相对于结构体 起始处 偏移了 2 字节，而<code>Sizeof(x.a) = 1</code>说明 <code>x.a</code> 占用只占用了1字节，但 b 偏移了 2 字节，说明<code>b与a</code>之间有 1 字节的空洞，否则 b 只应该偏移 1 字节，即<code>x.a</code>的大小。</li>
<li>那么 a与b之间，总共是4字节的大小: <code>x.a</code> 1字节 + 空洞 1 字节 + <code>x.b</code> 2字节</li>
<li>如果 <code>x.c 与 x.b</code>之前没有空洞，则<code>x.c</code>只应该偏移4字节，但实际却偏移了8字节，则 说明 <code>x.c 与 x.b</code> 之间 存在 <code>8 - 4 = 4</code> 字节的空洞</li>
<li>所以 x 结构体的内存 分布是: x.a(1)____空洞(1)____x.b(2)____空洞(4)____x.c(24)</li>
<li>对齐方式：按一个机器字对齐的</li>
</ul>
<p><img src="//img.gagahappy.cn/blog/2021/05/layout-of-struct.png_b1" alt="layout of struck" title="layout of struck"></p>
<h1 id="结构体字段顺序"><a href="#结构体字段顺序" class="headerlink" title="结构体字段顺序"></a>结构体字段顺序</h1><p>Go 语言中，结构内部字段的声明顺序和它们在内存中的顺序可能是不一样的。一个编译器可以随意地重新排列每个字段的内存位置，有效的包装可以使数据结构更加紧凑，从而节省内存空间</p>
<h2 id="内存占用"><a href="#内存占用" class="headerlink" title="内存占用"></a>内存占用</h2><p>不同结构体相同字段占用内存大小也会不一样，虽然 s1，s2，s3 有着相同的字段，但s1占用了较多的内存空间</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>a <span class="token builtin">bool</span><span class="token punctuation">;</span>b <span class="token builtin">float64</span><span class="token punctuation">;</span>c <span class="token builtin">int16</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 3 words</span>
<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>a <span class="token builtin">float64</span><span class="token punctuation">;</span>b <span class="token builtin">int16</span><span class="token punctuation">;</span>c <span class="token builtin">bool</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 2 words</span>
<span class="token keyword">var</span> s3 <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>a <span class="token builtin">bool</span><span class="token punctuation">;</span>b <span class="token builtin">int16</span><span class="token punctuation">;</span>c <span class="token builtin">float64</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 2 words</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h2 id="s1占用空间"><a href="#s1占用空间" class="headerlink" title="s1占用空间"></a>s1占用空间</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">sizeof</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">=</span>   <span class="token number">24</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">=</span>    <span class="token number">8</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">1</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">1</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">0</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">2</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">2</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>综上: <code>s1.a 与 s1.b</code> 之间有 7 字节 的空洞，<code>s1.c与结构体结束处</code>(尾部)有 6 字节的空洞</p>
<p>所以: s1 总字节数是 1 + 8 + 2 + (7 + 6) 空洞 = 24 <em>byte</em>，即3个机器字，可以看出 s1 的字段与字段之间，排列的并不是很紧凑，有较大空洞，造成了内存的浪费</p>
<p>对齐方式：按一个机器字对齐的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">|</span>-a-<span class="token operator">|</span>----------holes------------<span class="token operator">|</span> <span class="token number">8</span>字节，即一个机器字
<span class="token operator">|</span>---------------b---------------<span class="token operator">|</span> <span class="token number">8</span>字节，即一个机器字
<span class="token operator">|</span>---c---<span class="token operator">|</span>---------holes---------<span class="token operator">|</span> <span class="token number">8</span>字节，也可看出是按一个机器字对齐的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h2 id="s2-占用空间"><a href="#s2-占用空间" class="headerlink" title="s2 占用空间"></a>s2 占用空间</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">sizeof</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">=</span>   <span class="token number">16</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">=</span>    <span class="token number">8</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">0</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">2</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">2</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">1</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">1</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>综上: <code>s2.a</code> 的大小是一个机器字，本身就是对齐的，且是所有字段中长度最大的，与 <code>s2.b</code>之间没有空洞，<code>s2.c紧贴s2.b</code>，它们之间也没有空洞，<code>s2.c与结构体结束处</code>(尾部)有 5(8-2+1) 字节的空洞</p>
<p>所以: <code>s2</code> 总字节数是 <code>8 + 2 + 1 + (5) 空洞 = 16 byte</code>，即2个机器字，可以看出 s2 的字段与字段之间，排列是很紧凑，可以大大节省内存空间</p>
<p>对齐方式：按一个机器字对齐的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">|</span>---------------a---------------<span class="token operator">|</span> <span class="token number">8</span>字节，即一个机器字
<span class="token operator">|</span>---b---<span class="token operator">|</span>-c-<span class="token operator">|</span>-------holes-------<span class="token operator">|</span> <span class="token number">8</span>字节，即一个机器字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h2 id="s3占用空间"><a href="#s3占用空间" class="headerlink" title="s3占用空间"></a>s3占用空间</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">sizeof</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token operator">=</span>   <span class="token number">16</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token operator">=</span>    <span class="token number">8</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">1</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">1</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">0</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">2</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">2</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">2</span>
<span class="token function">Sizeof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>对齐方式：按一个机器字对齐的</p>
<p>s3 布局与 s2 相似，可以看成是上下两层对调了，但排列是很紧凑的，也是2个机器字</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">|</span>-a-<span class="token operator">|</span>---b---<span class="token operator">|</span>-------holes-------<span class="token operator">|</span> <span class="token number">8</span>字节，即一个机器字
<span class="token operator">|</span>---------------c---------------<span class="token operator">|</span> <span class="token number">8</span>字节，也可看出是按一个机器字对齐的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h1 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h1><p>未来的Go语言编译器应该会默认优化结构体的顺序，当然应该也能够指定具体的内存布局，相同讨论请参考 <a href="https://github.com/golang/go/issues/10014">Issue10014</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>gdb 安装</title>
    <url>/gdb-setup-on-macos/</url>
    <content><![CDATA[<h1 id="在-mac-OS-上安装"><a href="#在-mac-OS-上安装" class="headerlink" title="在 mac OS 上安装"></a>在 mac OS 上安装</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> gdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>也可以从源码进安装，<a href="https://www.gnu.org/software/gdb/">官网</a>，目前GDB对下列语言进行了支持</p>
<blockquote>
<p>Ada<br>Assembly<br>C<br>C++<br>D<br>Fortran<br>Go<br>Objective-C<br>OpenCL<br>Modula-2<br>Pascal<br>Rust</p>
</blockquote>
<p>安装后还不能直接使用，MacOS 对安全性有效高的要求，不允许没有许可的程序运行其它程序</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb helloworld
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> run

Unable to <span class="token function">find</span> Mach task port <span class="token keyword">for</span> process-id <span class="token number">798</span>: <span class="token punctuation">(</span>os/kern<span class="token punctuation">)</span> failure <span class="token punctuation">(</span>0x5<span class="token punctuation">)</span>.
 <span class="token punctuation">(</span>please check gdb is codesigned - see taskgated<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>提示<code>please check gdb is codesigned - see taskgated(8)</code>，原因是还没有为<code>gdb</code>签名，需要在系统的<code>Keychain</code>中创建用于签名的证书</p>
<h1 id="创建certificate"><a href="#创建certificate" class="headerlink" title="创建certificate"></a>创建certificate</h1><p>步骤如下：</p>
<ol>
<li>Launch Keychain Access application: Applications &gt; Utilities &gt; Keychain Access.</li>
<li>From the Keychains list on the left, right-click on the System item and select Unlock Keychain “System”.</li>
<li>From the toolbar, go to Keychain Access &gt; Certificate Assistant &gt; Create a Certificate.</li>
<li>Choose a name (e.g. gdb-cert).</li>
<li>Set Identity Type to Self Signed Root.</li>
<li>Set Certificate Type to Code Signing.</li>
<li>Check the Let me override defaults checkbox.</li>
<li>At this point, you can go on with the installation process until you get the Specify a Location For The Certificate dialogue box. Here you need to set Keychain to System. Finally, you can click on the Create button.</li>
<li>After these steps, you can see the new certificate under System keychains. From the contextual menu of the newly created certificate (right-click on it) select the Get info option. In the dialogue box, expand the Trust item and set Code signing to Always Trust.</li>
<li>Then, from the Keychains list on the left, right-click on the System item and select Lock Keychain “System”.</li>
<li>Finally, reboot your system.</li>
</ol>
<h1 id="gdb签名"><a href="#gdb签名" class="headerlink" title="gdb签名"></a>gdb签名</h1><p>在创建你自己的证书后，就可以给gdb进行签名了，在签名前要先配置<code>gdb-entitlement.xml</code>文件，它允许MacOs信任gdb</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">plist</span> <span class="token name">PUBLIC</span> <span class="token string">"-//Apple//DTD PLIST 1.0//EN"</span>
<span class="token string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plist</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dict</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>com.apple.security.cs.allow-jit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>com.apple.security.cs.allow-unsigned-executable-memory<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>com.apple.security.cs.allow-dyld-environment-variables<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>com.apple.security.cs.disable-library-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>com.apple.security.cs.disable-executable-page-protection<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>com.apple.security.cs.debugger<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>com.apple.security.get-task-allow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dict</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plist</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在命令行运行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">codesign --entitlements gdb-entitlement.xml -fs gdb-cert <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> gdb<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>-fs</code>: 要填写你刚刚生成的证书的名子，<code>$(which gdb)</code>: 是gdb的安装路径</p>
<p>接着在<code>home</code>目录创建<code>~/.gdbinit</code>文件，并写入如下内容</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"set startup-with-shell off"</span> <span class="token operator">>></span> ~/.gdbinit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h1 id="编译文件"><a href="#编译文件" class="headerlink" title="编译文件"></a>编译文件</h1><p>为了解决<code>No symbol table is loaded</code>问题，可以在编译时加入<code>-ggdb</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc hello_world.c -o hello_world -ggdb

<span class="token comment"># 使用示例</span>
gdb hello_world
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> list
<span class="token number">1</span>	<span class="token comment">#include &lt;stdio.h></span>
<span class="token number">2</span>
<span class="token number">3</span>	int my_strlen<span class="token punctuation">(</span>char *string<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4</span>
<span class="token number">5</span>	int main<span class="token punctuation">(</span>int argc, char const *argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">6</span>	<span class="token punctuation">&#123;</span>
<span class="token number">7</span>	  // char *string<span class="token punctuation">;</span>
<span class="token number">8</span>	  // string <span class="token operator">=</span> <span class="token string">"hello world haha"</span><span class="token punctuation">;</span>
<span class="token number">9</span>	  char string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world haha"</span><span class="token punctuation">;</span>
<span class="token number">10</span>	  printf<span class="token punctuation">(</span><span class="token string">"The string '%s' len is <span class="token entity" title="\&quot;">\"</span>%d<span class="token entity" title="\&quot;">\"</span><span class="token entity" title="\n">\n</span>"</span>, string, my_strlen<span class="token punctuation">(</span>string<span class="token punctuation">))</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> run
Starting program: /Users/ga/m/book/c-lang/ch02-basic/hello_world
<span class="token punctuation">[</span>New Thread 0x2603 of process <span class="token number">6002</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>New Thread 0x1803 of process <span class="token number">6002</span><span class="token punctuation">]</span>
warning: unhandled dyld version <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>
The string <span class="token string">'hello world haha'</span> len is <span class="token string">"16"</span>
<span class="token punctuation">[</span>Inferior <span class="token number">1</span> <span class="token punctuation">(</span>process <span class="token number">6002</span><span class="token punctuation">)</span> exited normally<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="使用gdb调试golang"><a href="#使用gdb调试golang" class="headerlink" title="使用gdb调试golang"></a>使用gdb调试golang</h1><p>本博没有成功，一直提示错误<code>No symbol table is loaded.  Use the &quot;file&quot; command.</code> ，后来查看了Go的官方文档，官方建议使用<code>Delve</code>进行调试。<a href="https://golang.org/doc/gdb">官方原文</a></p>
<blockquote>
<p><em>Note that <a href="https://github.com/go-delve/delve">Delve</a> is a better alternative to GDB when debugging Go programs built with the standard toolchain. It understands the Go runtime, data structures, and expressions better than GDB. Delve currently supports Linux, OSX, and Windows on <code>amd64</code>. For the most up-to-date list of supported platforms, please see <a href="https://github.com/go-delve/delve/tree/master/Documentation/installation">the Delve documentation</a>.</em></p>
</blockquote>
<p>并且在官方给出的示例中，也不保证你照着运行也可以成功</p>
<blockquote>
<p>In short, the instructions below should be taken only as a guide to how to use GDB when it works, not as a guarantee of success. Besides this overview you might want to consult the <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/">GDB manual</a>.</p>
</blockquote>
<p>最后祝你一切顺利</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>gdb</tag>
      </tags>
  </entry>
  <entry>
    <title>git 创建标签</title>
    <url>/git-create-tag/</url>
    <content><![CDATA[<h1 id="Git-创建标签"><a href="#Git-创建标签" class="headerlink" title="Git 创建标签"></a>Git 创建标签</h1><p>Git 标签分两种</p>
<ul>
<li>附注标签: annotated: 是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息</li>
<li>轻量级标签: lightweight: 像一个不会改变的分支——它只是某个特定提交的引用。在实践中不推荐使用</li>
</ul>
<h2 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 附注标签
git tag -a v0.0.1 -m &quot;first release try&quot;

# 发布标签
# 标签不会随push而自动被push到远程，需要单独push
git push origin v0.0.1

# 给某个commit单独打tag
# 这种操作多用于给历史commit打tag,原因可能是当时没有打
git tag -a v0.0.2 2234093<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag

<span class="token comment"># 查看某个tag的具体内容</span>
<span class="token function">git</span> show v0.0.1
<span class="token function">git</span> cat-file -p v0.0.1

<span class="token comment"># 删除标签</span>
<span class="token function">git</span> tag -d v0.0.1
<span class="token operator">=</span><span class="token operator">></span> Deleted tag <span class="token string">'v0.0.1'</span> <span class="token punctuation">(</span>was 79db751<span class="token punctuation">)</span>

<span class="token comment"># 删除远程标签</span>
<span class="token function">git</span> push origin :v0.0.1

<span class="token comment"># 查看tag的sha1</span>
<span class="token function">cat</span> .git/refs/tags/v5.4.1 <span class="token comment"># 在标签被删除的时候会显示这个值</span>
<span class="token comment"># => 79db751</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="签名tag"><a href="#签名tag" class="headerlink" title="签名tag"></a>签名tag</h2><p>前置条件：要先配置GPG</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 强制给tag 签名</span>
<span class="token comment"># 直接编辑  ~/.gitconfig 也可以</span>
<span class="token function">git</span> config --global tag.forcesignannotated <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>gitalk 评论系统 安装</title>
    <url>/gitalk-install/</url>
    <content><![CDATA[<h1 id="申请GitHub应用"><a href="#申请GitHub应用" class="headerlink" title="申请GitHub应用"></a>申请GitHub应用</h1><h2 id="1-注册一个新应用"><a href="#1-注册一个新应用" class="headerlink" title="1.  注册一个新应用"></a>1.  注册一个新应用</h2><p><a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a> 有三项内容必须填写</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">Application name：这个随意填写
Homepage URL：你的网站的URL地址，包含http部分。
Authorization callback URL：你的网站的URL地址，包含http部分，和上面的 Homepage URL 一致就行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="2-Homepage-URL与Authorization-callback-URL的填写"><a href="#2-Homepage-URL与Authorization-callback-URL的填写" class="headerlink" title="2. Homepage URL与Authorization callback URL的填写"></a>2. <code>Homepage URL</code>与<code>Authorization callback URL</code>的填写</h2><ol>
<li>如果你的网站是host在github上的，是通过github分配给你的网址进行访问的，直接填写github分配给你的网站就可以，类似 <code>yourgithub.github.io</code></li>
<li>如果你有自己的域名，但网站内容是host在github上的，是通过cname的方式访问的，那么这两项都填你的域名</li>
<li>如果你有自己的域名，也有自己的站点，那么这两项都填你的域名</li>
</ol>
<p>在调试阶段，可以把这两项设置为你的本地地址，这样方便测试，而不用一次又一次的部署网站，等测试好之后再统一部署。</p>
<h2 id="3-生成Client信息"><a href="#3-生成Client信息" class="headerlink" title="3. 生成Client信息"></a>3. 生成Client信息</h2><p>点击 “register application”完成注册，系统会生成<code>Client ID</code>和<code>Client secrets</code>(需要手动点一下旁边的按钮)</p>
<h1 id="配置Gitalk"><a href="#配置Gitalk" class="headerlink" title="配置Gitalk"></a>配置Gitalk</h1><h2 id="通过Next主题进行配置"><a href="#通过Next主题进行配置" class="headerlink" title="通过Next主题进行配置"></a>通过<code>Next</code>主题进行配置</h2><p>如果你的网点是用Hexo驱动，且主题是<code>Next</code>，这个主题已经为我们配置了gitalk，只需配置即可</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">github_id</span><span class="token punctuation">:</span> 你的Github登录账号
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> gitalk 你的 Github仓库的名称
  <span class="token key atrule">client_id</span><span class="token punctuation">:</span> 上面刚刚申请的 Client ID
  <span class="token key atrule">client_secret</span><span class="token punctuation">:</span> 上面刚刚申请的 Client Secret
  <span class="token key atrule">admin_user</span><span class="token punctuation">:</span> 你的Github登录账号
  <span class="token key atrule">distraction_free_mode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">proxy</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cors<span class="token punctuation">-</span>anywhere.azm.workers.dev/https<span class="token punctuation">:</span>//github.com/login/oauth/access_token
  language<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="使用官网配置"><a href="#使用官网配置" class="headerlink" title="使用官网配置"></a>使用官网配置</h2><p>官网地址：<a href="https://github.com/gitalk/gitalk">https://github.com/gitalk/gitalk</a></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> gitalk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gitalk</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  clientID<span class="token operator">:</span> <span class="token string">'GitHub Application Client ID'</span><span class="token punctuation">,</span>
  clientSecret<span class="token operator">:</span> <span class="token string">'GitHub Application Client Secret'</span><span class="token punctuation">,</span>
  repo<span class="token operator">:</span> <span class="token string">'GitHub repo'</span><span class="token punctuation">,</span>      <span class="token comment">// The repository of store comments,</span>
  owner<span class="token operator">:</span> <span class="token string">'GitHub repo owner'</span><span class="token punctuation">,</span>
  admin<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'GitHub repo owner and collaborators, only these guys can initialize github issues'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  id<span class="token operator">:</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>      <span class="token comment">// Ensure uniqueness and length less than 50</span>
  distractionFreeMode<span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token comment">// Facebook-like distraction free mode</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

gitalk<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'gitalk-container'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p>注：官网配置的参数和Hexo主题Next的参数是通用的</p>
<ul>
<li><code>repo</code>: 要求填写你的Github仓库的名称，这个仓库可以是你的github上的任意一个，但必须是公开的。评论内容会以 <code>issue</code>的形式保存到仓库的<code>issues</code>中，所以建议为评论单独新建一个仓库</li>
<li><code>admin</code>: 指定了可以初始化文章评论的github用户，一般只填写你自己就可以了</li>
<li><code>id</code>: 文章的URL路径，不包括域名，这个路径要求必须是唯一的，且不能超过50个字符(如果超过了，可以使用md5等工具对路径进行摘要缩短长度即可)。每一扁文章的评论和这个路径相关联，所以即使域名不同，只要文章的URL一样，就会显示相关联的评论。在Next主题中是自动配置的Hexo主题Next的参数定义在<code>layout/_third-party/comments/gitalk.njk</code>中</li>
<li><code>distractionFreeMode</code>：是否是聚精会神模式，即评论框在写评论的时候，周围是否变成黑</li>
</ul>
<h1 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h1><p>1. Error: Not Found：一般是仓库名称没有正确设置，请依据上面的参数说明部分进行设置</p>
<p>2. Related Issues not found：未找到相关的issue进行评论，出现这种情况是因为文章评论还未初始化，只需要点击下面的按钮，登录 GitHub 账户即可</p>
<p>3. 评论区一直加载不上：配置中的<code>proxy</code>地址不正确或已经失效。官网默认地址是<code>https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</code>。如果你使用的是Next主题，请确保也是这个地址</p>
<p>4.  评论时是黑色的：设置<code>distractionFreeMode</code>为false</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>gitalk</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 对指针类型接收者本身赋值</title>
    <url>/golang-assign_receiver_of_ptr/</url>
    <content><![CDATA[<p><code>r</code> 是指针类型接收者，可以对其进行解引赋值。结构体的<code>0值</code>不是<code>nil</code>，而是其各个成员的<code>0值</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">newReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> reader <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	buf  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	r<span class="token punctuation">,</span> w <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">newReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	r <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token comment">// &amp;&#123;[] 0 0&#125;</span>
	r<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token comment">// &amp;&#123;[0 0 0 0 0] -1 -1&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>reader<span class="token punctuation">)</span> <span class="token function">reset</span><span class="token punctuation">(</span>buf <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token operator">*</span>r <span class="token operator">=</span> reader<span class="token punctuation">&#123;</span>buf<span class="token punctuation">:</span> buf<span class="token punctuation">,</span> r<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> w<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 bufio.Peek 源码</title>
    <url>/golang-bufio-reader-peek/</url>
    <content><![CDATA[<p> <code>bufio.Peek(n)</code>返回前N个未读字节 ，不会更改已读计数的值。在方法调用后，要查看返回参数<code>error</code>是否为nil，以确保操作满足要求</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Reader<span class="token punctuation">)</span> <span class="token function">Peek</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrNegativeCount
	<span class="token punctuation">&#125;</span>

	b<span class="token punctuation">.</span>lastByte <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
	b<span class="token punctuation">.</span>lastRuneSize <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>

	<span class="token comment">// 当未读字节数小于n，且缓冲区不满(b.w-b.r &lt; len(b.buf))，</span>
	<span class="token comment">// 即缓冲区中从头到尾必须都是未读字节才算是缓冲区已经满</span>
	<span class="token comment">// 且 b.err 为nil，这三者都满足时，开始调用b.fill()填充缓冲区</span>
	<span class="token comment">// fill()方法会把未读数据移动到缓冲区头部，并把后面空出来的部分写满</span>
	<span class="token comment">// for 保证了至少可以把缓冲区填满</span>
	<span class="token keyword">for</span> b<span class="token punctuation">.</span>w<span class="token operator">-</span>b<span class="token punctuation">.</span>r <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>w<span class="token operator">-</span>b<span class="token punctuation">.</span>r <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>buf<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		b<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// b.w-b.r &lt; len(b.buf) => buffer is not full</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// 当要读取的字节数大于缓冲区长度时，返回所有未读节字，并附带错误信息</span>
	<span class="token keyword">if</span> n <span class="token operator">></span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> b<span class="token punctuation">.</span>buf<span class="token punctuation">[</span>b<span class="token punctuation">.</span>r<span class="token punctuation">:</span>b<span class="token punctuation">.</span>w<span class="token punctuation">]</span><span class="token punctuation">,</span> ErrBufferFull
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// 0 &lt;= n &lt;= len(b.buf)</span>
	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	<span class="token comment">// 当要读取的字节数大于所有未读节字数时，返回所有未读节字，并附带错误信息</span>
	<span class="token keyword">if</span> avail <span class="token operator">:=</span> b<span class="token punctuation">.</span>w <span class="token operator">-</span> b<span class="token punctuation">.</span>r<span class="token punctuation">;</span> avail <span class="token operator">&lt;</span> n <span class="token punctuation">&#123;</span>
		<span class="token comment">// not enough data in buffer</span>
		n <span class="token operator">=</span> avail
		err <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">readErr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			err <span class="token operator">=</span> ErrBufferFull
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 当 n 小于 未读字节数时，程序直接跳到这里</span>
	<span class="token keyword">return</span> b<span class="token punctuation">.</span>buf<span class="token punctuation">[</span>b<span class="token punctuation">.</span>r <span class="token punctuation">:</span> b<span class="token punctuation">.</span>r<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> err
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 截取0长度的Slice</title>
    <url>/golang-create-slice-with-zero-length/</url>
    <content><![CDATA[<p>截取0长度的<code>slice</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span>
	s2 <span class="token operator">:=</span> s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token comment">// 5 0 []</span>

	s2 <span class="token operator">=</span> s1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token comment">// 0 0 []</span>

	s2 <span class="token operator">=</span> s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token comment">// 5 1 [2]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>s1[1:1]</code>表示截取的位置从第一个元素最后一个字节的后面开始，到第一个元素最后一个字节的后面结束，所以生成的<code>slice</code>的长度是0，容量是5(6-1)</p>
<p><code>s1[6:6]</code>表示截取的位置从最后一个元素最后一个字节的后面开始，到最后一个元素最后一个字节的后面结束，所以生成的<code>slice</code>的长度是0，容量是0(6-6)</p>
<p><code>s1[1:2]</code>表示截取的位置从第一个元素最后一个字节的后面开始，到第二个元素最后一个字节的后面结束，在这个范围内的元素只有 <code>2</code>，所以生成的<code>slice</code>的长度是1，容量是5(1-6)</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 外部测试包</title>
    <url>/golang-external-test-packages/</url>
    <content><![CDATA[<h1 id="外部测试包"><a href="#外部测试包" class="headerlink" title="外部测试包"></a>外部测试包</h1><p>在测试代码的时候，会遇到包循环依赖导入的问题，Go语言规范是禁止包的循环依赖，为了解决这个问题，可以引入外部包。</p>
<p>外部包使用<code>package xxx_test</code>方式来命名，比如<code>package bytes_test</code>就是<code>src/btyes/buffer</code>外部包的命名方式，<code>_test</code>后缀告诉go test工具它应该建立一个额外的包来运行测试。</p>
<p><code>package xxx_test</code>中的<code>xxx_test</code>并不需要真的创建这样一个目录，而是在<code>xxx</code>包下的测试文件中引入这个包名就可以了。<code>btyes</code>包的源码目录结构如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/src/bytes
├── boundary_test.go
├── buffer.go
├── buffer_test.go
├── bytes.go
├── bytes_test.go
├── compare_test.go
├── example_test.go
├── export_test.go
├── reader.go
└── reader_test.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>通过外部测试包的方式可以解决导入包循环依赖的问题，因为外部测试包是一个独立的包，所以能够导入那些<code>依赖待测代码本身</code>的其他辅助包；包内的测试代码就无法做到这点。注意：外部包不能被其它包导入</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 文件 src/btyes/buffer_test.go</span>
<span class="token keyword">package</span> bytes_test <span class="token comment">// 'btyes目录下并不存在 bytes_test 目录'</span>
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token punctuation">.</span> <span class="token string">"bytes"</span>
	<span class="token operator">...</span> 代码片段
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TestNewBuffer</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	buf <span class="token operator">:=</span> <span class="token function">NewBuffer</span><span class="token punctuation">(</span>testBytes<span class="token punctuation">)</span>
	<span class="token function">check</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"NewBuffer"</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> testString<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token operator">...</span> 代码片段
<span class="token keyword">func</span> <span class="token function">empty</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">,</span> testname <span class="token builtin">string</span><span class="token punctuation">,</span> buf <span class="token operator">*</span>Buffer<span class="token punctuation">,</span> s <span class="token builtin">string</span><span class="token punctuation">,</span> fub <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p> <code>go list 命令</code></p>
<ul>
<li><p>通过<code>GoFiles</code>查看<code>bytes</code>包的Go源文件</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> list <span class="token operator">-</span>f<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>GoFiles<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> bytes <span class="token comment">// => [buffer.go bytes.go reader.go]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>通过<code>TestGoFiles</code>查看<code>bytes</code>包内部的测试代码</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> list <span class="token operator">-</span>f<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>TestGoFiles<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> bytes <span class="token comment">// => [export_test.go]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>通过<code>XTestGoFiles</code>查看<code>bytes</code>包的外部测试代码，也就是bytes_test包</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> list <span class="token operator">-</span>f<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>XTestGoFiles<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> bytes
<span class="token comment">// => [buffer_test.go bytes_test.go compare_test.go example_test.go reader_test.go]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<h1 id="访问内部代码"><a href="#访问内部代码" class="headerlink" title="访问内部代码"></a>访问内部代码</h1><p>如果在测试中，需要对包内部的没有导出的函数进行测试，可以利用包内的 <code>_test.go</code>文件，如 <code>export_test.go</code>，在这个文件中将包的内部函数、方法导出，以供外部测试包使用。</p>
<p><code>indexBytePortable</code>方法在 src/bytes/bytes.go 中定义</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// src/bytes/bytes.go</span>
<span class="token keyword">func</span> <span class="token function">indexBytePortable</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> c <span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span> <span class="token comment">// 这是一个内部方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p>把<code>bytes</code>包中的内部方法导出，供外部包<code>package bytes_test</code>使用。因为只有在测试时，才会把内部代码导出，所以导出内部代码是安全的</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// src/bytes/export_test.go</span>
<span class="token keyword">package</span> bytes
<span class="token comment">// Export func for testing</span>
<span class="token keyword">var</span> IndexBytePortable <span class="token operator">=</span> indexBytePortable <span class="token comment">// 赋值给包级可导出变量 IndexBytePortable</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p>外部包使用导出的方法<code>IndexBytePortable</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// src/bytes/bytes_test.go</span>
<span class="token keyword">package</span> bytes_test

<span class="token keyword">func</span> <span class="token function">TestIndexByte</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> indexTests <span class="token punctuation">&#123;</span>
		<span class="token operator">...</span> 代码片段
		posp <span class="token operator">:=</span> <span class="token function">IndexBytePortable</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// 导出的内部方法在这里被使用</span>
		<span class="token keyword">if</span> posp <span class="token operator">!=</span> tt<span class="token punctuation">.</span>i <span class="token punctuation">&#123;</span>
			t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">`indexBytePortable(%q, '%c') = %v`</span><span class="token punctuation">,</span> tt<span class="token punctuation">.</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> posp<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试文件<code>export_test.go</code>并没有定义测试代码，它只是通过<code>bytes.IndexBytePortable</code>简单导出了内部的<code>indexBytePortable</code>函数，这个技巧可以广泛用于位于外部测试包的白盒测试</p>
<h1 id="示例：包循环依赖"><a href="#示例：包循环依赖" class="headerlink" title="示例：包循环依赖"></a>示例：包循环依赖</h1><p>目录结构</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gott
├── go.mod
├── hi
│   └── hi.go
├── pprint
│   ├── pprint.go
│   └── pprint_test.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>hi.go 文件，引用了 pprint 包</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> hi

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"gott/pprint"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	pprint <span class="token operator">:=</span> pprint<span class="token punctuation">.</span><span class="token function">PPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pprint<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>pprint.go 文件</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> pprint

<span class="token keyword">func</span> <span class="token function">PPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token string">"I'm PPrint()"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>pprint_test.go 测试文件，在 pprint 包中引入了 hi 包，而 hi 包中已经引入了 pprint 包，这就导致了 包循环依赖</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> pprint

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"gott/hi"</span>
	<span class="token string">"testing"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TestPPrint</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">PPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	hi<span class="token punctuation">.</span><span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"expect call PPrint"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>执行测试，提示 import cycle not allowed in test</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v gott/pprint
<span class="token comment"># gott/pprint</span>
package gott/pprint <span class="token punctuation">(</span>test<span class="token punctuation">)</span>
        imports gott/hi
        imports gott/pprint: <span class="token function">import</span> cycle not allowed <span class="token keyword">in</span> <span class="token builtin class-name">test</span>
FAIL    gott/pprint <span class="token punctuation">[</span>setup failed<span class="token punctuation">]</span>
FAIL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>修改 pprint_test.go 测试文件，使用外部测试包 <code>pprint_test</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> pprint_test

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"gott/hi"</span>
	<span class="token comment">// 导入 要进行测试的 pprint 包本身</span>
	<span class="token string">"gott/pprint"</span>
	<span class="token string">"testing"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TestPPrint</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	pprint<span class="token punctuation">.</span><span class="token function">PPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	hi<span class="token punctuation">.</span><span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"expect call PPrint"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>&quot;gott/pprint&quot;</code>：导入 要进行测试的 pprint 包本身，没有引入外部包时，不需要导入被测试的包本身</p>
<p>执行测试，测试通过</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v gott/pprint
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestPPrint
I'm PPrint<span class="token punctuation">(</span><span class="token punctuation">)</span>
    pprint_test.go:12: <span class="token function">expect</span> call PPrint
--- PASS: TestPPrint <span class="token punctuation">(</span><span class="token number">0</span>.00s<span class="token punctuation">)</span>
PASS
ok      gott/pprint     <span class="token punctuation">(</span>cached<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>使用 Go 官方的代码风格：pprint_test.go 文件，因为pprint_test在 pprint 目录下，通过在 import 时，使用 <code>.</code> 选项，可以直接调用PPrint()方法，这使得调用包内的方法和内部测试包一致，整体代码风格得到统一</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> pprint_test

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"gott/hi"</span>
	<span class="token punctuation">.</span> <span class="token string">"gott/pprint"</span>
	<span class="token string">"testing"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TestPPrint</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">PPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	hi<span class="token punctuation">.</span><span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"expect call PPrint"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 fmt对string中零值的处理</title>
    <url>/golang-fmt-string-with-zerovalue/</url>
    <content><![CDATA[<p><code>fmt</code>格式化含有0值的<code>string</code>时，是如何显示的</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'A'</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"cap(%d),len(%d)\n"</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"buf:"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"buf:%q\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"buf:"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>

	str <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>
	str <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">" world"</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// => 16</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>      <span class="token comment">// => helloA world</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* output
cap(10),len(10)
buf: [104 101 108 108 111 0 0 0 65 0]
buf:"hello\x00\x00\x00A\x00"
buf: helloA
16
helloA world
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>1. 使用<code>fmt</code>打印<code>string(buf)</code>虽然显示为<code>helloA</code>，看上去字符数变少了，只有6个(0值没有显示，其<code>ascii码</code>是不可打印码)，但底层数据没变，依然是<code>[104 101 108 108 111 0 0 0 65 0]</code></p>
<p>2. 格式化参数<code>%q</code>直接对0值进行了输出<code>hello\x00\x00\x00A\x00</code>，它打印了<code>string</code>中的每一个字节，包括不可打印的字节</p>
<p>3. <code>str + &quot; world&quot;</code>的长度为16，也证明了<code>str</code>中的0值没有被去除(10 + 6 = 16)</p>
<p>4.使用<code>fmt</code>查看数据”长什么样子”有时候是不准确的</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 io.Writer 接口</title>
    <url>/golang-io-writer/</url>
    <content><![CDATA[<h1 id="io-Writer接口实现要求"><a href="#io-Writer接口实现要求" class="headerlink" title="io.Writer接口实现要求"></a><code>io.Writer</code>接口实现要求</h1><p>开始以为只是实现了<code>Write</code>方法就行，看了源码发现还有很多细节上的要求</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// src/io/io.go</span>
<span class="token keyword">type</span> Writer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Write</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>1.要把 <code>p</code>写入实现类型的底层数据中</p>
<p>2.要返回实际写入的长度和在写入时遇到的错误，如果实际写入的长度小于<code>len(p)</code>，返回的<code>err</code>必须是非<code>nil</code>的</p>
<p>3. <code>p</code>不能在方法内部被修改，即使临时性的也不可以</p>
<p>4. 不能对<code>p</code>进行保存</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 程序性能剖析</title>
    <url>/golang-pprof/</url>
    <content><![CDATA[<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><p>对程序性能进行剖析，可以找到性能的瓶颈、bug、以及对程序进行有目标的优化，从而提高程序的性能，解决程序中存在的问题。</p>
<h1 id="如何对程序进行剖析"><a href="#如何对程序进行剖析" class="headerlink" title="如何对程序进行剖析"></a>如何对程序进行剖析</h1><ol>
<li>设置要分析的指标，利用<code>工具 (go test)</code>或<code>性能指标API</code>对指标进行剖析，生成对应的概要文件(二进制文件)</li>
<li>使用分析工具(go tool pprof/ go tool trace)对概要文件进行解析，得到性能指标值的具体信息，这些信息可以以文本，图形的形式展示。</li>
<li>根据得到性能指标值的具体信息，分析程序性能，查找程序瓶颈或对程序进行优化</li>
</ol>
<p>要对一个程序进行剖析，必须先生成对应指标的<code>概要文件</code>，然后再用<code>分析工具</code>去解析这个<code>概要文件</code></p>
<h1 id="概要文件"><a href="#概要文件" class="headerlink" title="概要文件"></a>概要文件</h1><p>是Go程序在某一段时间内，对相关指标采样后，得到的概要信息。剖析时，会在程序执行期间进行一些自动抽样，在结束时进行推断，最后把统计结果保存为概要文件，供分析工具使用。</p>
<h2 id="概要文件的格式"><a href="#概要文件的格式" class="headerlink" title="概要文件的格式"></a>概要文件的格式</h2><p>概要文件其实就是 由 <code>protocol buffers</code> 生成的二进制数据流，<code>protocol buffers</code> 是一种数据序列化协议，它定义了程序对象如 <code>map</code>，结构体，数组等与字节之间如何相互转化。同时 <code>protocol buffers</code> 不仅仅是协议，也可以作为转化工具来使用，它可以把字节流转化为对象，也可以把对象转化为字节流。<code>protocol buffers</code> 会对生成的字节流进行压缩，它的体积比(<code>JSON，XML</code>)都要更小，所以也更适合用于数据在网上传输</p>
<h2 id="生成概要文件的方法"><a href="#生成概要文件的方法" class="headerlink" title="生成概要文件的方法"></a>生成概要文件的方法</h2><p>Go 语言支持多种类型的性能分析，可以通过</p>
<ul>
<li>使用 go test 配合对应的标识符</li>
<li>使用性能指标API</li>
</ul>
<p>这两种方式，都可以生成概要文件</p>
<h2 id="有关性能的概要文件"><a href="#有关性能的概要文件" class="headerlink" title="有关性能的概要文件"></a>有关性能的概要文件</h2><p>CPU概要文件，内存概要文件，阻塞概要文件，它们可以通过 go test 配合对应的标识符生成，对CPU，内存，阻塞这三个指标进行分析。</p>
<h1 id="Go-test-标识生成概要文件"><a href="#Go-test-标识生成概要文件" class="headerlink" title="Go test 标识生成概要文件"></a>Go test 标识生成概要文件</h1><p>可以使用 <code>go test</code>工具提供的剖析标识对程序进行分析，生成概要文件。不要让多个剖析标识同时运行，它们之间会相互影响，导致分析结果不准确</p>
<h2 id="Cpu-剖析标识"><a href="#Cpu-剖析标识" class="headerlink" title="Cpu 剖析标识"></a>Cpu 剖析标识</h2><p>记录占用CPU时间最长的函数，每个运行在CPU上的函数每几毫秒都会遇到系统中断事件，每次中断时，都会记录一个剖析数据</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> test gott<span class="token operator">/</span>fib <span class="token operator">-</span>cpuprofile<span class="token operator">=</span>cpu<span class="token punctuation">.</span>log <span class="token operator">-</span>run<span class="token operator">=</span>None <span class="token operator">-</span>bench<span class="token operator">=</span>FibWithMap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="堆剖析标识"><a href="#堆剖析标识" class="headerlink" title="堆剖析标识"></a>堆剖析标识</h2><p>记录最耗内容的语句，平均每申请512K的内存，就会记录一个剖析数据</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> test gott<span class="token operator">/</span>fib <span class="token operator">-</span>memprofile<span class="token operator">=</span>mem<span class="token punctuation">.</span>log <span class="token operator">-</span>run<span class="token operator">=</span>None <span class="token operator">-</span>bench<span class="token operator">=</span>FibWithMap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="阻塞剖解标识"><a href="#阻塞剖解标识" class="headerlink" title="阻塞剖解标识"></a>阻塞剖解标识</h2><p>记录阻塞goroutine最久的操作，如系统调用，等待锁，管道收发等，每当这些操作阻塞goroutine时，就会记录一个剖析数据</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> test gott<span class="token operator">/</span>fib <span class="token operator">-</span>blockprofile<span class="token operator">=</span>block<span class="token punctuation">.</span>log <span class="token operator">-</span>run<span class="token operator">=</span>None <span class="token operator">-</span>bench<span class="token operator">=</span>FibWithMap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h1 id="解析概要文件"><a href="#解析概要文件" class="headerlink" title="解析概要文件"></a>解析概要文件</h1><h2 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h2><p>使用以上标识符，除了生成了剖析数据日志(cpu.log/mem.log/block.log)，go test  还会生成对应的可执行程序(fib.test)，以包名做为前缀，后面为<code>.test</code>的文件。为了减少剖析数据日志占用的空间和提高分析效率，分析日志本身并没有记录函数的名称，而是函数的地址，所以需要与之对应的可执行文件，才可以对剖析日志进行数据分析</p>
<h2 id="pprof-分析工具"><a href="#pprof-分析工具" class="headerlink" title="pprof 分析工具"></a>pprof 分析工具</h2><p> <code>go tool pprof</code>命令可以用来分析剖析日志，它需要两个基本的参数</p>
<ul>
<li>剖析文件日志</li>
<li>测试生成的可执行文件</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> tool pprof <span class="token operator">-</span>text <span class="token operator">-</span>nodecount<span class="token operator">=</span><span class="token number">10</span> <span class="token punctuation">.</span><span class="token operator">/</span>fib<span class="token punctuation">.</span>test cpu<span class="token punctuation">.</span>log

File<span class="token punctuation">:</span> fib<span class="token punctuation">.</span>test
Type<span class="token punctuation">:</span> cpu
Time<span class="token punctuation">:</span> Aug <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2021</span> at <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">30</span>am <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>
Duration<span class="token punctuation">:</span> <span class="token number">1.43</span>s<span class="token punctuation">,</span> Total samples <span class="token operator">=</span> <span class="token number">1.09</span>s <span class="token punctuation">(</span><span class="token number">76.02</span><span class="token operator">%</span><span class="token punctuation">)</span>
Showing nodes accounting <span class="token keyword">for</span> <span class="token number">1.09</span>s<span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">%</span> of <span class="token number">1.09</span>s total
Showing top <span class="token number">10</span> nodes out of <span class="token number">17</span>
      flat  flat<span class="token operator">%</span>   sum<span class="token operator">%</span>        cum   cum<span class="token operator">%</span>
     <span class="token number">0.49</span>s <span class="token number">44.95</span><span class="token operator">%</span> <span class="token number">44.95</span><span class="token operator">%</span>      <span class="token number">0.94</span>s <span class="token number">86.24</span><span class="token operator">%</span>  runtime<span class="token punctuation">.</span>mapaccess2_fast64
     <span class="token number">0.36</span>s <span class="token number">33.03</span><span class="token operator">%</span> <span class="token number">77.98</span><span class="token operator">%</span>      <span class="token number">0.36</span>s <span class="token number">33.03</span><span class="token operator">%</span>  runtime<span class="token punctuation">.</span>memhash64
     <span class="token number">0.12</span>s <span class="token number">11.01</span><span class="token operator">%</span> <span class="token number">88.99</span><span class="token operator">%</span>      <span class="token number">1.06</span>s <span class="token number">97.25</span><span class="token operator">%</span>  gott<span class="token operator">/</span>fib<span class="token punctuation">.</span>fibWithMap
     <span class="token number">0.06</span>s  <span class="token number">5.50</span><span class="token operator">%</span> <span class="token number">94.50</span><span class="token operator">%</span>      <span class="token number">0.06</span>s  <span class="token number">5.50</span><span class="token operator">%</span>  runtime<span class="token punctuation">.</span>add <span class="token punctuation">(</span>partial<span class="token operator">-</span>inline<span class="token punctuation">)</span>
     <span class="token number">0.03</span>s  <span class="token number">2.75</span><span class="token operator">%</span> <span class="token number">97.25</span><span class="token operator">%</span>      <span class="token number">0.03</span>s  <span class="token number">2.75</span><span class="token operator">%</span>  runtime<span class="token punctuation">.</span>bucketShift <span class="token punctuation">(</span>inline<span class="token punctuation">)</span>
     <span class="token number">0.02</span>s  <span class="token number">1.83</span><span class="token operator">%</span> <span class="token number">99.08</span><span class="token operator">%</span>      <span class="token number">1.08</span>s <span class="token number">99.08</span><span class="token operator">%</span>  gott<span class="token operator">/</span>fib<span class="token punctuation">.</span>BenchmarkFibWithMap
     <span class="token number">0.01</span>s  <span class="token number">0.92</span><span class="token operator">%</span>   <span class="token number">100</span><span class="token operator">%</span>      <span class="token number">0.01</span>s  <span class="token number">0.92</span><span class="token operator">%</span>  runtime<span class="token punctuation">.</span>wbBufFlush1
         <span class="token number">0</span>     <span class="token number">0</span><span class="token operator">%</span>   <span class="token number">100</span><span class="token operator">%</span>      <span class="token number">0.01</span>s  <span class="token number">0.92</span><span class="token operator">%</span>  runtime<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">.</span>overflow <span class="token punctuation">(</span>inline<span class="token punctuation">)</span>
         <span class="token number">0</span>     <span class="token number">0</span><span class="token operator">%</span>   <span class="token number">100</span><span class="token operator">%</span>      <span class="token number">0.03</span>s  <span class="token number">2.75</span><span class="token operator">%</span>  runtime<span class="token punctuation">.</span>bucketMask <span class="token punctuation">(</span>inline<span class="token punctuation">)</span>
         <span class="token number">0</span>     <span class="token number">0</span><span class="token operator">%</span>   <span class="token number">100</span><span class="token operator">%</span>      <span class="token number">0.01</span>s  <span class="token number">0.92</span><span class="token operator">%</span>  runtime<span class="token punctuation">.</span>findrunnable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>./fib.test</code>：测试生成的可执行文件，在一般的测试中，当测试完成后，文件就会被丢弃，但在启用剖析标识后，这个文件会被保留，供之后的分析使用</li>
<li><code> -nodecount</code>：限制分析结果输出的行数</li>
<li><code>-text</code>：指定输出的格式</li>
</ul>
<p>还可以使用-web选项，用于生成函数的有向图，标注有CPU的使用和最热点的函数等信息</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> tool pprof <span class="token operator">-</span>web <span class="token operator">-</span>nodecount<span class="token operator">=</span><span class="token number">10</span> <span class="token punctuation">.</span><span class="token operator">/</span>fib<span class="token punctuation">.</span>test cpu<span class="token punctuation">.</span>log

<span class="token comment">// 使用-web需要安装 GraphViz</span>
brew install graphviz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p>还可以不加任何选项进入交互界面</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> tool pprof cpu<span class="token punctuation">.</span>log
Type<span class="token punctuation">:</span> cpu
Time<span class="token punctuation">:</span> Aug <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2021</span> at <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">30</span>am <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>
Duration<span class="token punctuation">:</span> <span class="token number">1.43</span>s<span class="token punctuation">,</span> Total samples <span class="token operator">=</span> <span class="token number">1.09</span>s <span class="token punctuation">(</span><span class="token number">76.02</span><span class="token operator">%</span><span class="token punctuation">)</span>
Entering interactive mode <span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token string">"help"</span> <span class="token keyword">for</span> commands<span class="token punctuation">,</span> <span class="token string">"o"</span> <span class="token keyword">for</span> options<span class="token punctuation">)</span>
<span class="token punctuation">(</span>pprof<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里只用到了概要文件，没有用到测试生成的可执行文件</p>
<h1 id="性能指标API生成概要文件"><a href="#性能指标API生成概要文件" class="headerlink" title="性能指标API生成概要文件"></a>性能指标API生成概要文件</h1><p>除了使用 go test 标识对程序进行性能分析，还可以使用标准库中的 <code>runtime/pprof</code>，<code>runtime/trace</code>，<code>net/http/pprof</code>这三个包中提供的API来对Go程序进行性能分析，生成概要文件。</p>
<h2 id="生成CPU概要文件"><a href="#生成CPU概要文件" class="headerlink" title="生成CPU概要文件"></a>生成CPU概要文件</h2><h3 id="StartCPUProfile函数"><a href="#StartCPUProfile函数" class="headerlink" title="StartCPUProfile函数"></a>StartCPUProfile函数</h3><p><code>StartCPUProfile()</code>函数对CPU信息进行定时采样生成概要文件，默认采样频率是100Hz，即每秒采样100次，调用<code>pprof.StartCPUProfile()</code>函数开始进行采样。</p>
<h3 id="StopCPUProfile函数"><a href="#StopCPUProfile函数" class="headerlink" title="StopCPUProfile函数"></a>StopCPUProfile函数</h3><p>调用<code>pprof.StopCPUProfile()</code>停止采样。当调用<code>pprof.StartCPUProfile()</code>时，会启用一个新的goroutine，并在其中进行CPU信息的收集</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">StopCPUProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cpu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> cpu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token operator">!</span>cpu<span class="token punctuation">.</span>profiling <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	cpu<span class="token punctuation">.</span>profiling <span class="token operator">=</span> <span class="token boolean">false</span>
	runtime<span class="token punctuation">.</span><span class="token function">SetCPUProfileRate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token operator">&lt;-</span>cpu<span class="token punctuation">.</span>done
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>StopCPUProfile</code>是通过设置<code>SetCPUProfileRate(0)</code>为0，来停止采样的，而<code>pprof.StartCPUProfile</code> 是把<code>runtime.SetCPUProfileRate(100)</code>设置为100来开始采样的</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	profileName <span class="token operator">:=</span> <span class="token string">"cpu_api.log"</span>
	f<span class="token punctuation">,</span> err <span class="token operator">:=</span> common<span class="token punctuation">.</span><span class="token function">CreateFile</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> profileName<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"CPU profile creation error: %v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	pprof<span class="token punctuation">.</span><span class="token function">StartCPUProfile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
	op<span class="token punctuation">.</span><span class="token function">CPULoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 耗时的CPU操作</span>
	pprof<span class="token punctuation">.</span><span class="token function">StopCPUProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>pprof.StartCPUProfile(f)</code>：把概要文件写入 cpu_api.log 文件</p>
<p>生成概要文件</p>
<p><code>go run pprof/cpu/cpu.go</code></p>
<p>go tool pprof 查看概要文件内容</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go tool pprof -text -nodecount<span class="token operator">=</span><span class="token number">15</span>  cpu_api.log
Type: cpu
Time: Aug <span class="token number">17</span>, <span class="token number">2021</span> at <span class="token number">3</span>:56pm <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>
Duration: <span class="token number">1</span>.62s, Total samples <span class="token operator">=</span> <span class="token number">1</span>.47s <span class="token punctuation">(</span><span class="token number">90.66</span>%<span class="token punctuation">)</span>
Showing nodes accounting <span class="token keyword">for</span> <span class="token number">1</span>.47s, <span class="token number">100</span>% of <span class="token number">1</span>.47s total
Showing <span class="token function">top</span> <span class="token number">15</span> nodes out of <span class="token number">49</span>
      flat  flat%   sum%        cum   cum%
     <span class="token number">1</span>.29s <span class="token number">87.76</span>% <span class="token number">87.76</span>%      <span class="token number">1</span>.29s <span class="token number">87.76</span>%  runtime.memmove
     <span class="token number">0</span>.06s  <span class="token number">4.08</span>% <span class="token number">91.84</span>%      <span class="token number">0</span>.06s  <span class="token number">4.08</span>%  runtime.usleep
     <span class="token number">0</span>.02s  <span class="token number">1.36</span>% <span class="token number">93.20</span>%      <span class="token number">0</span>.02s  <span class="token number">1.36</span>%  runtime.madvise
     <span class="token number">0</span>.02s  <span class="token number">1.36</span>% <span class="token number">94.56</span>%      <span class="token number">0</span>.02s  <span class="token number">1.36</span>%  runtime.pthread_kill
     <span class="token number">0</span>.02s  <span class="token number">1.36</span>% <span class="token number">95.92</span>%      <span class="token number">0</span>.10s  <span class="token number">6.80</span>%  runtime.slicebytetostring
     <span class="token number">0</span>.01s  <span class="token number">0.68</span>% <span class="token number">96.60</span>%      <span class="token number">1</span>.25s <span class="token number">85.03</span>%  bytes.<span class="token punctuation">(</span>*Buffer<span class="token punctuation">)</span>.WriteString
     <span class="token number">0</span>.01s  <span class="token number">0.68</span>% <span class="token number">97.28</span>%      <span class="token number">0</span>.01s  <span class="token number">0.68</span>%  runtime.<span class="token punctuation">(</span>*mspan<span class="token punctuation">)</span>.init <span class="token punctuation">(</span>inline<span class="token punctuation">)</span>
     <span class="token number">0</span>.01s  <span class="token number">0.68</span>% <span class="token number">97.96</span>%      <span class="token number">0</span>.01s  <span class="token number">0.68</span>%  runtime.memclrNoHeapPointers
     <span class="token number">0</span>.01s  <span class="token number">0.68</span>% <span class="token number">98.64</span>%      <span class="token number">0</span>.01s  <span class="token number">0.68</span>%  runtime.newArenaMayUnlock
     <span class="token number">0</span>.01s  <span class="token number">0.68</span>% <span class="token number">99.32</span>%      <span class="token number">0</span>.01s  <span class="token number">0.68</span>%  runtime.pthread_cond_wait
     <span class="token number">0</span>.01s  <span class="token number">0.68</span>%   <span class="token number">100</span>%      <span class="token number">0</span>.05s  <span class="token number">3.40</span>%  strconv.FormatInt
         <span class="token number">0</span>     <span class="token number">0</span>%   <span class="token number">100</span>%      <span class="token number">0</span>.06s  <span class="token number">4.08</span>%  bytes.<span class="token punctuation">(</span>*Buffer<span class="token punctuation">)</span>.String <span class="token punctuation">(</span>inline<span class="token punctuation">)</span>
         <span class="token number">0</span>     <span class="token number">0</span>%   <span class="token number">100</span>%      <span class="token number">0</span>.10s  <span class="token number">6.80</span>%  bytes.<span class="token punctuation">(</span>*Buffer<span class="token punctuation">)</span>.grow
         <span class="token number">0</span>     <span class="token number">0</span>%   <span class="token number">100</span>%      <span class="token number">0</span>.01s  <span class="token number">0.68</span>%  bytes.makeSlice
         <span class="token number">0</span>     <span class="token number">0</span>%   <span class="token number">100</span>%      <span class="token number">1</span>.36s <span class="token number">92.52</span>%  gott/common/op.CPULoad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h2 id="生成内存概要文件"><a href="#生成内存概要文件" class="headerlink" title="生成内存概要文件"></a>生成内存概要文件</h2><p>对堆内存的使用进行采样，会按照平均每分配多少个字节(默认为512B)，就对堆内存的使用情况进行一次采样。</p>
<h3 id="MemProfileRate"><a href="#MemProfileRate" class="headerlink" title="MemProfileRate"></a>MemProfileRate</h3><p>为 runtime.MemProfileRate 设置采样频率(默认值是512KB)，对其赋0值表示停止采样。</p>
<h3 id="WriteHeapProfile-函数"><a href="#WriteHeapProfile-函数" class="headerlink" title="WriteHeapProfile 函数"></a>WriteHeapProfile 函数</h3><p>调用WriteHeapProfile 函数，根据采样频率进行采样，并把收集到的采样信息写入指定文件。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 源码文件</span>
<span class="token comment">// WriteHeapProfile is shorthand for Lookup("heap").WriteTo(w, 0).</span>
<span class="token comment">// It is preserved for backwards compatibility.</span>
<span class="token keyword">func</span> <span class="token function">WriteHeapProfile</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">writeHeap</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="ReadMemStats-函数"><a href="#ReadMemStats-函数" class="headerlink" title="ReadMemStats 函数"></a>ReadMemStats 函数</h3><p><code>WriteHeapProfile(f)</code>函数记录的并不是实时的内存概要信息，而是最近一次内存垃圾工作完成后产生的。要得到实时信息可以使用<code>runtime.ReadMemStats()</code>函数</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	profileName <span class="token operator">:=</span> <span class="token string">"mem_api.log"</span>
	f<span class="token punctuation">,</span> err <span class="token operator">:=</span> common<span class="token punctuation">.</span><span class="token function">CreateFile</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> profileName<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"memory profile creation error: %v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">startMemProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fib<span class="token punctuation">.</span><span class="token function">FibMap</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>
	<span class="token function">endMemProfile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">startMemProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	runtime<span class="token punctuation">.</span>MemProfileRate <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">endMemProfile</span><span class="token punctuation">(</span>f <span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	pprof<span class="token punctuation">.</span><span class="token function">WriteHeapProfile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调用<code>runtime.MemProfileRate</code>设置每申请1B的内存，就进行采样，调用<code>pprof.WriteHeapProfile(f)</code>把采样信息写入指定的文件<code>mem_api.log</code>中</p>
<h2 id="生成阻塞概要文件"><a href="#生成阻塞概要文件" class="headerlink" title="生成阻塞概要文件"></a>生成阻塞概要文件</h2><h3 id="SetBlockProfileRate函数"><a href="#SetBlockProfileRate函数" class="headerlink" title="SetBlockProfileRate函数"></a>SetBlockProfileRate函数</h3><p>它在<code>runtime</code>包中，用来设置采样频率，其参数<code>rate</code>的值表示，当阻塞持续多少纳秒后对其进行进行采样。如果这个值小于等于0，则停止采样。</p>
<h3 id="blockprofilerate变量"><a href="#blockprofilerate变量" class="headerlink" title="blockprofilerate变量"></a>blockprofilerate变量</h3><p>参数<code>rate</code>的值会被转换为CPU的时钟周期，然后赋值给<code>blockprofilerate</code>，即：实际采样频率为当一个阻塞持续了多少个CPU时钟周期，就对这个事件进行采样</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// go 源码文件</span>
<span class="token keyword">func</span> <span class="token function">SetBlockProfileRate</span><span class="token punctuation">(</span>rate <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> r <span class="token builtin">int64</span>
	<span class="token keyword">if</span> rate <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		r <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// disable profiling</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> rate <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>
		r <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// profile everything</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// convert ns to cycles, use float64 to prevent overflow during multiplication</span>
		r <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>rate<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">tickspersecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			r <span class="token operator">=</span> <span class="token number">1</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	atomic<span class="token punctuation">.</span><span class="token function">Store64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>blockprofilerate<span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="pprof-Lookup-“block”"><a href="#pprof-Lookup-“block”" class="headerlink" title="pprof.Lookup(“block”)"></a>pprof.Lookup(“block”)</h3><p>用来获取阻塞概要信息，获取信息要调用<code>pprof.Lookup(&quot;block&quot;)</code>，<code>block</code>做为参数传入，函数会返回一个<code>*pprof.Profile</code>类型的值，对这个值调用<code>WriteTo(w io.Writer, debug int)</code>方法，可以把概要信息写入文件。这个方法的第一个参数传入要写入概要信息的文件，第二个参数debug表示概要信息详细程度</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	profileName <span class="token operator">:=</span> <span class="token string">"block_api.log"</span>
	f<span class="token punctuation">,</span> err <span class="token operator">:=</span> common<span class="token punctuation">.</span><span class="token function">CreateFile</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> profileName<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"block profile creation error: %v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">startBlockProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fib<span class="token punctuation">.</span><span class="token function">FibMap</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span>
	<span class="token function">stopBlockProfile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">startBlockProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	runtime<span class="token punctuation">.</span><span class="token function">SetBlockProfileRate</span><span class="token punctuation">(</span>blockProfileRate<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">stopBlockProfile</span><span class="token punctuation">(</span>f <span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	pprof<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"block"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> debug<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>debug参数的值</p>
<ul>
<li>0：生成protocol buffers字节流</li>
<li>1：生成内容可读的普通文本的概要文件，且函数名，包名，源码文件等信息会被做为注释加入进概要文件</li>
<li>2：生成内容可读的普通文本的概要文件，且包括更详细的信息</li>
</ul>
<p>对于使用参数值<code>1、2</code>生成的概要文件，不能使用 <code>go tool pprof </code> 查看，因为文件不是 <code>protocol</code>格式</p>
<h1 id="pprof-Lookup函数的使用"><a href="#pprof-Lookup函数的使用" class="headerlink" title="pprof.Lookup函数的使用"></a>pprof.Lookup函数的使用</h1><p><code>Lookup(name string)</code>通过给定的<code>name</code> 的值，返回对应的概要信息。如果返回值是 nil，表示不存在与给定名称对应的概要信息。预定义了6个概要名称，分别是<code>goroutine, threadcreate, heap, allocs, block, mutex</code></p>
<p>函数的返回值是<code>*Profile</code>类型的值，可以通过调用<code>WriteTo(w io.Writer, debug int)</code>方法，把采样的概要信息写入指定的文件中(通过第一个参数设置)，第二个参数表示了写入信息的详细细节程序，值可以是<code>0,1,2</code>(具体代表的内容就是上面小节讲的)。</p>
<p>预定义概要名称的使用</p>
<ul>
<li><p><code>goroutine</code></p>
<p>此指标可以收集正在使用的所有 goroutine 的堆栈跟踪信息，在调用WriteTo方法时，如果debug的值大于等于2，会把这些信息写入概要文件，文件可能会非常大</p>
</li>
<li><p><code>heap、allocs</code></p>
<p>此指标会收集与堆内存的分配和释放有关的采样信息，可以看成是内存概要信息，heap 与 allocs 仅在debug为0的时候会有区别，heap统计的是已经分配但还没有释放的内存空间，allocs展示的是已分配的内存空间。当debug的值大于0时，这两个指标值输出的内容是相同的</p>
</li>
<li><p><code>threadcreate</code></p>
<p>此指标会收集堆栈跟踪信息。这些堆栈跟踪信息中的每一个都会描绘出一个代码调用链，这些调用链上的代码都导致新的操作系统线程产生</p>
</li>
<li><p><code>block</code></p>
<p>此指标会收集因争用同步原语而被阻塞的那些代码的堆栈跟踪信息</p>
</li>
<li><p><code>mutex</code></p>
<p>此指标会收集曾经作为同步原语持有者的那些代码，它们的堆栈跟踪信息</p>
<p>同步原语可以理解为：通道、互斥锁、条件变量、”WaitGroup”</p>
</li>
</ul>
<p>对于除了 CPU 概要信息之外的其他概要信息，我们都可以通过调用这个函数获取到。</p>
<h1 id="为基于-HTTP-协议的网络服务添加性能分析接口"><a href="#为基于-HTTP-协议的网络服务添加性能分析接口" class="headerlink" title="为基于 HTTP 协议的网络服务添加性能分析接口"></a>为基于 HTTP 协议的网络服务添加性能分析接口</h1><p>在我们编写网络服务程序的时候，使用<code>net/http/pprof</code>包要比直接使用<code>runtime/pprof</code>包方便和实用很多，这个代码包可以为网络服务的监测提供有力的支撑</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"log"</span>
	<span class="token string">"net/http"</span>
	<span class="token boolean">_</span> <span class="token string">"net/http/pprof"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">"localhost:8082"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>直接访问<a href="http://localhost:8082/debug/pprof">http://localhost:8082/debug/pprof</a> 可以看到<code>goroutine,threadcreate,heap, allocs,block,mutex</code>这6个指标的概要信息。它们都配有debug参数，默认值为0，可以通过改变debug的值改变概要信息的详细程度，如 <code>gotroutine</code>的URL是<code>http://localhost:8082/debug/pprof/goroutine?debug=1</code></p>
<p>当访问<a href="http://localhost:8082/debug/pprof/profile">http://localhost:8082/debug/pprof/profile</a> 时，程序会执行对 CPU 概要信息的采样，可以通过加入参数<code>seconds</code>来控制对cpu的访问时间(默认是30秒)，当采样结束后，会提示你下载概要文件。你也可以执行下面命令，直接读取概要文件</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> tool pprof http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">6060</span><span class="token operator">/</span>debug<span class="token operator">/</span>pprof<span class="token operator">/</span>profile?seconds<span class="token operator">=</span><span class="token number">60</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h1 id="要回答的问题"><a href="#要回答的问题" class="headerlink" title="要回答的问题"></a>要回答的问题</h1><p><em><strong>先写结论，便于接下来的阅读与理解</strong></em></p>
<h2 id="基准测试与剖析的区别"><a href="#基准测试与剖析的区别" class="headerlink" title="基准测试与剖析的区别"></a>基准测试与剖析的区别</h2><p>基准测试可以用来衡量一个程序的性能，如果想让程序运行的更快，或对性能不理想的程序进行提升，基准测试无法给出从哪里可以进行优化。</p>
<p>通过剖析，可以找出程序性能瓶颈所在，从而有针对性的对程序进行优化，提高性能。不要过早的进行优化，97%的场景，都不需要过早优化或根本就不需要优化，我们要做的仅是让程序可以正常运行即可。</p>
<h2 id="剖析是如何进行的"><a href="#剖析是如何进行的" class="headerlink" title="剖析是如何进行的"></a>剖析是如何进行的</h2><p>剖析就是在程序执行期间进行一些自动抽样，在结束时进行推断，最后把统计结果保存为剖析数据文件，供剖析工具使用。Go 语言支持多种类型的剖析性能分析，可以通过go test 工具或调用Go的runtime 性能分析API(启用运行时剖析)，对程序进行剖析。</p>
<h2 id="需要对哪些代码进行剖析"><a href="#需要对哪些代码进行剖析" class="headerlink" title="需要对哪些代码进行剖析"></a>需要对哪些代码进行剖析</h2><p>要对程序的主要功能，关键部分进行基准测试，然后对其进行剖析，功能测试不应该参与进来，使用 <code>-run=None</code>，禁止功能测试的运行</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 测试覆盖率</title>
    <url>/golang-test-coverage/</url>
    <content><![CDATA[<h1 id="覆盖率"><a href="#覆盖率" class="headerlink" title="覆盖率"></a>覆盖率</h1><p>语句的覆盖率是指在测试中至少被运行一次的代码占总代码数的比例。</p>
<h1 id="生成测试报告"><a href="#生成测试报告" class="headerlink" title="生成测试报告"></a>生成测试报告</h1><p>在生成报告之前，要确保所有的测试都正常通过。使用<code>go test</code>命令配合不同的参数标示可以生成不同类型的覆盖率分析报告</p>
<h2 id="使用标志coverprofile"><a href="#使用标志coverprofile" class="headerlink" title="使用标志coverprofile"></a>使用标志<code>coverprofile</code></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> gott/prime -coverprofile<span class="token operator">=</span>c.out
ok      gott/prime      <span class="token number">0</span>.013s  coverage: <span class="token number">93.8</span>% of statements<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在运行每个测试前，会把参与测试的源代码拷贝一份，并对每个词法块插入一个布尔变量，来统计代码块在测试中是否被执行过，以此来统计代码覆盖率，统计日志数据写入c.out文件</p>
<p><img src="//img.gagahappy.cn/blog/2021/08/golang-test-coverage-1.png_b1" alt="go 语言 测试覆盖率" title="go 语言 测试覆盖率"></p>
<h2 id="使用标志covermode"><a href="#使用标志covermode" class="headerlink" title="使用标志covermode"></a>使用标志<code>covermode</code></h2><p>如果同时使用了<code>-covermode=count</code>，会在每个代码块插入计数器以统计代码块被执行的次数，用这个功能可以看到哪些代码是频繁执行的热点代码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> gott/prime -coverprofile<span class="token operator">=</span>c.out -covermode<span class="token operator">=</span>count
ok      gott/prime      <span class="token number">0</span>.015s  coverage: <span class="token number">93.8</span>% of statements<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="//img.gagahappy.cn/blog/2021/08/golang-test-coverage-2.png_b1" alt="go 语言 测试覆盖率" title="go 语言 测试覆盖率"></p>
<h1 id="查看测试报告"><a href="#查看测试报告" class="headerlink" title="查看测试报告"></a>查看测试报告</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go tool cover -html<span class="token operator">=</span>c.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>运行后会自动在浏览器中打开，绿色的代码块代表被测试覆盖到了，红色的则表示没有被覆盖到。如果使用了<code> -covermode=count</code>标志，会用红、灰、绿 三种颜色表示代码被调用的频率，红色表示没有调用，灰色表示频率较低，绿色随颜色深浅表示不同程度的频率调用。具体可见上图测试报告。</p>
<h1 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h1><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// primes_test.go</span>
<span class="token keyword">func</span> <span class="token function">TestPrimes</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	max <span class="token operator">:=</span> <span class="token number">1000</span>
	primes <span class="token operator">:=</span> <span class="token function">GetPrimes</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span>
	t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>primes<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// primes.go</span>
<span class="token comment">// 查找质数</span>
<span class="token keyword">func</span> <span class="token function">GetPrimes</span><span class="token punctuation">(</span>max <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> max <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	marks <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span>
	<span class="token keyword">var</span> count <span class="token builtin">int</span>
	squareRoot <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> squareRoot<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>marks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span> j <span class="token operator">:=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> j <span class="token operator">+=</span> i <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token operator">!</span>marks<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
					marks<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
					count<span class="token operator">++</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	primes <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">-</span>count<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>marks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
			primes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>primes<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> primes
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>测试不可能是完整的，计算机科学家Edsger Dijkstra曾说过：“测试能证明缺陷存在，而无法证明没有缺陷。”</li>
<li>实现100%的测试覆盖率听起来很美，但是在具体实践中通常是不可行的，也不是值得推荐的做法。应该对更需要测试的地方添加测试代码，而不是一味的为每个方法都加入测试代码</li>
<li>测试覆盖率工具可以帮助我们快速识别测试薄弱的地方</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 中的文件描述符</title>
    <url>/linux-fd-in-linux/</url>
    <content><![CDATA[<h1 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h1><p>即<code>file descriptor</code>，简称<code>FD</code> ，用于指代被打开的文件，用一个非负的整数表示</p>
<h1 id="对文件描述符的误区"><a href="#对文件描述符的误区" class="headerlink" title="对文件描述符的误区"></a>对文件描述符的误区</h1><p>每个程序启动的时候，都会打开3个文件，分别是，0标准输入，1标准输出，2标准错误，此后再打开文件的文件描述符就是3，依次类推。之前的误区是，当在进程中打开一个文件，它的文件描述符应该已经很大了，不应该是<code>3</code>，因为系统本身已经运行了很多程序。正确的应该是：进程只能看到自己的文件描述符，每个进程的文件描述符的编号都是从0开始，进程启动，默认都会打开<code>标准输入，标准输出，标准错误</code>这三个文件，之后再打开的文件的描述符从编号3开始</p>
<h1 id="文件件描述符列表"><a href="#文件件描述符列表" class="headerlink" title="文件件描述符列表"></a>文件件描述符列表</h1><p>每个进程都有着自己的文件描述符列表。进程A启动后，拥有<code>stdin,stdout,stderr</code>这三个文件描述符 ，再打开一个文件，这个文件的文件描述符就是3。进程B启动后，拥有<code>stdin,stdout,stderr</code>这三个文件描述符，再打一个文件，它的文件描述符也是3，和进程A的一样。所以，不同进程，可以拥有相同的文件描述符。</p>
<p>当一个文件在同一个进程中，被打开多次，那么这个文件具有不同的文件描述符，在同一个进程中，每个文件描述符只能对应一个文件。同一个进程，不同文件描述符可以指向同一个文件。</p>
<p>不同进程，如果都打开了同一个文件(文件描述符都指向同一个文件)，那么它们都具有这个文件的句柄，其中一个进程对文件的修改，对其它进程是可见的。比如进程A对文件写入了10个字节，进程B在对文件进行写入时，是从第11个字节处开始写入的，而不是从文件头开始写入，这些操作包括<code>read(),write(),seek()</code>等</p>
<h1 id="文件描述符限制"><a href="#文件描述符限制" class="headerlink" title="文件描述符限制"></a>文件描述符限制</h1><p>内核为了不让某个进程消耗掉所有的文件资源，会对单个进程最大打开文件数做默认值处理（称之为用户级限制），默认值一般是1024。注意：同一个文件，可以有多个文件句柄，这可能是不同进程打开了同一个文件，或者是同一个进程内，对一个文件打开了多次</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx 设置 gzip http 版本</title>
    <url>/nginx-set-gzip-http-version/</url>
    <content><![CDATA[<h1 id="设置gzip-http-version"><a href="#设置gzip-http-version" class="headerlink" title="设置gzip_http_version"></a>设置<code>gzip_http_version</code></h1><p>使用<code>ab</code> 测试网站，参数如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ab -n <span class="token number">50</span> -c <span class="token number">10</span> -H <span class="token string">"Accept-Encoding: gzip, deflate"</span> https://example.com/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>发现返回的文档没有被压缩，查看<code>nginx</code>日志也显示返回的是原始大小，查询资料后发现是<code>nginx</code> 配置<code>gzip_http</code>版本问题</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">gzip</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>

<span class="token directive"><span class="token keyword">gzip_vary</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">gzip_min_length</span> <span class="token number">1k</span></span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">gzip_proxied</span> any</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">gzip_comp_level</span> <span class="token number">6</span></span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">gzip_buffers</span> <span class="token number">16</span> <span class="token number">8k</span></span><span class="token punctuation">;</span>
gzip_http_version 1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>gzip_http_version </code>设置为了1.1，而 <code>ab</code>只支持<code>http_version:1.0</code>，改为<code>1.0</code>即可。</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">gzip_http_version 1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>再次测试，返回数据是被压缩后的数据，从<code>nginx</code>日志也可以看到数据是压缩后的。类似的<code>ab</code> 的工具还有<a href="https://github.com/JoeDog/siege">siege</a>，可以很好的支持<code>http 1.1</code></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>在<code>nginx</code>配置中，有些属性如果没有显示的进行设置，比如设置<code>gzip on;</code>时，没有设置<code>gzip_http_version</code>，<code>nginx</code>会启用默认值 <code>gzip_http_version:1.1;</code>，所以当你不想限制<code>http_version</code>的最低版本时，仅仅把<code>gzip_http_version</code>注释掉是不行的，你必须给其赋一个值才可以。类似这种问题不光在<code>nginx</code>配置中需要注意，在其它软件配置文件中也要注意</p>
]]></content>
      <categories>
        <category>网络通信</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ruby 字符和 ascii 码之间的转换</title>
    <url>/ruby-character-to-ascii/</url>
    <content><![CDATA[<h1 id="字符-转-ascii"><a href="#字符-转-ascii" class="headerlink" title="字符 转 ascii"></a>字符 转 ascii</h1><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token string">'a'</span><span class="token punctuation">.</span>ord <span class="token comment"># => 97</span>

<span class="token string">"a"</span><span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token comment">#=> 97 `c` 提取一个字符作为整数</span>

<span class="token string">"string"</span><span class="token punctuation">.</span>each_byte <span class="token keyword">do</span> <span class="token operator">|</span>c<span class="token operator">|</span>
    puts c
<span class="token keyword">end</span>

<span class="token string">'hello world'</span><span class="token punctuation">.</span>each_byte<span class="token punctuation">.</span>to_a
<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span>

<span class="token string">'hello world'</span><span class="token punctuation">.</span>bytes
<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="Ascii-转-字符"><a href="#Ascii-转-字符" class="headerlink" title="Ascii 转 字符"></a>Ascii 转 字符</h1><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token number">97.</span>chr <span class="token comment"># => "a"</span>

<span class="token string">'hello world'</span><span class="token punctuation">.</span>bytes <span class="token comment"># => [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]</span>
<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">&#123;</span><span class="token operator">|</span>m<span class="token operator">|</span>m<span class="token punctuation">.</span>chr<span class="token punctuation">&#125;</span>
<span class="token comment"># => ["h", "e", "l", "l", "o", " ", "w", "o", "r", "l", "d"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="字符转二进制"><a href="#字符转二进制" class="headerlink" title="字符转二进制"></a>字符转二进制</h1><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token string">"aa"</span><span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'b8B8'</span><span class="token punctuation">)</span>  <span class="token comment">#=> ["10000110", "01100001"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>B</code> 从每个字符中提取位（首先是最高有效位）</p>
<p><code>b</code> 从每个字符中提取位（首先是最低有效位）</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>safari 网站图标 favicon 不显示</title>
    <url>/safari-favicon-setting/</url>
    <content><![CDATA[<h1 id="favicon图标不显示"><a href="#favicon图标不显示" class="headerlink" title="favicon图标不显示"></a><code>favicon</code>图标不显示</h1><p>发现博客的<code>favicon</code>图标一直不能在<code>safari</code> 的标签栏上显示，只能显示在地址栏，经过一番研究后发现是Hexo 的 Next主题的设置不正确造成的</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">favicon</span><span class="token punctuation">:</span>
  <span class="token key atrule">small</span><span class="token punctuation">:</span> /favicon<span class="token punctuation">-</span>16x16.png
  <span class="token key atrule">medium</span><span class="token punctuation">:</span> /favicon<span class="token punctuation">-</span>32x32.png
  <span class="token key atrule">apple_touch_icon</span><span class="token punctuation">:</span> /apple<span class="token punctuation">-</span>touch<span class="token punctuation">-</span>icon.png

  <span class="token comment"># 不能把 safari_pinned_tab 注释掉，只能留空，表示不启用,</span>
  <span class="token comment"># 注释掉会默认使用 next 主题中的设置.</span>

  <span class="token comment"># 注意: &lt;link rel="mask-icon" href="logo.svg"> 会覆盖</span>
  <span class="token comment"># &lt;link rel="icon" href="favicon.png"> 导致safari favicon图标被替换为logo.svg</span>
  safari_pinned_tab<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>small</code>与<code>medium</code>会生成两个与<code>favicon</code>相关的设置，用来在地址栏与标签栏显示网站图标</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/png<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32x32<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/favicon-32x32.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/png<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16x16<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/favicon-16x16.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>safari_pinned_tab</code>会生成<code>&lt;link rel=&quot;mask-icon&quot; href=&quot;logo.svg&quot;&gt;</code>，它会覆盖标签栏上的<code>favicon</code>图标，由于在设置这个属性的时候，错误的使用了非<code>svg</code>文件(用的是png)导致了图标不能正确显示。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>设置正确的<code>svg</code>文件，或者就不设置<code>&lt;link rel=&quot;mask-icon&quot;&gt;</code>属性，只使用<code>&lt;link rel=&quot;icon&quot; &gt;</code>设置<code>favicon</code>图标即可。如果不设置<code>&lt;link rel=&quot;mask-icon&quot;&gt;</code>属性，需要在配置文件中把<code>safari_pinned_tab</code>的值留空，而不是不设置或注释掉，这样做会使用next 主题中的默认设置，造成<code>favicon</code>图标显示为Next官网的图标</p>
<h1 id="关于safari缓存图标的问题"><a href="#关于safari缓存图标的问题" class="headerlink" title="关于safari缓存图标的问题"></a>关于<code>safari</code>缓存图标的问题</h1><p><code>safari</code>会对图标按域名进行缓存，从而造成更新图标后不能马上更新显示的问题，需要对缓存的图标进行清理。</p>
<ul>
<li>首先要清理它的缓存：<code>setting</code>-&gt;<code>privacy</code>-&gt;<code>Manage Website Date</code>，搜索相关域名，删除即可。</li>
<li>磁盘缓存文件：<code>~/Library/Safari</code>目录下，删除<code>Template Icons</code>文件夹，如果不起作用，删除<code>Favicon Cache</code>，<code>Touch Icons Cache</code>文件夹</li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>safari</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Actions Workflows 部署 Hexo</title>
    <url>/github-actions-workflows-hexo/</url>
    <content><![CDATA[<h1 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h1><p>是Github 提供的免费可持续集成服务，在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。 可以发现、创建和共享操作以执行任何作业（包括 CI/CD），并将操作合并到完全自定义的工作流程中。</p>
<p>GitHub Actions 简单易用，在仓库根目录下建立<code>.github/workflows</code>文件夹，把workflows工作流文件(<code>YAML</code>)放到这个目录下，就可以使用Github Action服务了</p>
<h1 id="workflows-文件"><a href="#workflows-文件" class="headerlink" title="workflows 文件"></a>workflows 文件</h1><p>由多个job组合而成，其指定了持续集成要完成的工作，每个工作流文件代表着一个持续集成工程</p>
<ul>
<li>每个<code>workflow</code>由多个<code>job</code>组成，每个<code>job</code>就是你指定的任务</li>
<li>每个<code>job</code>由多个<code>step</code>组成，每个<code>step</code>代表任务的具体步骤</li>
<li>每个<code>step</code>由多个<code>action</code>组成，代表具体要执行的指令，<code>actoin</code> 是<code>workflows</code>中的最小单位</li>
</ul>
<p><img src="//img.gagahappy.cn/blog/2021/07/github-actions-workflows-hexo.jpg_b1" alt="GitHub Actions Workflows" title="GitHub Actions Workflows"></p>
<h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><p>GitHub提供了大量方便的工具，使你可以轻松的完成各种任务。比如克隆仓库并检出，向仓库提交内容，安装各种语言环境，同步文件等等，都有对应的工具，它们就是 Action，只需要调用它们就可以了，几乎不用写任何命令，你需要的在<a href="https://github.com/marketplace?type=actions">Action市场</a>几乎全部可以找到。如<code> actions/checkout</code>是用来checout仓库的，<code>actions</code>表示这个工具是官方的，如果是其它名称，则表示是第三方提供的</p>
<h1 id="Hexo-发布到-Github-Pages-及-Ailyun"><a href="#Hexo-发布到-Github-Pages-及-Ailyun" class="headerlink" title="Hexo 发布到  Github Pages  及  Ailyun"></a>Hexo 发布到  Github Pages  及  Ailyun</h1><p>没有使用 GitHub Actions 的发布流程</p>
<ol>
<li><code>push</code></li>
<li>生成静态页：Hexo或hugo，Jekyll等静态博客生成器</li>
<li><code>push</code>静态页，在 <code>github pages</code>上完成发布</li>
<li>登录远程服务器，拉取静态页，在自己的站点完成发布</li>
</ol>
<p>使用 GitHub Actions 的发布流程</p>
<ol>
<li><code>push</code></li>
</ol>
<p>后面的工作完全自动化完成</p>
<ul>
<li>你不需要在你的本机上安装Hexo等静态站点生成器运行环境</li>
<li>文章的Build的工作在GitHub 的 <code>work runner</code>中完成，不需要占用的你电脑的资源</li>
<li>在GitHub 上构建速度快，软硬件兼容性问题也少</li>
<li>可以随时随地的部署：比如你发布后发现有个错别字要改，那么你用手机登录Github，直接在页面上修改，提交后就会触发部署，甚至都不需要打开电脑，方便快捷。</li>
</ul>
<h2 id="建立SSH密钥对"><a href="#建立SSH密钥对" class="headerlink" title="建立SSH密钥对"></a>建立SSH密钥对</h2><p>博客涉及到三个仓库：</p>
<ul>
<li>Hexo.git，用来存放Hexo项目和文章</li>
<li>next.git博客主题</li>
<li>gagahappy.github.io 用来存放发布的HTML页，设置为 Github Pages</li>
</ul>
<p>为什么会用到密钥对</p>
<ul>
<li><p>Aliyun服务器：构建过程中要远程登录到Aliyun服务器，要用密钥进行身份验证，需要用到密钥对</p>
</li>
<li><p>Github Pages：Github的建议是把源文件即Hexo.git放到master分支，把gagahappy.github.io放到gh-pages分支。但Github Pages必须是公开仓库才可以发布，这样就让存放源文件的Hexo.git也可以被访问，这显然是不安全的，所以没有把这两个仓库放在一起，那么对gagahappy.github.io进行发布就需要使用密钥对，才能对仓库进行操作。如果你遵循了Github的建议，那这么在发布Github pages时就不用设置密钥对了。</p>
</li>
</ul>
<p>生成密钥对</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -b <span class="token number">4096</span> -C <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> config user.email<span class="token variable">)</span></span>"</span> -f gh-pages -N <span class="token string">""</span>
<span class="token comment"># You will get 2 files:</span>
<span class="token comment">#   gh-pages.pub (public key)</span>
<span class="token comment">#   gh-pages     (private key)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>把<code>gh-pages.pub</code>中的内容添加到远程服务器的<code>~/.ssh/authorized_keys</code>中或把文件上传到<code>~/.ssh/</code>目录，执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> gh-pages.pub <span class="token operator">>></span> authorized_keys
<span class="token function">chmod</span> <span class="token number">600</span> -R ~/.ssh <span class="token comment"># 设置~/ssh目录权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h2 id="设置-github-Secrets"><a href="#设置-github-Secrets" class="headerlink" title="设置 github Secrets"></a>设置 github Secrets</h2><p>Secrets 是用来存放敏感信息的，如数据库的密码，用户名，密钥，等信息，不会让这些信息在日志输出中暴露出来，会以星号(*)代替这些敏感信息。</p>
<p>在Hexo.git仓库的首页点击 <code>settings</code>，在左侧找到<code>Secrets</code>，点击右上<code>New repository secret </code>，<code>name</code>填写<code>ACTIONS_DEPLOY_KEY</code> ，<code>value</code>填写密钥<code>gh-pages</code>的内容， 点击<code>Add secret</code>，这样就创建了一个<code>secret</code>。之后可以用这个<code>secret</code>操作 gagahappy.github.io 仓库。</p>
<p>你还可以创建其它的<code>secret</code>，比如MySQL连接的密码，可以新建一个名称为<code>mysql_passwd</code>，内容为MySQL密码的<code>Secret</code>。更多信息可以查看官方 <a href="https://docs.github.com/en/actions/reference/encrypted-secrets">Secrets 帮助</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># secret 在日志中使用 * 号输出敏感信息</span>
SOURCE: public/
REMOTE_HOST: ***
REMOTE_USER: ***
TARGET: ***
SSH_PRIVATE_KEY: ***<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="设置-Deploy-keys"><a href="#设置-Deploy-keys" class="headerlink" title="设置 Deploy keys"></a>设置 Deploy keys</h2><p>打开<code>gagahappy.github.io</code>仓库，在仓库的首页点击 <code>settings</code>，在左侧找到<code>Deploy keys</code>，把<code>gh-pages.pub</code>的内容复制进去，勾选下面的<code>Allow write access</code>，点击<code>Add Key</code>，这样在之后的部署过程中，Hexo.git仓库所在的<code>runner</code>就可以通过<code>secrets.ACTIONS_DEPLOY_KEY</code>对其进行操作了。</p>
<h2 id="编写工作流文件"><a href="#编写工作流文件" class="headerlink" title="编写工作流文件"></a>编写工作流文件</h2><p>在Hexo.git项目根目录下建立<code>.github/wrokflows</code>文件夹，在这个文件夹下创建以<code>yml</code>结尾的文件<code>build.yml</code>。每当你<code>push</code>到github后，github会自动寻找仓库根目录下的<code>.github/wrokflows</code>中扩展名为<code>yml</code>的所文件，运行其中的指令，完成自动部署。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p .github/workflows
<span class="token function">touch</span> .github/workflows/build.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>需要持续集成完成的工作有</p>
<ol>
<li>Checkout <code>hexo.git</code>中的内容</li>
<li>Checkout <code>next.git</code>主题内容到 theme目录</li>
<li>安装 <code>node.js</code>环境</li>
<li>安装Hexo</li>
<li>使用Hexo生成静态页面</li>
<li>发布静态页面到 <code>gagahappy.github.io</code></li>
<li>同步静态页到Aliyun服务器</li>
</ol>
<p>把以上内容翻译为要执行的配置命令就是</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>master<span class="token punctuation">]</span> <span class="token comment"># 在master分支push时触发部署</span>
    <span class="token key atrule">paths-ignore</span><span class="token punctuation">:</span> <span class="token comment"># 以下文件的变更不触发部署</span>
      <span class="token punctuation">-</span> README.md
  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span>

<span class="token key atrule">env</span><span class="token punctuation">:</span> <span class="token comment"># 统一设置环境变量</span>
  <span class="token key atrule">GIT_USER</span><span class="token punctuation">:</span> git
  <span class="token key atrule">GIT_EMAIL</span><span class="token punctuation">:</span> email@example.com
  <span class="token key atrule">THEME_REPO</span><span class="token punctuation">:</span> git/next <span class="token comment"># 你使用的主题仓库地址</span>
  <span class="token key atrule">THEME_BRANCH</span><span class="token punctuation">:</span> master
  <span class="token key atrule">DEPLOY_REPO</span><span class="token punctuation">:</span> git/gagahappy.github.io <span class="token comment"># 你用来发布github pages的仓库地址</span>
  <span class="token key atrule">DEPLOY_BRANCH</span><span class="token punctuation">:</span> master

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build</span><span class="token punctuation">:</span> <span class="token comment"># job_id，其它job可以引用，比如两个job有先后顺序</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> Build Github Page And Deploy On Aliyun <span class="token comment"># job名称</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest <span class="token comment"># 构建使用的系统，支持 linux/mac/windows</span>
    <span class="token key atrule">timeout-minutes</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment"># job超时时间，超过后job会被停止运行</span>

    <span class="token key atrule">steps</span><span class="token punctuation">:</span> <span class="token comment"># 一个job由多个 step 组成，本博的由7个step组成</span>
    	<span class="token comment"># 1. Checkout hexo.git 中的内容</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout Hexo repo
      	<span class="token comment"># 检出项目，如果不指定名称，默认使用运行Github Action 的仓库，即hexo.git</span>
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2

    	<span class="token comment"># 2. Checkout next.git 主题内容到 theme目录</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout Theme repo
      	<span class="token comment"># actions/checkout 就是Acton工具，实现checkout项目，每个action也是一个git仓库</span>
      	<span class="token comment"># 可以直接通过 github.com/工具名称进行访问，即github.com/actions/checkout</span>
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">repository</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.THEME_REPO <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># 要checkout的仓库地址</span>
          <span class="token key atrule">ref</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.THEME_BRANCH <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
          <span class="token key atrule">path</span><span class="token punctuation">:</span> themes/next <span class="token comment"># 要checkout到的路径</span>

    	<span class="token comment"># 3. 安装 node.js 环境</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v2 <span class="token comment"># 使用actions/setup-node安装nodejs</span>
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>

    	<span class="token comment"># 4. 安装Heox</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Hexo
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span> <span class="token comment"># 运行command命令</span>
          npm install <span class="token punctuation">-</span>g hexo<span class="token punctuation">-</span>cli
          npm install

    	<span class="token comment"># 5. 使用Hexo生成静态页面</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Generate Blog
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          hexo generate</span>

    	<span class="token comment"># 6. 发布静态页面到 gagahappy.github.io</span>
			<span class="token comment"># 使用 peaceiris/actions-gh-pages 第三方Action工具，发布静态内容到 github pages</span>
			<span class="token comment"># 重要:</span>
			<span class="token comment"># 如果你的源码文件与Html文件在两个仓库，请在源码文件仓库设置</span>
			<span class="token comment"># secrets 的 ACTIONS_DEPLOY_KEY 值为密钥内容，</span>
			<span class="token comment"># 在html文件仓库即youname.github.io中设置 Deploy keys 的值设置为公钥内容，</span>
			<span class="token comment"># 在构建过程中会使用密钥对youname.github.io进行操作</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy Github Page
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> peaceiris/actions<span class="token punctuation">-</span>gh<span class="token punctuation">-</span>pages@v3
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token comment"># 在 hexo.git 上设置的私钥</span>
          <span class="token key atrule">deploy_key</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.ACTIONS_DEPLOY_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># ACTIONS_DEPLOY_KEY 不能修改</span>
          <span class="token key atrule">external_repository</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.DEPLOY_REPO <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># Hexo.git 的仓库地址</span>
          <span class="token key atrule">publish_branch</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.DEPLOY_BRANCH <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
          <span class="token key atrule">publish_dir</span><span class="token punctuation">:</span> ./public <span class="token comment"># 使用Hexo/hugo等生成静态页面的目录</span>
          <span class="token key atrule">user_name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.GIT_USER <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
          <span class="token key atrule">user_email</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.GIT_EMAIL <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>

    	<span class="token comment"># 7. 同步静态页到Aliyun服务器</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy Github Page on Aliyun
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> easingthemes/ssh<span class="token punctuation">-</span>deploy@main
        <span class="token key atrule">env</span><span class="token punctuation">:</span>
            <span class="token key atrule">SSH_PRIVATE_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.ACTIONS_DEPLOY_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
            <span class="token key atrule">ARGS</span><span class="token punctuation">:</span> <span class="token string">"-rltgoDzvO --delete"</span>
            <span class="token key atrule">SOURCE</span><span class="token punctuation">:</span> <span class="token string">"public/"</span> <span class="token comment"># 使用Hexo/hugo等生成静态页面的目录</span>
            <span class="token key atrule">REMOTE_HOST</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.REMOTE_HOST <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
            <span class="token key atrule">REMOTE_USER</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.REMOTE_USER <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
            <span class="token key atrule">TARGET</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.REMOTE_TARGET <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>可以点击仓库主页上的<code>Actions</code>，查看正在运行的<code>workflows</code>，里面有详细的日志信息</p>
<p><img src="//img.gagahappy.cn/blog/2021/07/github-actions-workflows-hexo-2.png_b1" alt="GitHub Actions Workflows" title="GitHub Actions Workflows"></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li>GitHub <a href="https://github.com/marketplace?type=actions">官方市场</a></li>
<li><a href="https://github.com/actions">https://github.com/actions</a></li>
<li>Action <a href="https://github.com/sdras/awesome-actions">awesome actions</a> 仓库</li>
<li><a href="https://help.github.com/en/articles/about-actions">https://help.github.com/en/articles/about-actions</a></li>
<li><a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions">https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions</a></li>
<li><a href="https://github.com/peaceiris/actions-gh-pages">https://github.com/peaceiris/actions-gh-pages</a></li>
<li><a href="https://docs.github.com/en/actions/reference/encrypted-secrets">https://docs.github.com/en/actions/reference/encrypted-secrets</a></li>
<li><a href="https://docs.github.com/cn/actions">https://docs.github.com/cn/actions</a></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>ci</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 基准测试 结果解读</title>
    <url>/golang-test-benchmark-result-introducing/</url>
    <content><![CDATA[<h1 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h1><p>是测量一个程序在固定工作负载下的性能，使用 <code>-bench</code> 标记可以对代码进行基准测试</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> test <span class="token operator">-</span>v <span class="token operator">-</span>bench<span class="token operator">=</span><span class="token punctuation">.</span> <span class="token operator">-</span>run<span class="token operator">=</span><span class="token operator">^</span>$ gott<span class="token operator">/</span>hello
goos<span class="token punctuation">:</span> darwin
goarch<span class="token punctuation">:</span> amd64
pkg<span class="token punctuation">:</span> gott<span class="token operator">/</span>hello
BenchmarkHello<span class="token operator">-</span><span class="token number">4</span>         <span class="token number">4964053</span>               <span class="token number">228.5</span> ns<span class="token operator">/</span>op
PASS
ok      gott<span class="token operator">/</span>hello      <span class="token number">2.386</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p><code>.</code>表示执行代码包中所有的基准测试用例(前缀为<code>Benchmark</code>的方法)，由于功能测试也会被运行，但同时运行功能测试会影响性能测试的结果，通过加入<code>-run=^$</code>，来禁止功能测试与性能测试一起执行。<code>^$</code>意味着：只执行名称为空的功能测试函数，即不执行任何测试函数。</p>
</li>
<li><p>指定运行某个基准测试</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> test <span class="token operator">-</span>v <span class="token operator">-</span>bench<span class="token operator">=</span>BenchmarkHello gott<span class="token operator">/</span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>功能测试也会一起运行。。。。。。</p>
</li>
</ul>
<h1 id="b-N值的确定"><a href="#b-N值的确定" class="headerlink" title="b.N值的确定"></a><code>b.N</code>值的确定</h1><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BenchmarkHello</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"Max"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>当测试开始时，<code>b.N</code>的值被设置为1，执行后如果没有超过默认执行时间上限(默认为1秒)，则加大<code>b.N</code>的值，按某种规则一直递增，直到执行时间等于或超过上限，那么就用这一次的<code>b.N</code>的值，做为测试的最终结果</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">BenchmarkHello<span class="token operator">-</span><span class="token number">4</span>         <span class="token number">4964053</span>               <span class="token number">228.5</span> ns<span class="token operator">/</span>op
PASS
ok      gott<span class="token operator">/</span>hello      <span class="token number">2.386</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>BenchmarkHello-4</code>表示执行 BenchmarkHello 时，所用的最大P的数量为4</li>
<li><code>4964053</code>:  表示<code>hello()</code>方法在达到这个执行次数时，等于或超过了1秒</li>
<li><code>228.5 ns/op</code>： 表示每次执行<code>hello()</code>所消耗的平均执行时间</li>
<li><code>2.386s</code>：表示测试总共用时</li>
</ul>
<h1 id="测试总时间的计算"><a href="#测试总时间的计算" class="headerlink" title="测试总时间的计算"></a>测试总时间的计算</h1><p>既然<code>4964053</code>表示1秒或大于1秒时执行的次数，那么测试总时间用时却是<code>2.386s</code>，超出了不少，这是为什么呢</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BenchmarkHello</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"Max"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	b<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"NNNNN:"</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>N<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在测试中加入<code>b.Log(&quot;NNNNN:&quot;, b.N)</code>，再执行基准测试，并加入<code>-v</code>，打印测试中的日志</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v -bench<span class="token operator">=</span>. -run<span class="token operator">=</span>^$ gott/hello
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello
    hello_test.go:15: hello Max
--- PASS: TestHello <span class="token punctuation">(</span><span class="token number">0</span>.00s<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestPrint
    hello_test.go:19: just Print
--- PASS: TestPrint <span class="token punctuation">(</span><span class="token number">0</span>.00s<span class="token punctuation">)</span>
goos: darwin
goarch: amd64
pkg: gott/hello
BenchmarkHello
    hello_test.go:26: NNNNN: <span class="token number">1</span>
    hello_test.go:26: NNNNN: <span class="token number">100</span>
    hello_test.go:26: NNNNN: <span class="token number">10000</span>
    hello_test.go:26: NNNNN: <span class="token number">1000000</span>
    hello_test.go:26: NNNNN: <span class="token number">3541896</span>
    hello_test.go:26: NNNNN: <span class="token number">4832275</span>
BenchmarkHello-4         <span class="token number">4832275</span>               <span class="token number">236.8</span> ns/op
PASS
ok      gott/hello      <span class="token number">2</span>.395s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到<code>b.Log(&quot;NNNNN:&quot;, b.N)</code>被执行了6次，这证明了之前提到的，测试会对<code>b.N</code>依次递增，直到执行时间等于或超过上限。在对<code>BenchmarkHello()</code>运行基准测试时，N值依次按<code>1,100,10000,1000000,3541896,4832275</code>递增，直到执行次数为<code>4832275</code>时，执行时间等于或超过了上限。</p>
<p>同时也说明<code>BenchmarkHello()</code>一共被调用了6次，每次运行<code>BenchmarkHello()</code>都要消耗一定的时间，所以测试总耗时为这6次调用时间之和，<code>2.395s</code>，超过了1秒</p>
<h1 id="平均执行时间的计算"><a href="#平均执行时间的计算" class="headerlink" title="平均执行时间的计算"></a>平均执行时间的计算</h1><p>应该用，运行<code>4832275</code>时所消耗的时间 <code>t</code>，<code>t / 4832275 = 236.8 ns/op</code></p>
<ul>
<li>如果用 测试总共用时 / 最多可以执行的次数  则不等于 平均执行时间，即 <code>2.386 * (1000 ** 3) / 4832275 = 493.7 </code> 大于测试结果中的<code>236.8 ns/op</code>。</li>
<li>如果用 <code>1 秒 / 4832275 = 206 ns</code> ，与<code>236.8 ns/op</code>并不是很接近</li>
<li>如果把尝试过程中的运行次数也加入进来<code>total = 1 + 100 + 10000 + 1000000 + 3541896 + 4832275</code>，即<code>2.386 * (1000 ** 3) / 9384272 = 254.25</code>与<code>236.8 ns/op</code>接近</li>
<li>反推运行时间：<code>4832275 * 236.8 ns / 1000 ** 3 = 1.14s</code> ，测试结果使用了运行时间超过1秒上限时的数值</li>
</ul>
<p>问题：是否测试总时间一定会超过1秒？答：因为要找到最大可执行次数，而在这之前肯定要进行多次尝试，所以测试总时间应该总是会超过1秒的。</p>
<h1 id="benchtime-标记"><a href="#benchtime-标记" class="headerlink" title="benchtime 标记"></a>benchtime 标记</h1><p>可以通过<code> -benchtime</code>标记修改默认时间上限，比如改为3秒</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v -bench<span class="token operator">=</span>. -benchtime<span class="token operator">=</span>3s -run<span class="token operator">=</span>^$ gott/hello
goos: darwin
goarch: amd64
pkg: gott/hello
BenchmarkHello
    hello_test.go:31: NNNNN: <span class="token number">1</span>
    hello_test.go:32: /Users/ga/m/opt/go/go_root
    hello_test.go:31: NNNNN: <span class="token number">100</span>
    hello_test.go:32: /Users/ga/m/opt/go/go_root
    hello_test.go:31: NNNNN: <span class="token number">10000</span>
    hello_test.go:32: /Users/ga/m/opt/go/go_root
    hello_test.go:31: NNNNN: <span class="token number">1000000</span>
    hello_test.go:32: /Users/ga/m/opt/go/go_root
    hello_test.go:31: NNNNN: <span class="token number">15927812</span>
    hello_test.go:32: /Users/ga/m/opt/go/go_root
BenchmarkHello-4   	<span class="token number">15927812</span>	       <span class="token number">223.4</span> ns/op
PASS
ok  	gott/hello	<span class="token number">3</span>.802s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>还可以设置具体的探索次数最大值，格式为<code>-benchtime=Nx</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> gott/hello -run<span class="token operator">=</span>^$ -bench<span class="token operator">=</span>BenchmarkHello -benchtime<span class="token operator">=</span>50x
goos: darwin
goarch: amd64
pkg: gott/hello
BenchmarkHello-4              <span class="token number">50</span>              <span class="token number">2183</span> ns/op
--- BENCH: BenchmarkHello-4
    hello_test.go:35: NNNNN: <span class="token number">1</span>
    hello_test.go:36: /Users/ga/m/opt/go/go_root
    hello_test.go:35: NNNNN: <span class="token number">50</span>
    hello_test.go:36: /Users/ga/m/opt/go/go_root
PASS
ok      gott/hello      <span class="token number">0</span>.011s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>b.N</code>的值被设置为50，函数运行了50次</p>
<h1 id="benchmem-标记"><a href="#benchmem-标记" class="headerlink" title="benchmem 标记"></a>benchmem 标记</h1><p>可以通过<code>-benchmem</code>标记查看内存使用信息</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> gott/hello -run<span class="token operator">=</span>^$ -bench<span class="token operator">=</span>BenchmarkHello -benchmem
goos: darwin
goarch: amd64
pkg: gott/hello
BenchmarkHello-4         <span class="token number">5137456</span>               <span class="token number">223.1</span> ns/op            <span class="token number">32</span> B/op          <span class="token number">2</span> allocs/op
--- BENCH: BenchmarkHello-4
    hello_test.go:35: NNNNN: <span class="token number">1</span>
    hello_test.go:36: /Users/ga/m/opt/go/go_root
    hello_test.go:35: NNNNN: <span class="token number">100</span>
    hello_test.go:36: /Users/ga/m/opt/go/go_root
    hello_test.go:35: NNNNN: <span class="token number">10000</span>
    hello_test.go:36: /Users/ga/m/opt/go/go_root
    hello_test.go:35: NNNNN: <span class="token number">1000000</span>
    hello_test.go:36: /Users/ga/m/opt/go/go_root
    hello_test.go:35: NNNNN: <span class="token number">5137456</span>
    hello_test.go:36: /Users/ga/m/opt/go/go_root
        <span class="token punctuation">..</span>. <span class="token punctuation">[</span>output truncated<span class="token punctuation">]</span>
PASS
ok      gott/hello      <span class="token number">1</span>.399s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>32 B/op</code>：平均每次迭代内存分配的字节数</li>
<li><code>2 allocs/op</code>：平均每次迭代内存分配的次数</li>
</ul>
<p>平均每次迭代计算的依据应该使用的是 <code>b.N=5137456</code>迭代次数</p>
<h1 id="基准测试的用途"><a href="#基准测试的用途" class="headerlink" title="基准测试的用途"></a>基准测试的用途</h1><p>一般用于对比两个不同的操作所消耗的时间，如</p>
<ul>
<li><p>渐近增长函数的运行时间</p>
<p>一个函数需要1ms处理1,000个元素，处理10000或1百万将需要多少时间呢</p>
</li>
<li><p>I/O缓存该设置为多大</p>
<p>基准测试可以帮助我们选择在性能达标情况下所需的最小内存</p>
</li>
<li><p>确定哪种算法更好</p>
</li>
</ul>
<p>比较型的基准测试代码</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">benchmark</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">,</span> size <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">Benchmark10</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span> <span class="token function">benchmark</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">Benchmark100</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span> <span class="token function">benchmark</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">Benchmark1000</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span> <span class="token function">benchmark</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过参数<code>size</code>来控制输入的大小，而不是直接修改<code>b.N</code>的值，除非你只是想知道一个固定大小的迭代的耗时，否则基准测试的结果将毫无意义</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 性能测试函数中的计时器</title>
    <url>/golang-test-benchmark-timer/</url>
    <content><![CDATA[<h1 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h1><p>用来记录性能测试函数在每次运行时消耗的时间，同时它也记录了此次运行对内存分配的字节数和分配的次数。与之相关的有三个方法<code>StartTimer</code>、<code>StopTimer</code>和<code>ResetTimer</code></p>
<p>运行go test 时就用到了计时器，命令会启用这个函数的计时器，当函数执行完成，停止计时器，记录下此次的运行时间，然后与默认执行时间上限(默认为1秒)做比较，如果没有超过，则增大<code>b.N</code>的值，再次执行该函数，如此反复，直到函数的运行时间大于或等于执行时间上限，从而得到<code>b.N</code>的值，即函数的最大执行次数及对应的时间，从而得出最终的测试结果</p>
<p>通过对 StartTimer、StopTimer的调用，我们可以在测试中去除那些本不应该计入测试时间的代码的执行时间，比如一些测试前的准备代码</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BenchmarkGetPrimes</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 模拟某个耗时但与被测程序关系不大的操作</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">)</span>
	max <span class="token operator">:=</span> <span class="token number">10000</span>
	b<span class="token punctuation">.</span><span class="token function">StartTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token function">GetPrimes</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>time.Sleep</code>用来模拟得到<code>max</code>的值所要进行的耗时操作，而我们要测试的是<code>GetPrimes()</code>的性能，不应计入计算<code>max</code>值所用的时间，所以要把开始时间设置在得到<code>max</code>之后。</p>
<p>通过 <code>b.StopTimer()</code> 与 <code>b.StartTimer()</code>的配合使用，就可以去除任何一段代码的执行时间，<code>b.ResetTimer()</code>是去除它之前代码的执行时间。通过对计时器的调用，可以让测试函数的执行时间更加准确。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 测试惯例</title>
    <url>/golang-test-convention/</url>
    <content><![CDATA[<h1 id="运行某个包的测试"><a href="#运行某个包的测试" class="headerlink" title="运行某个包的测试"></a>运行某个包的测试</h1><p>不指定包名：go test 命令如果没有参数指定包，默认使用当前目录对应的包运行测试，且测试结果不会被缓存。第二次运行测试，测试结果中没有包含(cached)标示，说明测试结果没有被缓存，每次执行都会重新构建测试</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># gott/hello 当前目录为包名为 hello的目录</span>
go <span class="token builtin class-name">test</span>
PASS
ok  	gott/hello	<span class="token number">1</span>.025s

go <span class="token builtin class-name">test</span>
ok  	gott/hello	<span class="token number">1</span>.025s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>指定包名：测试结果会被缓存</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> gott/hello
ok  	gott/hello	<span class="token punctuation">(</span>cached<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h1 id="运行所有测试"><a href="#运行所有测试" class="headerlink" title="运行所有测试"></a>运行所有测试</h1><p>使用<code>go test ./...</code>标记运行所有包的测试，测试结果会被缓存</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> ./<span class="token punctuation">..</span>.
ok  	gott/hello	<span class="token number">1</span>.026s
ok  	gott/hi	<span class="token number">0</span>.040s
ok  	gott/pprint	<span class="token number">0</span>.017s
ok  	gott/prime	<span class="token number">0</span>.014s

go <span class="token builtin class-name">test</span> ./<span class="token punctuation">..</span>.
ok  	gott/hello	<span class="token punctuation">(</span>cached<span class="token punctuation">)</span>
ok  	gott/hi	<span class="token punctuation">(</span>cached<span class="token punctuation">)</span>
ok  	gott/pprint	<span class="token punctuation">(</span>cached<span class="token punctuation">)</span>
ok  	gott/prime	<span class="token punctuation">(</span>cached<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="有效的记录测试失败信息"><a href="#有效的记录测试失败信息" class="headerlink" title="有效的记录测试失败信息"></a>有效的记录测试失败信息</h1><p>测试失败的信息一般的形式是“f(x) = y, want z”，其中f(x)解释了失败的操作和对应的输入，y是实际的运行结果，z是期望的正确的结果。比起那些失败就打印满屏的堆栈信息的错误日志，这种记录格式使得测试人员很容易定位到问题所在，甚至都不需要去看源码文件。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">got <span class="token operator">:=</span> <span class="token function">sum</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span>
<span class="token keyword">if</span> got <span class="token operator">!=</span> want <span class="token punctuation">&#123;</span>
	t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"sum(%d, %d) = %d, want %d"</span><span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> got<span class="token punctuation">,</span> want<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="随机测试如何预判结果"><a href="#随机测试如何预判结果" class="headerlink" title="随机测试如何预判结果"></a>随机测试如何预判结果</h1><p>一种方法是编写另一个对照函数，使用简单和清晰的算法，虽然效率较低但是行为和要测试的函数是一致的，然后针对相同的随机输入检查两者的输出结果。</p>
<p>第二种是生成的随机输入的数据遵循特定的模式，这样我们就可以知道期望的输出的模式。比如基于随机种子生成需要的大量数据，测试日志中不用去记录这些大量的数据，只需要记录这个随机种子即可，之后可以根据这个种子重现失败的测试用例，查找代码问题所在</p>
<h1 id="测试中的异常"><a href="#测试中的异常" class="headerlink" title="测试中的异常"></a>测试中的异常</h1><p>在测试代码中不要调用 <code>log.Fatal</code> 或 <code>os.Exit</code> ，调用这类函数会导致整个测试提前退出，后面的测试都将无法运行。调用这些函数的特权应该放在 <code>main</code> 函数中。如果真的有意外发生导致测试过程中发生 <code>panic</code> 异常，那么在测试中应该尝试用 <code>recover</code> 捕获异常，并记录下来，然后将当前测试当作失败处理(即调用<code>t.Effor/t.Fail/t.FailNow之类的方法</code>)。</p>
<p>在运行测试的时候，应该确保所有测试都得到运行，这样当测试运行结束后，就可以得到所有失败的测试用例的信息，而不是在某个测试失败后，就停止运行其后面的测试。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestLogFatal</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"Test encounter a fatal"</span><span class="token punctuation">)</span>
	<span class="token comment">// os.Exit(2)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestPrint</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"just Print"</span><span class="token punctuation">)</span>
	t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"GOROOT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于调用了<code>log.Fatal</code>或<code>os.Exit</code>，在<code>TestLogFatal()</code>后面的测试用例都不会被运行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v  gott/hello
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestLogFatal
<span class="token number">2021</span>/07/24 <span class="token number">17</span>:34:02 Test encounter a fatal
FAIL    gott/hello      <span class="token number">0</span>.007s
FAIL
<span class="token comment"># 没有打印 TestPrint()的测试日志</span>

<span class="token comment"># 把 TestPrint()放到 TestLogFatal()的前面</span>
 go <span class="token builtin class-name">test</span> -v  gott/hello
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestPrint
    hello_test.go:24: just Print
    hello_test.go:25: /Users/ga/m/opt/go/go_root
--- PASS: TestPrint <span class="token punctuation">(</span><span class="token number">0</span>.00s<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestLogFatal
<span class="token number">2021</span>/07/24 <span class="token number">17</span>:37:04 Test encounter a fatal
FAIL    gott/hello      <span class="token number">0</span>.013s
FAIL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>TestPrint 可以运行，但 TestLogFatal 之后的测试用例都不会得到运行，在调用 log.Fatal 函数后，整个测试程序就退出了</p>
<h1 id="mock-测试中的敏感对象"><a href="#mock-测试中的敏感对象" class="headerlink" title="mock 测试中的敏感对象"></a>mock 测试中的敏感对象</h1><ul>
<li><p>对外部环境的依赖</p>
<p>数据库的连接，第三方接口的调用</p>
</li>
<li><p>导致生产代码产生一些调试信息的钩子函数</p>
</li>
<li><p>诱导生产代码进入某些重要状态的改变</p>
<p>超时、错误，甚至是一些刻意制造的并发行为等因素</p>
</li>
</ul>
<p>应该对以上这些对象进行仿造(mock)，从而得到一个纯净的测试环境。有一个需要注意的地方，如果在某个测试用例中mock了某些对象，在这个测试用例运行完成后，要对这些mock的对象进行还原，以避免影响其它测试用例。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestCheckQuotaNotifiesUser</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Save and restore original notifyUser.</span>
  	<span class="token comment">// 保存 及 恢复 mock的原始对象</span>
    saved <span class="token operator">:=</span> notifyUser
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> notifyUser <span class="token operator">=</span> saved <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// Install the test's fake notifyUser.</span>
    <span class="token keyword">var</span> notifiedUser<span class="token punctuation">,</span> notifiedMsg <span class="token builtin">string</span>
    notifyUser <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        notifiedUser<span class="token punctuation">,</span> notifiedMsg <span class="token operator">=</span> user<span class="token punctuation">,</span> msg
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// ...rest of test...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>先把要mock的对象保存起来，等测试完成后，再对其进行恢复，可以使用<code>defer</code>语句来延后执行处理恢复的代码</p>
<h1 id="避免脆弱的测试"><a href="#避免脆弱的测试" class="headerlink" title="避免脆弱的测试"></a>避免脆弱的测试</h1><ul>
<li><p>一个好的测试不应该在程序仅仅只是做了微小变化就失败</p>
</li>
<li><p>一个好的测试不应该在遇到一点小错误时就立刻退出测试，它应该尝试报告更多的相关的错误信息，因为我们可能从多个失败测试的模式中发现错误产生的规律</p>
</li>
<li><p>一个好的测试的关键是首先实现你期望的具体行为，然后才是考虑简化测试代码、避免重复。如果直接从抽象、通用的测试库着手，很难取得良好结果。</p>
</li>
<li><p>保持测试代码的简洁和内部结构的稳定，特别是对断言部分要有所选择，比如不要对字符串进行全字匹配，而是针对那些在项目的发展中是比较稳定不变的子串</p>
</li>
<li><p>测试时涉及到对全局变量产生修改的那些测试，要以串行的方式运行，不能并行运行</p>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 test 测试工具的标记 flag</title>
    <url>/golang-test-flag-cpu-count-parallel/</url>
    <content><![CDATA[<h1 id="cpu-标记"><a href="#cpu-标记" class="headerlink" title="cpu 标记"></a>cpu 标记</h1><p>用来设置运行时，P的最大数量，即<code>GOMAXPROCS</code>的值。可以设置一组值，在运行测试时，P被设置为不同的值分别运行测试函数。</p>
<p>最大P数量代表着 go 运行时系统同时运行goroutine的能力，可以被视为最大逻辑CPU的数量，在默认情况下，最大 P 数量就等于当前计算机 CPU 核心的实际数量，最大P可以大于或小于实际CPU的核心数量。</p>
<p>通过设置<code>-cpu</code>的值，就可以来模拟程序在不同CPU数量下的表现。设置<code>-cpu=2,4,8</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -cpu<span class="token operator">=</span><span class="token number">2,4</span>,8 -bench<span class="token operator">=</span>. gott/hello
goos: darwin
goarch: amd64
pkg: gott/hello
BenchmarkHello-2         <span class="token number">5081475</span>               <span class="token number">228.6</span> ns/op
BenchmarkHello-4         <span class="token number">5190867</span>               <span class="token number">215.8</span> ns/op
BenchmarkHello-8         <span class="token number">5256798</span>               <span class="token number">212.6</span> ns/op
PASS
ok      gott/hello      <span class="token number">4</span>.129s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>性能测试函数<code>BenchmarkHello</code>被执行了3次，最大P数量分别为<code>2,4,8</code></p>
<p>如果没有指定<code>-cpu</code>参数，测试运行时使用默认的最大P的数量，这个数量就等于当前CPU实际的核心数(比如你的CPU是4核，那么这个数量就是4)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -bench<span class="token operator">=</span>.  gott/hello
goos: darwin
goarch: amd64
pkg: gott/hello
BenchmarkHello-4         <span class="token number">4670545</span>               <span class="token number">234.7</span> ns/op
PASS
ok      gott/hello      <span class="token number">1</span>.381s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>BenchmarkHello-4 </code>表明默认P的值为4，即cpu是4核</p>
<h1 id="count-标记"><a href="#count-标记" class="headerlink" title="count 标记"></a>count 标记</h1><p>设置重复执行测试函数的次数</p>
<p>性能函数总的执行次数=<code>-cpu</code>标记的值中正整数的个数 x <code>-count</code>标记的值 x 探索式执行中测试函数的实际执行次数=2 * 2 * 5 =20</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -count<span class="token operator">=</span><span class="token number">2</span> -bench<span class="token operator">=</span>. -cpu<span class="token operator">=</span><span class="token number">2,4</span>  gott/hello
goos: darwin
goarch: amd64
pkg: gott/hello
BenchmarkHello-2         <span class="token number">5184015</span>               <span class="token number">224.1</span> ns/op
--- BENCH: BenchmarkHello-2
    hello_test.go:30: NNNNN: <span class="token number">1</span>
    hello_test.go:30: NNNNN: <span class="token number">100</span>
    hello_test.go:30: NNNNN: <span class="token number">10000</span>
    hello_test.go:30: NNNNN: <span class="token number">1000000</span>
    hello_test.go:30: NNNNN: <span class="token number">5184015</span>
BenchmarkHello-2         <span class="token number">5676196</span>               <span class="token number">214.5</span> ns/op
--- BENCH: BenchmarkHello-2
    hello_test.go:30: NNNNN: <span class="token number">1</span>
    hello_test.go:30: NNNNN: <span class="token number">100</span>
    hello_test.go:30: NNNNN: <span class="token number">10000</span>
    hello_test.go:30: NNNNN: <span class="token number">1000000</span>
    hello_test.go:30: NNNNN: <span class="token number">4618954</span>
    hello_test.go:30: NNNNN: <span class="token number">5676196</span>
BenchmarkHello-4         <span class="token number">5304111</span>               <span class="token number">213.8</span> ns/op
--- BENCH: BenchmarkHello-4
    hello_test.go:30: NNNNN: <span class="token number">1</span>
    hello_test.go:30: NNNNN: <span class="token number">100</span>
    hello_test.go:30: NNNNN: <span class="token number">10000</span>
    hello_test.go:30: NNNNN: <span class="token number">1000000</span>
    hello_test.go:30: NNNNN: <span class="token number">5304111</span>
BenchmarkHello-4         <span class="token number">5286376</span>               <span class="token number">212.4</span> ns/op
--- BENCH: BenchmarkHello-4
    hello_test.go:30: NNNNN: <span class="token number">1</span>
    hello_test.go:30: NNNNN: <span class="token number">100</span>
    hello_test.go:30: NNNNN: <span class="token number">10000</span>
    hello_test.go:30: NNNNN: <span class="token number">1000000</span>
    hello_test.go:30: NNNNN: <span class="token number">5286376</span>
PASS
ok      gott/hello      <span class="token number">6</span>.601s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>功能函数总的执行次数=<code>-cpu</code>标记的值中正整数的个数 x <code>-count</code>标记的值=3 x 2 = 6</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v -count<span class="token operator">=</span><span class="token number">2</span>  -cpu<span class="token operator">=</span><span class="token number">2,4</span>,8  gott/hello
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello
    hello_test.go:17: number of runtime.GOMAXPROCS: <span class="token number">2</span>
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello
    hello_test.go:17: number of runtime.GOMAXPROCS: <span class="token number">2</span>
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello
    hello_test.go:17: number of runtime.GOMAXPROCS: <span class="token number">4</span>
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello
    hello_test.go:17: number of runtime.GOMAXPROCS: <span class="token number">4</span>
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello
    hello_test.go:17: number of runtime.GOMAXPROCS: <span class="token number">8</span>
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello
    hello_test.go:17: number of runtime.GOMAXPROCS: <span class="token number">8</span>
ok      gott/hello      <span class="token number">0</span>.009s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于功能测试，并不需要重复的执行多次，只需要执行一次即可，所以可以把<code>-cpu</code>的数值设置为1，<code>-count</code>的值不用设置，使用默认值为1就可以。功能测试关注的重点是验证逻辑是否正确，而不是程序的性能</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v   -cpu<span class="token operator">=</span><span class="token number">1</span> gott/hello
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello
    hello_test.go:17: number of runtime.GOMAXPROCS: <span class="token number">1</span>
--- PASS: TestHello <span class="token punctuation">(</span><span class="token number">0</span>.00s<span class="token punctuation">)</span>
PASS
ok      gott/hello      <span class="token number">0</span>.008s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="Parallel-标记"><a href="#Parallel-标记" class="headerlink" title="Parallel 标记"></a>Parallel 标记</h1><p><code>-parallel</code>标记可以指定同时运行测试用例的最大并发执行数，但仅适用于单个二进制测试文件，通过修改<code>GOMAXPROCS</code>的值实现，该标记的默认值是测试运行时的最大 P 数量。</p>
<p>可以通过在测试函数中添加<code>t.Parallel()</code>调用，以同时运行多个功能测试。默认情况下 go test 在运行测试时，为了加快测试速度，package 是被并行运行的，但每个包中的功能测试用例是被串行执行的。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestParallelPrintHello</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	t<span class="token punctuation">.</span><span class="token function">Parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
		t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"==========Hello=========="</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestParallelPrintWorld</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	t<span class="token punctuation">.</span><span class="token function">Parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"number of runtime.GOMAXPROCS:"</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
		t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"==========World=========="</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>使用<code>t.Parallel()</code>指定需要并行执行的测试，在测试结果中可以看到TestParallelPrintWorld与TestParallelPrintHello交替输出，说明这两个测试函数是并行执行的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v -parallel<span class="token operator">=</span><span class="token number">8</span> gott/hello
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestParallelPrintHello
<span class="token operator">==</span><span class="token operator">=</span> PAUSE TestParallelPrintHello
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestParallelPrintWorld
<span class="token operator">==</span><span class="token operator">=</span> PAUSE TestParallelPrintWorld
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld
    hello_test.go:43: number of runtime.GOMAXPROCS: <span class="token number">4</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello
    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld
    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello
    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld
    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello
    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld
    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello
    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
--- PASS: TestParallelPrintWorld <span class="token punctuation">(</span><span class="token number">1</span>.02s<span class="token punctuation">)</span>
--- PASS: TestParallelPrintHello <span class="token punctuation">(</span><span class="token number">1</span>.02s<span class="token punctuation">)</span>
PASS
ok      gott/hello      <span class="token number">1</span>.026s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>测试结果中<code>runtime.GOMAXPROCS: 4  </code>的值为4，并不是指定的<code>8</code>，说明<code>-parallel</code>标记并没有生成，因为测试运行的不是二进制文件，此时，即使不指定<code>-parallel</code>也是可以的，如果想让更多的测试用例同时运行，可以在运行<code>go test</code>时，指定<code>-p</code>参数，运行更多的P，来同时执行更多的测试用例，比如设置p的值为4，让同时并行执行的最大并发数为4</li>
<li>使用<code>t.Parallel()</code>后，输出的信息多了<code>PAUSE</code>和<code>CONT</code>字段</li>
</ul>
<p>如果加入<code>-count=2</code>标记，对于测试用例来说，此时的并发不会是2个count之间的并发，这两个count也是串行执行的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v -count<span class="token operator">=</span><span class="token number">2</span>  gott/hello
<span class="token comment"># 这里是第一遍count</span>
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestParallelPrintHello
<span class="token operator">==</span><span class="token operator">=</span> PAUSE TestParallelPrintHello
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestParallelPrintWorld
<span class="token operator">==</span><span class="token operator">=</span> PAUSE TestParallelPrintWorld
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld
    hello_test.go:43: number of runtime.GOMAXPROCS: <span class="token number">4</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello
    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld
    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello
    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld
    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello
    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld
    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello
    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld
    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
--- PASS: TestParallelPrintWorld <span class="token punctuation">(</span><span class="token number">1</span>.02s<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello
    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
--- PASS: TestParallelPrintHello <span class="token punctuation">(</span><span class="token number">1</span>.02s<span class="token punctuation">)</span>

<span class="token comment"># 这里是第二遍count</span>
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestParallelPrintHello
<span class="token operator">==</span><span class="token operator">=</span> PAUSE TestParallelPrintHello
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestParallelPrintWorld
<span class="token operator">==</span><span class="token operator">=</span> PAUSE TestParallelPrintWorld
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld
    hello_test.go:43: number of runtime.GOMAXPROCS: <span class="token number">4</span>
    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello
    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld
    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello
    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld
    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello
    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
--- PASS: TestParallelPrintWorld <span class="token punctuation">(</span><span class="token number">1</span>.01s<span class="token punctuation">)</span>
--- PASS: TestParallelPrintHello <span class="token punctuation">(</span><span class="token number">1</span>.01s<span class="token punctuation">)</span>
PASS
ok      gott/hello      <span class="token number">2</span>.036s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h1 id="源码文件"><a href="#源码文件" class="headerlink" title="源码文件"></a>源码文件</h1><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// hello.go</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"max"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span><span class="token string">"hello "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// hello_test.go</span>
<span class="token keyword">func</span> <span class="token function">TestHello</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	name <span class="token operator">:=</span> <span class="token string">"Max"</span>
	expected <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"hello %s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
	greeting <span class="token operator">:=</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
	<span class="token keyword">if</span> greeting <span class="token operator">!=</span> expected <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"hello(%s) = %s, expected = %s"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> greeting<span class="token punctuation">,</span> expected<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span>
	t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"number of runtime.GOMAXPROCS:"</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestPrint</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"just Print"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkHello</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"Max"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	b<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"NNNNN:"</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>N<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestParallelPrintHello</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	t<span class="token punctuation">.</span><span class="token function">Parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
		t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"==========Hello=========="</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestParallelPrintWorld</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	t<span class="token punctuation">.</span><span class="token function">Parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"number of runtime.GOMAXPROCS:"</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
		t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"==========World=========="</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>可以通过运行<code>runtime.GOMAXPROCS(0)</code>获得运行时的最大P的数量</li>
<li>在功能测试中，无法避免依赖一些外部环境，比如数据库的连接，第三方接口的调用，应该对这些外部环境进行仿造(mock)，从而得到一个纯净的测试环境</li>
<li><code>go help testflag  </code>查看 flag 帮助文件</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 测试日志打印</title>
    <url>/golang-test-log-print/</url>
    <content><![CDATA[<h1 id="缓存目录"><a href="#缓存目录" class="headerlink" title="缓存目录"></a>缓存目录</h1><p>Go 总是会缓存程序构建的结果，以便在将来使用(可以加速构建速度)。当有任何变动时，缓存就会失效，构建过程会真正的被执行。被缓存的构建结果保存在<code>go env GOCACHE</code>目录中，为了防止目录中的数据越来越多，go会自动删除不经常使用的缓存文件。可以手动清除缓存结果，执行<code>go clean -cache</code>即可。</p>
<p><code>go test</code>命令也会把测试成功的结果缓存起来，如果测试代码和源代码没有改动，再次运行测试时，直接使用缓存的结果。当源码和测试代码有改动时，缓存结果就会失效，测试会被真正的运行。运行<code>go clean -testcache</code>可以删除测试的缓存结果，但不会删除构建结果缓存</p>
<h1 id="测试日志打印"><a href="#测试日志打印" class="headerlink" title="测试日志打印"></a>测试日志打印</h1><p>可以使用<code>t.Log</code>与<code>t.Logf</code>方法打印测试日志，这两个方法会在测试失败时，进行打印，在测试成功的时候，是不进行打印的。如果想在测试结果中看到所有的日志，可以使用<code>-v</code>参数</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestIntroduce</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	intro <span class="token operator">:=</span> <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	expected <span class="token operator">:=</span> <span class="token string">"Welcome to my Golang column."</span>
	<span class="token keyword">if</span> intro <span class="token operator">!=</span> expected <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"The actual introduce %q is not the expected."</span><span class="token punctuation">,</span>
			intro<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 默认只在测试失败的时候，才打印日志内容</span>
	t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"The expected introduce is %q.\n"</span><span class="token punctuation">,</span> expected<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 测试失败，显示t.Logf()中的内容</span>
<span class="token operator">--</span><span class="token operator">-</span> FAIL<span class="token punctuation">:</span> TestIntroduce <span class="token punctuation">(</span><span class="token number">0.00</span>s<span class="token punctuation">)</span>
    demo53_test<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">41</span><span class="token punctuation">:</span> The actual introduce <span class="token string">"Welcome to my Golang column."</span> is not the expected<span class="token punctuation">.</span>
    demo53_test<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">44</span><span class="token punctuation">:</span> The expected introduce is <span class="token string">"Welcome to my golang column."</span><span class="token punctuation">.</span>
FAIL
FAIL	puzzlers<span class="token operator">/</span>article20<span class="token operator">/</span>q2	<span class="token number">0.013</span>s
FAIL
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="t-Fail-与t-FailNow"><a href="#t-Fail-与t-FailNow" class="headerlink" title="t.Fail()与t.FailNow()"></a><code>t.Fail()</code>与<code>t.FailNow()</code></h1><p><code>t.Fail()</code>令测试结果为失败，但其后的代码依然会被执行。go 语言测试用例失败的触发必须手动调用<code>t.Fail/t.FailNow/t.Errorf/t.Fatalf</code>等方法才可以，并不像其它语言支持测试断言，由断言失败触发。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestFail</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	t<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Failed."</span><span class="token punctuation">)</span> <span class="token comment">// 可以被执行到</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>t.FailNow()</code>也会令测试结果为失败，但其后的代码不再执行，不会影响其它测试用例的执行</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestFail</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	t<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Failed"</span><span class="token punctuation">)</span> <span class="token comment">// 不能被执行到</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="t-Errorf-与t-Error"><a href="#t-Errorf-与t-Error" class="headerlink" title="t.Errorf()与t.Error()"></a><code>t.Errorf()</code>与<code>t.Error()</code></h1><p>打印日志并使测试失败，等效于调用<code>t.Logf/t.Log</code>后，又调用了<code>t.Fail</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// t.Error 等效于在调用 t.Log 后，接着又调用了 t.Fail</span>
<span class="token comment">// Error is equivalent to Log followed by Fail.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>common<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintln</span><span class="token punctuation">(</span>args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Errorf is equivalent to Logf followed by Fail.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>common<span class="token punctuation">)</span> <span class="token function">Errorf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="t-Fatal与t-Fatalf方法"><a href="#t-Fatal与t-Fatalf方法" class="headerlink" title="t.Fatal与t.Fatalf方法"></a><code>t.Fatal</code>与<code>t.Fatalf</code>方法</h1><p>打印日志并使测试失败，在其后的代码不会被执行，当前测试用例立即结束，但不会影响其它测试用例，等效于调用<code>t.Logf/t.Log</code>后，又调用了<code>t.FailNow</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Fatal is equivalent to Log followed by FailNow.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>common<span class="token punctuation">)</span> <span class="token function">Fatal</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintln</span><span class="token punctuation">(</span>args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Fatalf is equivalent to Logf followed by FailNow.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>common<span class="token punctuation">)</span> <span class="token function">Fatalf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 语言 测试 示例函数</title>
    <url>/golang-test-example/</url>
    <content><![CDATA[<h1 id="示例函数"><a href="#示例函数" class="headerlink" title="示例函数"></a>示例函数</h1><p>以<code>Example</code>开头，后面加对应的函数名，示例没有参数列表与返回值列表</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ExampleFibMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>后缀<code>FibMap</code>的首字母是大写，因为这个函数在源码中就是大写，必须与源码保持一致，如果写为<code>fibMap</code>，那么会提示<code> ExampleFibWithMap refers an unknown identifier</code>，即无法与对应的函数相关联。</p>
<p>要注意的是，因为<code>FibMap</code>方法是可导出的，它的示例函数要写为<code>ExampleFibMap</code>，如果方法是不可导出的，那么它的示例函数要写为<code>Example_xxx</code>的形式，如<code>fibWithMap</code>方法的示例函数可以命名为<code>Example_fibWithMap</code></p>
<h1 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h1><p>Go 语言通过大量的命名约定来简化工具的复杂度，规范代码的风格。对示例函数的命名有如下约定：</p>
<ul>
<li>包级别的示例函数，直接命名为 <code>func Example() &#123; ... &#125;</code></li>
<li>函数 F 的示例，命名为 <code>func ExampleF() &#123; ... &#125;</code></li>
<li>类型 T 的示例，命名为 <code>func ExampleT() &#123; ... &#125;</code></li>
<li>类型 T 上的 方法 M 的示例，命名为 <code>func ExampleT_M() &#123; ... &#125;</code></li>
</ul>
<p>如果同一个方法需要提供多个示例，可以在示例函数名称后附加一个不同的后缀来实现，但这种后缀必须以小写字母开头，大写也是可以的</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Example_suffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">ExampleF_suffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">ExampleT_suffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">ExampleT_M_suffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p>示例代码会放在单独的示例文件中，如<code>example_test.go</code></p>
<p><a href="https://github.com/golang/go/blob/master/src/bytes/example_test.go">https://github.com/golang/go/blob/master/src/bytes/example_test.go</a></p>
<h1 id="测试示例函数"><a href="#测试示例函数" class="headerlink" title="测试示例函数"></a>测试示例函数</h1><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 测试通过</span>
<span class="token keyword">go</span> test gott<span class="token operator">/</span>fib <span class="token operator">-</span>run<span class="token operator">=</span>ExampleFibMap
ok      gott<span class="token operator">/</span>fib        <span class="token number">0.008</span>s

<span class="token comment">// 测试不通过</span>
<span class="token keyword">go</span> test gott<span class="token operator">/</span>fib <span class="token operator">-</span>run<span class="token operator">=</span>ExampleFibMap
<span class="token operator">--</span><span class="token operator">-</span> FAIL<span class="token punctuation">:</span> ExampleFibMap <span class="token punctuation">(</span><span class="token number">0.00</span>s<span class="token punctuation">)</span>
got<span class="token punctuation">:</span>
<span class="token number">102334155</span>
want<span class="token punctuation">:</span> <span class="token comment">// 这里就是output 后面期待的值</span>
<span class="token number">102334156</span>
FAIL
FAIL    gott<span class="token operator">/</span>fib        <span class="token number">0.012</span>s
FAIL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有时候，输出顺序可能不确定，比如循环输出 map 的值，那么可以使用 <code>Unordered output</code> 开头的注释</p>
<h1 id="示例函数的作用"><a href="#示例函数的作用" class="headerlink" title="示例函数的作用"></a>示例函数的作用</h1><ol>
<li><p>作为文档使用</p>
<p>它可以直观的展示一个函数的用法与功能。根据<code>Example</code>的后缀部分，<code>godoc</code>文档服务会把示例函数关联到函数本身，在查询在线文档的时候，可以看到函数的具体用法及示例函数</p>
</li>
<li><p>验证函数是否正确</p>
<p>如果示例函数中包含<code>// Output</code>注释，那么在执行 go test 的时候，示例函数也会被运行，然后检查标准输出是否与注释匹配，不匹配则做为测试失败处理。如果示例函数中没有包含<code>// Output</code>注释，那么 go test 的时候，它不会被运行</p>
</li>
<li><p>可以在 godoc 提供的在线文档上显示，包括函数信息，示例函数</p>
</li>
</ol>
<h1 id="源码文件"><a href="#源码文件" class="headerlink" title="源码文件"></a>源码文件</h1><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// fib_test.go</span>
<span class="token keyword">func</span> <span class="token function">ExampleFibMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	num <span class="token operator">:=</span> <span class="token function">fibWithMap</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
	<span class="token comment">//Output:</span>
	<span class="token comment">//102334155</span>
	<span class="token comment">//hello</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Example_fibWithMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	num <span class="token operator">:=</span> <span class="token function">fibWithMap</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
	<span class="token comment">//Output:</span>
	<span class="token comment">//102334155</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以有多个标准输出，与之对应的output也要有多个注释</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">FibMap</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">fibWithMap</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 死锁</title>
    <url>/mysql-deadlock/</url>
    <content><![CDATA[<h1 id="死锁的发生"><a href="#死锁的发生" class="headerlink" title="死锁的发生"></a>死锁的发生</h1><p>不同线程出现资源的循环依赖，都在等待对方释放自己所需要的资源，就会导致这几个线程进行无限等待的状态，发生死锁。</p>
<table>
<thead>
<tr>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody><tr>
<td>Begin;</td>
<td>Begin;</td>
</tr>
<tr>
<td>update t set k=k+1 where id = 1;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>update t set k=k+1 where id = 2;</td>
</tr>
<tr>
<td>update t set k=k+1 where id = 2;(block)</td>
<td></td>
</tr>
<tr>
<td></td>
<td>update t set k=k+1 where id = 1;<br><font color=red><br>&lt;ERROR 1213 (40001): <br>Deadlock found when trying to get lock;<br> try restarting transaction</font></td>
</tr>
<tr>
<td><font color=green>Query OK, 1 row affected (6.99 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0</font></td>
<td></td>
</tr>
</tbody></table>
<p>事务A在等待事物B释放 id=2的行锁，而事务B在等待事物A释放id=1的行锁，双方都在等待对方释放资源，就发生了死锁。由于MySQL有死锁检测，会马上发现这个死锁，并对事务B进行回滚。</p>
<p>发生死锁的线程都是要锁至少2行(参与的有2个资源，一个资源是自己已经加锁，但别人也要加，另一个资源是别人已经加锁，但自己也要加)。如果一个事务只锁一行是不会发生死锁的，只会发生锁阻塞。</p>
<h2 id="应对策略"><a href="#应对策略" class="headerlink" title="应对策略"></a>应对策略</h2><ul>
<li><p>什么都不做，直接等到超时</p>
<p>上面的事务B，会发生超时。</p>
<p>通过设置<code>innodb_lock_wait_timeout</code>来指定超时时间，默认值是50s</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%innodb_lock_wait_timeout%'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------------------------+-------+</span>
<span class="token operator">|</span> Variable_name            <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------------------+-------+</span>
<span class="token operator">|</span> innodb_lock_wait_timeout <span class="token operator">|</span> <span class="token number">50</span>    <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------------------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>进行死锁检测</p>
<p>开启死锁检测功能，检测到死锁后，对回滚成本比较低的事务进行回滚，让其它事务继续执行。设置参数<code>innodb_deadlock_detect</code>为on，开启此功能(默认为开启)</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment">------------------------+-------+</span>
<span class="token operator">|</span> Variable_name          <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------------+-------+</span>
<span class="token operator">|</span> innodb_deadlock_detect <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="哪种策略更好"><a href="#哪种策略更好" class="headerlink" title="哪种策略更好"></a>哪种策略更好</h2><ul>
<li><p>缩短等待的超时时间</p>
<p><code>innodb_lock_wait_timeout</code>的默认等待为50秒，对于生产环境，这显然是无法接受的。如果设置为1秒呢，虽然等待的时间变短，但也会误伤那些只是等待锁，而不是陷入死锁的线程。比如2秒以后就可以拿到锁的那些线程。</p>
</li>
<li><p>启用死锁检测</p>
<p>MySql默认启用死锁检测，当发现加入进来的线程会产生死锁时，会回滚成本较低的事务。MySQL发现死锁的速度很快，所以推荐使用死锁检测</p>
</li>
<li><p>关闭死锁检测</p>
<p>如果可以确定所有的SQL不会产生死锁问题，可以关闭死锁检测。死锁检测虽然好使，但也是有代价的，会占用CPU的资源。</p>
</li>
</ul>
<h1 id="死锁检测的成本"><a href="#死锁检测的成本" class="headerlink" title="死锁检测的成本"></a>死锁检测的成本</h1><p>当一个线程新加入到某个资源的阻塞队列时，会检测它的加入是否与其它正在发生阻塞的线程存在资源的相互依赖，从而导致死锁的发生。如果这是一个高并发的资源，阻塞队列里有大量排队的线程，那么每个线程都要把其它线程检查一遍，每个线程要检查的时间复杂度就是<code>O(N)</code>。</p>
<p>比如有1000个并发线程，那么要总共要检测的数量就是 1000 * 1000 = 100W，即<code>O(N^2)</code>，这种数量级的检测就会导致消耗大量的CPU资源，你看到的现象就是CPU占用率很高，却处理不了多少事务，或是你发现理处的事务很少，但CPU占用率却很高。</p>
<h1 id="控制并发度"><a href="#控制并发度" class="headerlink" title="控制并发度"></a>控制并发度</h1><p>要想从根本上减少死锁及锁等待，就要降低对同一资源的并发访问数量</p>
<p>可以使用的方法</p>
<ul>
<li><p>分摊热点资源的访问量</p>
<p>比如参加秒杀的商品，它的库存如果存放在一条记录中，那么在高并发下，比如有1000个请求，就会同时更新，这样就会导致线程的阻塞或发生死锁。</p>
<p>可以把保存库存的记录一条拆成N条，让请求随机访问这N条记录，比如分别放在100个记录中，那么每个记录最多只有10个更新请求，这样可以把并发量降为原来的<code>1/N</code>，大大减小了死锁的发生和锁的等待， 以及死锁检测的成本</p>
</li>
<li><p>把并发请求放入队列</p>
<p>数据库中间件可以把请求放入队列，使并发请求变为顺序访问</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 事务中多条SQL的排序</title>
    <url>/mysql-sequence-of-sql-in-trx/</url>
    <content><![CDATA[<p>场景：用户购买商品A，对应的SQL如下</p>
<ol>
<li>商品A库存减1 (SQL1)</li>
<li>用户购买商品A，扣减用户金额 (SQL2)</li>
<li>插入一条交易日志 (SQL3)</li>
</ol>
<p>这三个操作为原子操作，所以要写在一个事务中。如果有大量用户购买商品A，则<code>商品A库存减1 </code>为热点数据，被频繁更新。假设每条SQL的执行时间为5秒，则整个事务的执行时间为15秒，由于有大量用户购买，那么不同的执行顺序将会影响最终的执行时间，从而影响并发</p>
<p>把<code>商品A库存减1 (SQL1)</code>放在首行(情况1)</p>
<table>
<thead>
<tr>
<th>时刻</th>
<th>事务A</th>
<th>事务B</th>
<th>耗时</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>商品A库存减1 (SQL1)</td>
<td>商品A库存减1 (SQL1) 发生等待，不能执行，直到  T4 时刻</td>
<td>5s</td>
</tr>
<tr>
<td>T2</td>
<td>用户购买商品A，扣减用户金额 (SQL2)</td>
<td></td>
<td>5s</td>
</tr>
<tr>
<td>T3</td>
<td>插入一条交易日志 (SQL3)</td>
<td></td>
<td>5s</td>
</tr>
<tr>
<td>T4</td>
<td></td>
<td>商品A库存减1 (SQL1)</td>
<td>5s</td>
</tr>
<tr>
<td>T5</td>
<td></td>
<td>用户购买商品A，扣减用户金额 (SQL2)</td>
<td>5s</td>
</tr>
<tr>
<td>T6</td>
<td></td>
<td>插入一条交易日志 (SQL3)</td>
<td>5s</td>
</tr>
</tbody></table>
<ul>
<li>T1时刻，事务A执行<code>商品A库存减1</code>，给其上锁，直到事务提交（15秒以后）</li>
<li>同时事务B也执行<code>商品A库存减1</code>，被阻塞，发生锁等待，这使得后面的<code>Sql2,sql2</code>语句不能执行，直到15s后，事务A提交数据。 即T4时刻才开始执行。</li>
<li>事务B总共耗时30秒才完成。等待事务A的15s(T1到T3) + 自身的15s</li>
</ul>
<p>如果把<code>商品A库存减1 (SQL1)</code>放在最后，可以减少等待的时间(情况2)</p>
<table>
<thead>
<tr>
<th>时刻</th>
<th>事务A</th>
<th>事务B</th>
<th>耗时</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>用户购买商品A，扣减用户金额 (SQL2)</td>
<td>用户购买商品A，扣减用户金额 (SQL2)</td>
<td>5s</td>
</tr>
<tr>
<td>T2</td>
<td>插入一条交易日志 (SQL3)</td>
<td>插入一条交易日志 (SQL3)</td>
<td>5s</td>
</tr>
<tr>
<td>T3</td>
<td>商品A库存减1 (SQL1)</td>
<td>商品A库存减1 (SQL1) 发生等待，不能执行，直到  T4 时刻</td>
<td>5s</td>
</tr>
<tr>
<td>T4</td>
<td></td>
<td>商品A库存减1 (SQL1)</td>
<td>5s</td>
</tr>
</tbody></table>
<ul>
<li>扣减用户金额是针对单个用户操作，在同一时刻更新这些记录不太容易发生锁等待，所以事务A与事务B在T1时刻可以同时进行</li>
<li>插入一条交易日志 也是可以同时进行的，所以事务A与事务B在T2时刻同时进行</li>
<li>事务A T3 时刻执行完成，耗时15s，事务B 在此时被阻塞，因为要更新同一条记录，发生了锁等待，需要等待5秒</li>
<li>事务B在T4时刻，执行完成，耗时 20s（10s + 等待 5s + 5s）</li>
</ul>
<p>当把<code>商品A库存减1 (SQL1)</code>放在最后时，事务B的执行时间缩短到了20s，节省了10s，大大提高了并发度。</p>
<p>可以看出，锁等待时间是正在执行的事物引起锁的语句到提交的时间间隔，如果放在事务最后，那这个时间间隔会变为最少。对照上面的例子，情况1事务A从T1到T3时刻，持有锁总共15s。情况2，事务A只在T3时刻持有锁，总共5s，可见把<code>商品A库存减1 (SQL1)</code>放到最后时，大大减少了时间间隔。</p>
<p>通过减少事务持有锁的时间，大程度的减少了事务之间的锁等待，提高了并发度。所以通常的做法是把热点更新语句放到事务的最后，这样当事务结束后，热点语句的锁可以被马上释放，减少事务锁持有的时间，其它事务等待锁释放的时间就会变短，从而使并发度得到了提高。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql limit 的妙用</title>
    <url>/mysql-update-with-limit/</url>
    <content><![CDATA[<p>更新无索引的列，会导致全表被锁，其它线程无法更新表中的数据，如果加入了<code>limit N</code>关键字，可以减少被锁定的行，在一定程度上可以提高并发</p>
<p>表结构及数据如下</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>t<span class="token punctuation">`</span> <span class="token punctuation">(</span>
  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>ismale<span class="token punctuation">`</span> <span class="token keyword">tinyint</span> <span class="token keyword">default</span> <span class="token boolean">null</span>
<span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'d001'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'d003'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'d005'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'d007'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'d009'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">'d011'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----+------+------+--------+</span>
<span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> age  <span class="token operator">|</span> ismale <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+------+------+--------+</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> d001 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> d003 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> d005 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span> d007 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">9</span> <span class="token operator">|</span> d009 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span> d011 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+------+------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="不加入limit锁全表"><a href="#不加入limit锁全表" class="headerlink" title="不加入limit锁全表"></a>不加入<code>limit</code>锁全表</h2><table>
<thead>
<tr>
<th>时刻</th>
<th>Session A</th>
<th>Session B</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>begin;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>update t set age=31 where name=’d003’;</td>
<td></td>
</tr>
<tr>
<td>T2</td>
<td></td>
<td>Begin;</td>
</tr>
<tr>
<td></td>
<td></td>
<td>update t set age=31 where name=’d005’;<font color=red>(blocked)</font></td>
</tr>
<tr>
<td></td>
<td></td>
<td>update t set age=31 where id=5;<font color=red>(blocked)</font></td>
</tr>
<tr>
<td></td>
<td></td>
<td>insert into t values(2,’d002’,30,1);<font color=red>(blocked)</font></td>
</tr>
<tr>
<td></td>
<td></td>
<td>insert into t values(12,’d012’,30,1);<font color=red>(blocked)</font></td>
</tr>
</tbody></table>
<h3 id="SessionA的加锁范围"><a href="#SessionA的加锁范围" class="headerlink" title="SessionA的加锁范围"></a>SessionA的加锁范围</h3><p>主键索引<code>id</code>锁的范围是[infimum，supremum]</p>
<p>由于name列没有索引，<code>where name=&#39;d003&#39;</code>查询时走主键索引，全表扫描。先找到id=1的行，加<code>next-key</code>锁，发现name的值不匹配，继续向右查找，给id=3的行上锁，name匹配，返回结果给server层，然后继续向右查找直到最后一行id=11，查找过程中涉及到的行都被加了<code>next-key</code>锁(id=5,7,9,11的行)，由于事务没有提交，这些行锁没有被释放。</p>
<h3 id="SessionB被阻塞在哪里"><a href="#SessionB被阻塞在哪里" class="headerlink" title="SessionB被阻塞在哪里"></a>SessionB被阻塞在哪里</h3><p>更新条件 <code>where name=&#39;d005&#39;</code>，由于name列没有索引，查询时也要走主键索引。先找到id=1的行，加<code>next-key</code>锁，由于SessionA已经加了<code>next-key</code>锁，SessionB只能等待，它在此时发生了阻塞</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> t <span class="token keyword">set</span> age<span class="token operator">=</span><span class="token number">31</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'d005'</span>
<span class="token comment"># 被SessionA上的 id=1的行的 next-key锁阻塞</span>
RECORD LOCKS space id <span class="token number">5</span> page <span class="token keyword">no</span> <span class="token number">4</span> n bits <span class="token number">80</span> <span class="token keyword">index</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">of</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>t<span class="token punctuation">`</span>
trx id <span class="token number">4366</span> lock_mode X waiting
 <span class="token number">0</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">80000001</span><span class="token punctuation">;</span> <span class="token keyword">asc</span>
 <span class="token number">1</span>: len <span class="token number">6</span><span class="token punctuation">;</span> hex <span class="token number">000000000</span>d98<span class="token punctuation">;</span> <span class="token keyword">asc</span>
 <span class="token number">2</span>: len <span class="token number">7</span><span class="token punctuation">;</span> hex <span class="token number">81000000</span>a70110<span class="token punctuation">;</span> <span class="token keyword">asc</span>
 <span class="token number">3</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">64303031</span><span class="token punctuation">;</span> <span class="token keyword">asc</span> d001
 <span class="token number">4</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">8000001</span>e<span class="token punctuation">;</span> <span class="token keyword">asc</span>
 <span class="token number">5</span>: len <span class="token number">1</span><span class="token punctuation">;</span> hex <span class="token number">81</span><span class="token punctuation">;</span> <span class="token keyword">asc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>通过Id=5更新也会被SessinA的<code>next-key</code>锁阻塞，虽然SessionB加要的是<code>行锁</code>，这也从则面说明了<code>next-key</code>是由<code>行锁</code>和<code>间隙锁</code>组成</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> t <span class="token keyword">set</span> age<span class="token operator">=</span><span class="token number">31</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">5</span>
<span class="token comment"># 被id=5的记录上行锁阻塞</span>
RECORD LOCKS space id <span class="token number">5</span> page <span class="token keyword">no</span> <span class="token number">4</span> n bits <span class="token number">80</span> <span class="token keyword">index</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">of</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>t<span class="token punctuation">`</span>
trx id <span class="token number">4367</span> lock_mode X locks rec but <span class="token operator">not</span> gap waiting
 <span class="token number">0</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">80000005</span><span class="token punctuation">;</span> <span class="token keyword">asc</span>
 <span class="token number">1</span>: len <span class="token number">6</span><span class="token punctuation">;</span> hex <span class="token number">000000000</span>d9e<span class="token punctuation">;</span> <span class="token keyword">asc</span>
 <span class="token number">2</span>: len <span class="token number">7</span><span class="token punctuation">;</span> hex <span class="token number">82000000</span>a80110<span class="token punctuation">;</span> <span class="token keyword">asc</span>
 <span class="token number">3</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">64303034</span><span class="token punctuation">;</span> <span class="token keyword">asc</span> d004
 <span class="token number">4</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">8000001</span>e<span class="token punctuation">;</span> <span class="token keyword">asc</span>
 <span class="token number">5</span>: len <span class="token number">1</span><span class="token punctuation">;</span> hex <span class="token number">81</span><span class="token punctuation">;</span> <span class="token keyword">asc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>插入数据也被阻塞，因为插入Id的值都落在了<code>间隙锁</code>[infimum，supremum]内，无法插入任何的值。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'d002'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment"># 插入id=2的值，被间隙锁(1,3)阻塞</span>
RECORD LOCKS space id <span class="token number">5</span> page <span class="token keyword">no</span> <span class="token number">4</span> n bits <span class="token number">80</span> <span class="token keyword">index</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">of</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>t<span class="token punctuation">`</span>
trx id <span class="token number">4365</span> lock_mode X locks gap before rec <span class="token keyword">insert</span> intention waiting
 <span class="token number">0</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">80000003</span><span class="token punctuation">;</span> <span class="token keyword">asc</span>
 <span class="token number">1</span>: len <span class="token number">6</span><span class="token punctuation">;</span> hex <span class="token number">000000001106</span><span class="token punctuation">;</span> <span class="token keyword">asc</span>
 <span class="token number">2</span>: len <span class="token number">7</span><span class="token punctuation">;</span> hex <span class="token number">01000001120488</span><span class="token punctuation">;</span> <span class="token keyword">asc</span>
 <span class="token number">3</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">64303033</span><span class="token punctuation">;</span> <span class="token keyword">asc</span> d003
 <span class="token number">4</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">8000001</span>f<span class="token punctuation">;</span> <span class="token keyword">asc</span>
 <span class="token number">5</span>: len <span class="token number">1</span><span class="token punctuation">;</span> hex <span class="token number">81</span><span class="token punctuation">;</span> <span class="token keyword">asc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="加入limit减少被锁的行"><a href="#加入limit减少被锁的行" class="headerlink" title="加入limit减少被锁的行"></a>加入<code>limit</code>减少被锁的行</h2><table>
<thead>
<tr>
<th>时刻</th>
<th>Session A</th>
<th>Session B</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>begin;</td>
<td></td>
</tr>
<tr>
<td>T2</td>
<td>update t set age=31 where name=’d003’ limit 1;</td>
<td></td>
</tr>
<tr>
<td>T3</td>
<td></td>
<td>begin;</td>
</tr>
<tr>
<td>T4</td>
<td></td>
<td>update t set age=31 where name=’d005’;<font color=red>(blocked)</font></td>
</tr>
<tr>
<td></td>
<td></td>
<td>insert into t values(2,’d002’,30,1);<font color=red>(blocked)</font></td>
</tr>
<tr>
<td>T5</td>
<td></td>
<td>insert into t values(4,’d004’,30,1);<font color=green>(Query Ok)</font></td>
</tr>
</tbody></table>
<h3 id="SessionA加锁的范围是怎么样的"><a href="#SessionA加锁的范围是怎么样的" class="headerlink" title="SessionA加锁的范围是怎么样的"></a>SessionA加锁的范围是怎么样的</h3><p>主键索引<code>id</code>锁的范围是[infimum，3]</p>
<p>由于name列没有索引，查询时走主键索引，全表扫描。先找到id=1的行，加<code>next-key</code>锁，发现name的值不匹配，继续向右查找，给id=3的行上锁，name匹配，返回结果给server层，由于使用了<code>limit 1</code>，满足条件，不再向后查找，查询结束。记录(id:1),(id:3)的行上了<code>next-key</code>锁，之后的记录没有上锁。</p>
<h3 id="SessionB被阻塞在哪里-1"><a href="#SessionB被阻塞在哪里-1" class="headerlink" title="SessionB被阻塞在哪里"></a>SessionB被阻塞在哪里</h3><p>更新条件 <code>where name=&#39;d005&#39;</code>，由于name列没有索引，查询时也要走主键索引。先找到id=1的行，加<code>next-key</code>锁，由于SessionA已经加了<code>next-key</code>锁，SessionB只能等待，它在此时发生了阻塞</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> t <span class="token keyword">set</span> age<span class="token operator">=</span><span class="token number">31</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'d005'</span>
<span class="token comment"># 被SessionA上的 id=1的行的 next-key锁阻塞</span>
RECORD LOCKS space id <span class="token number">5</span> page <span class="token keyword">no</span> <span class="token number">4</span> n bits <span class="token number">80</span> <span class="token keyword">index</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">of</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>t<span class="token punctuation">`</span> 
trx id <span class="token number">4871</span> lock_mode X waiting
 <span class="token number">0</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">80000001</span><span class="token punctuation">;</span> <span class="token keyword">asc</span>
 <span class="token number">1</span>: len <span class="token number">6</span><span class="token punctuation">;</span> hex <span class="token number">000000000</span>d98<span class="token punctuation">;</span> <span class="token keyword">asc</span>
 <span class="token number">2</span>: len <span class="token number">7</span><span class="token punctuation">;</span> hex <span class="token number">81000000</span>a70110<span class="token punctuation">;</span> <span class="token keyword">asc</span>
 <span class="token number">3</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">64303031</span><span class="token punctuation">;</span> <span class="token keyword">asc</span> d001
 <span class="token number">4</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">8000001</span>e<span class="token punctuation">;</span> <span class="token keyword">asc</span>
 <span class="token number">5</span>: len <span class="token number">1</span><span class="token punctuation">;</span> hex <span class="token number">81</span><span class="token punctuation">;</span> <span class="token keyword">asc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>因为<code>id</code>锁的范围是[infimum，3]，(id=5,7,9,11)的行没有被上锁，可以更新及插入id &gt; 3的数据。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># Session B</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'d004'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>Query Ok<span class="token punctuation">)</span>

<span class="token comment"># 虽然不能通过 where name='d005' 修改</span>
<span class="token comment"># 但可以通过where id=5 修改，也说明了id=5的行没有被锁</span>
<span class="token comment"># 同时也绕过了需要等待id=1的锁的限制</span>
<span class="token keyword">update</span> t <span class="token keyword">set</span> age<span class="token operator">=</span><span class="token number">31</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>Query Ok<span class="token punctuation">)</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----+------+------+--------+</span>
<span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> age  <span class="token operator">|</span> ismale <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+------+------+--------+</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> d001 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> d003 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> d004 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> d005 <span class="token operator">|</span>   <span class="token number">31</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span> d007 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">9</span> <span class="token operator">|</span> d009 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span> d011 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+------+------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
