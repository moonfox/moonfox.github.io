<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>睡月花儿</title>
    <link>https://www.gagahappy.com/</link>
    
    <image>
      <url>https://www.gagahappy.com/icon.png</url>
      <title>睡月花儿</title>
      <link>https://www.gagahappy.com/</link>
    </image>
    
    <atom:link href="https://www.gagahappy.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>后端, 操作系统, 互联网, 程序开发, Linux, 数据库, MySql, Golang, Ruby</description>
    <pubDate>Tue, 06 Jul 2021 15:36:34 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>go 语言 测试 part1</title>
      <link>https://www.gagahappy.com/go-test-part1/</link>
      <guid>https://www.gagahappy.com/go-test-part1/</guid>
      <pubDate>Mon, 05 Jul 2021 07:37:07 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;缓存目录&quot;&gt;&lt;a href=&quot;#缓存目录&quot; class=&quot;headerlink&quot; title=&quot;缓存目录&quot;&gt;&lt;/a&gt;缓存目录&lt;/h1&gt;&lt;p&gt;Go</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="缓存目录"><a href="#缓存目录" class="headerlink" title="缓存目录"></a>缓存目录</h1><p>Go 总是会缓存程序构建的结果，以便在将来使用。当有任何变动时，缓存就会失效，构建过程会真正的被执行。被缓存的构建结果保存在<code>go env GOCACHE</code>目录中，为了防止目录中的数据越来越多，go会自动删除不经常使用的缓存文件。可以手动清除缓存结果，执行<code>go clean -cache</code>即可。</p><p><code>go test</code>命令也会把测试成功的结果缓存起来，如果测试代码和源代码没有改动，再次运行测试时，直接使用缓存的结果。当源码和测试代码有改动时，缓存结果就会失效，测试会被真正的运行。运行<code>go clean -testcache</code>可以删除测试的缓存结果，但不会删除构建结果缓存</p><h1 id="测试日志打印"><a href="#测试日志打印" class="headerlink" title="测试日志打印"></a>测试日志打印</h1><p>可以使用<code>t.Log</code>与<code>t.Logf</code>方法打印测试日志，这两个方法会在测试失败时，进行打印，在测试成功的时候，是不进行打印的。如果想在测试结果中看到所有的日志，可以使用<code>-v</code>参数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestIntroduce</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>intro <span class="token operator">:=</span> <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span>expected <span class="token operator">:=</span> <span class="token string">"Welcome to my Golang column."</span><span class="token keyword">if</span> intro <span class="token operator">!=</span> expected <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"The actual introduce %q is not the expected."</span><span class="token punctuation">,</span>intro<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 默认只在测试失败的时候，才打印日志内容</span>t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"The expected introduce is %q.\n"</span><span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试失败，显示t.Logf()中的内容</span><span class="token operator">--</span><span class="token operator">-</span> FAIL<span class="token punctuation">:</span> TestIntroduce <span class="token punctuation">(</span><span class="token number">0.00</span>s<span class="token punctuation">)</span>    demo53_test<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">41</span><span class="token punctuation">:</span> The actual introduce <span class="token string">"Welcome to my Golang column."</span> is not the expected<span class="token punctuation">.</span>    demo53_test<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">44</span><span class="token punctuation">:</span> The expected introduce is <span class="token string">"Welcome to my golang column."</span><span class="token punctuation">.</span>FAILFAILpuzzlers<span class="token operator">/</span>article20<span class="token operator">/</span>q2<span class="token number">0.013</span>sFAIL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="t-Fail-与t-FailNow"><a href="#t-Fail-与t-FailNow" class="headerlink" title="t.Fail()与t.FailNow()"></a><code>t.Fail()</code>与<code>t.FailNow()</code></h1><p><code>t.Fail()</code>令测试结果为失败，但其后的代码依然会被执行</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestFail</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// t.Log("Failed.")可以被执行到</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Failed."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>t.FailNow()</code>也会令测试结果为失败，但其后的代码不再执行，不会影响其它测试用例的执行</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestFail</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// t.Log() 不能被执行到</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Failed."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="t-Errorf-与t-Error"><a href="#t-Errorf-与t-Error" class="headerlink" title="t.Errorf()与t.Error()"></a><code>t.Errorf()</code>与<code>t.Error()</code></h1><p>打印日志并使测试失败，等效于调用<code>t.Logf/t.Log</code>后，又调用了<code>t.Fail</code></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// t.Error 等效于在调用 t.Log 后，接着又调用了 t.Fail</span><span class="token comment">// Error is equivalent to Log followed by Fail.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>common<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintln</span><span class="token punctuation">(</span>args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Errorf is equivalent to Logf followed by Fail.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>common<span class="token punctuation">)</span> <span class="token function">Errorf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="t-Fatal与t-Fatalf方法"><a href="#t-Fatal与t-Fatalf方法" class="headerlink" title="t.Fatal与t.Fatalf方法"></a><code>t.Fatal</code>与<code>t.Fatalf</code>方法</h1><p>打印日志并使测试失败，在其后的代码不会被执行，当前测试用例立即结束，但不会影响其它测试用例，等效于调用<code>t.Logf/t.Log</code>后，又调用了<code>t.FailNow</code></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Fatal is equivalent to Log followed by FailNow.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>common<span class="token punctuation">)</span> <span class="token function">Fatal</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintln</span><span class="token punctuation">(</span>args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Fatalf is equivalent to Logf followed by FailNow.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>common<span class="token punctuation">)</span> <span class="token function">Fatalf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/golang/">golang</category>
      
      
      <comments>https://www.gagahappy.com/go-test-part1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go 语言 测试覆盖率</title>
      <link>https://www.gagahappy.com/golang-test-coverage/</link>
      <guid>https://www.gagahappy.com/golang-test-coverage/</guid>
      <pubDate>Sun, 27 Jun 2021 06:48:39 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;覆盖率&quot;&gt;&lt;a href=&quot;#覆盖率&quot; class=&quot;headerlink&quot; title=&quot;覆盖率&quot;&gt;&lt;/a&gt;覆盖率&lt;/h1&gt;&lt;p&gt;语句的覆盖率是指在测试中至少被运行一次的代码占总代码数的比例。&lt;/p&gt;
&lt;h1 id=&quot;生成测试报告&quot;&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="覆盖率"><a href="#覆盖率" class="headerlink" title="覆盖率"></a>覆盖率</h1><p>语句的覆盖率是指在测试中至少被运行一次的代码占总代码数的比例。</p><h1 id="生成测试报告"><a href="#生成测试报告" class="headerlink" title="生成测试报告"></a>生成测试报告</h1><p>在生成报告之前，要确保所有的测试都正常通过。使用<code>go test</code>命令配合不同的参数标示可以生成不同类型的覆盖率分析报告</p><h2 id="使用标志coverprofile"><a href="#使用标志coverprofile" class="headerlink" title="使用标志coverprofile"></a>使用标志<code>coverprofile</code></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v -run<span class="token operator">=</span>Coverage -coverprofile<span class="token operator">=</span>c.out golang/gop/ch7_interfaces/7.9_example_expression_evaluator/eval<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在运行每个测试前，会把参与测试的源代码拷贝一份，并对每个词法块插入一个布尔变量，来统计代码块在测试中是否被执行过，以此来统计代码覆盖率，统计日志数据写入c.out文件</p><h2 id="使用标志covermode"><a href="#使用标志covermode" class="headerlink" title="使用标志covermode"></a>使用标志<code>covermode</code></h2><p>如果同时使用了<code>-covermode=count</code>，会在每个代码块插入计数器以统计代码块被执行的次数，用这个功能可以看到哪些代码是频繁执行的热点代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v -run<span class="token operator">=</span>Coverage -covermode<span class="token operator">=</span>count -coverprofile<span class="token operator">=</span>c.out golang/gop/ch7_interfaces/7.9_example_expression_evaluator/eval<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="查看测试报告"><a href="#查看测试报告" class="headerlink" title="查看测试报告"></a>查看测试报告</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go tool cover -html<span class="token operator">=</span>c.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行后会自动在浏览器中打开，绿色的代码块代表被测试覆盖到了，红色的则表示没有被覆盖到。如果使用了<code> -covermode=count</code>标志，会用红、灰、绿 三种颜色表示代码被调用的频率，红色表示没有调用，灰色表示频率较低，绿色随颜色深浅表示不同程度的频率调用</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>测试不可能是完整的，计算机科学家Edsger Dijkstra曾说过：“测试能证明缺陷存在，而无法证明没有缺陷。”</li><li>实现100%的测试覆盖率听起来很美，但是在具体实践中通常是不可行的，也不是值得推荐的做法。应该对更需要测试的地方添加测试代码，而不是一味的为每个方法都加入测试代码</li><li>测试覆盖率工具可以帮助我们快速识别测试薄弱的地方</li></ul>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/golang/">golang</category>
      
      
      <comments>https://www.gagahappy.com/golang-test-coverage/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>nginx 设置 gzip http 版本</title>
      <link>https://www.gagahappy.com/nginx-set-gzip-http-version/</link>
      <guid>https://www.gagahappy.com/nginx-set-gzip-http-version/</guid>
      <pubDate>Sat, 26 Jun 2021 06:11:40 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;设置gzip-http-version&quot;&gt;&lt;a href=&quot;#设置gzip-http-version&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="设置gzip-http-version"><a href="#设置gzip-http-version" class="headerlink" title="设置gzip_http_version"></a>设置<code>gzip_http_version</code></h1><p>使用<code>ab</code> 测试网站，参数如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ab -n <span class="token number">50</span> -c <span class="token number">10</span> -H <span class="token string">"Accept-Encoding: gzip, deflate"</span> https://example.com/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现返回的文档没有被压缩，查看<code>nginx</code>日志也显示返回的是原始大小，查询资料后发现是<code>nginx</code> 配置<code>gzip_http</code>版本问题</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">gzip</span> on<span class="token punctuation">;</span><span class="token keyword">gzip_vary</span> on<span class="token punctuation">;</span><span class="token keyword">gzip_min_length</span> <span class="token number">1</span>k<span class="token punctuation">;</span><span class="token keyword">gzip_proxied</span> any<span class="token punctuation">;</span><span class="token keyword">gzip_comp_level</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">gzip_buffers</span> <span class="token number">16</span> <span class="token number">8</span>k<span class="token punctuation">;</span><span class="token keyword">gzip_http_version</span> <span class="token number">1.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>gzip_http_version </code>设置为了1.1，而 <code>ab</code>只支持<code>http_version:1.0</code>，改为<code>1.0</code>即可。</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">gzip_http_version</span> <span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次测试，返回数据是被压缩后的数据，从<code>nginx</code>日志也可以看到数据是压缩后的。类似的<code>ab</code> 的工具还有<a href="https://github.com/JoeDog/siege">siege</a>，可以很好的支持<code>http 1.1</code></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>在<code>nginx</code>配置中，有些属性如果没有显示的进行设置，比如设置<code>gzip on;</code>时，没有设置<code>gzip_http_version</code>，<code>nginx</code>会启用默认值 <code>gzip_http_version:1.1;</code>，所以当你不想限制<code>http_version</code>的最低版本时，仅仅把<code>gzip_http_version</code>注释掉是不行的，你必须给其赋一个值才可以。类似这种问题不光在<code>nginx</code>配置中需要注意，在其它软件配置文件中也要注意</p>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/tcpip/">网络通信</category>
      
      
      <category domain="https://www.gagahappy.com/tags/nginx/">nginx</category>
      
      
      <comments>https://www.gagahappy.com/nginx-set-gzip-http-version/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go 语言 外部测试包</title>
      <link>https://www.gagahappy.com/golang-external-test-packages/</link>
      <guid>https://www.gagahappy.com/golang-external-test-packages/</guid>
      <pubDate>Thu, 24 Jun 2021 08:29:21 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;外部包&quot;&gt;&lt;a href=&quot;#外部包&quot; class=&quot;headerlink&quot; title=&quot;外部包&quot;&gt;&lt;/a&gt;外部包&lt;/h1&gt;&lt;p&gt;外部包使用&lt;code&gt;package xxx_test&lt;/code&gt;方式来命名，比如&lt;code&gt;package</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="外部包"><a href="#外部包" class="headerlink" title="外部包"></a>外部包</h1><p>外部包使用<code>package xxx_test</code>方式来命名，比如<code>package bytes_test</code>就是<code>src/btyes/buffer_test.go</code>外部包的命名方式，<code>_test</code>后缀告诉go test工具它应该建立一个额外的包来运行测试。</p><p>通过外部测试包的方式可以解决导入包循环依赖的问题，因为外部测试包是一个独立的包，所以能够导入那些<code>依赖待测代码本身</code>的其他辅助包；包内的测试代码就无法做到这点。注意：外部包不能被其它包导入</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 文件 src/btyes/buffer_test.go</span><span class="token keyword">package</span> bytes_test<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token punctuation">.</span> <span class="token string">"bytes"</span><span class="token operator">...</span> 代码片段<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestNewBuffer</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>buf <span class="token operator">:=</span> <span class="token function">NewBuffer</span><span class="token punctuation">(</span>testBytes<span class="token punctuation">)</span><span class="token function">check</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"NewBuffer"</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> testString<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">...</span> 代码片段<span class="token keyword">func</span> <span class="token function">empty</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">,</span> testname <span class="token builtin">string</span><span class="token punctuation">,</span> buf <span class="token operator">*</span>Buffer<span class="token punctuation">,</span> s <span class="token builtin">string</span><span class="token punctuation">,</span> fub <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="测试技巧"><a href="#测试技巧" class="headerlink" title="测试技巧"></a>测试技巧</h1><p>如果在测试中，需要对包内部的没有导出的函数进行测试，可以利用包内的 <code>_test.go</code>文件，如 <code>export_test.go</code>，在这个文件中将包的内部函数、方法导出，以供外部测试包使用。<code>indexBytePortable</code>方法在 src/bytes/bytes.go 中定义</p><p><code>src/bytes/bytes.go</code></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">indexBytePortable</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> c <span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把<code>bytes</code>包中的内部方法导出，供外部包<code>package bytes_test</code>使用</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// src/bytes/export_test.go</span><span class="token keyword">package</span> bytes<span class="token comment">// Export func for testing</span><span class="token keyword">var</span> IndexBytePortable <span class="token operator">=</span> indexBytePortable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>外部包使用导出的方法<code>IndexBytePortable</code></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// src/bytes/bytes_test.go</span><span class="token keyword">package</span> bytes_test<span class="token keyword">func</span> <span class="token function">TestIndexByte</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> indexTests <span class="token punctuation">&#123;</span><span class="token operator">...</span> 代码片段posp <span class="token operator">:=</span> <span class="token function">IndexBytePortable</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token keyword">if</span> posp <span class="token operator">!=</span> tt<span class="token punctuation">.</span>i <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">`indexBytePortable(%q, '%c') = %v`</span><span class="token punctuation">,</span> tt<span class="token punctuation">.</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> posp<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试文件<code>export_test.go</code>并没有定义测试代码，它只是通过<code>bytes.IndexBytePortable</code>简单导出了内部的<code>indexBytePortable</code>函数，这个技巧可以广泛用于位于外部测试包的白盒测试</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li><p>Go语言规范是禁止包的循环依赖</p></li><li><p>go list命令 查看包对应目录中哪些Go源文件</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> list <span class="token operator">-</span>f<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>GoFiles<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> bytes <span class="token comment">// => [buffer.go bytes.go reader.go]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看包内部的测试代码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> list <span class="token operator">-</span>f<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>TestGoFiles<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> bytes <span class="token comment">// => [export_test.go]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>XTestGoFiles表示的是属于外部测试包的测试代码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> list <span class="token operator">-</span>f<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>XTestGoFiles<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> bytes<span class="token comment">// => [buffer_test.go bytes_test.go compare_test.go example_test.go reader_test.go]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/golang/">golang</category>
      
      
      <comments>https://www.gagahappy.com/golang-external-test-packages/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>safari 网站图标 favicon 不显示</title>
      <link>https://www.gagahappy.com/safari-favicon-setting/</link>
      <guid>https://www.gagahappy.com/safari-favicon-setting/</guid>
      <pubDate>Tue, 22 Jun 2021 07:26:43 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;favicon图标不显示&quot;&gt;&lt;a href=&quot;#favicon图标不显示&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="favicon图标不显示"><a href="#favicon图标不显示" class="headerlink" title="favicon图标不显示"></a><code>favicon</code>图标不显示</h1><p>发现博客的<code>favicon</code>图标一直不能在<code>safari</code> 的标签栏上显示，只能显示在地址栏，经过一番研究后发现是Hexo 的 Next主题的设置不正确造成的</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">favicon</span><span class="token punctuation">:</span>  <span class="token key atrule">small</span><span class="token punctuation">:</span> /favicon<span class="token punctuation">-</span>16x16.png  <span class="token key atrule">medium</span><span class="token punctuation">:</span> /favicon<span class="token punctuation">-</span>32x32.png  <span class="token key atrule">apple_touch_icon</span><span class="token punctuation">:</span> /apple<span class="token punctuation">-</span>touch<span class="token punctuation">-</span>icon.png  <span class="token comment"># 不能把 safari_pinned_tab 注释掉，只能留空，表示不启用,</span>  <span class="token comment"># 注释掉会默认使用 next 主题中的设置.</span>  <span class="token comment"># 注意: &lt;link rel="mask-icon" href="logo.svg"> 会覆盖</span>  <span class="token comment"># &lt;link rel="icon" href="favicon.png"> 导致safari favicon图标被替换为logo.svg</span>  safari_pinned_tab<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>small</code>与<code>medium</code>会生成两个与<code>favicon</code>相关的设置，用来在地址栏与标签栏显示网站图标</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/png<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32x32<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/favicon-32x32.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/png<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16x16<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/favicon-16x16.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>safari_pinned_tab</code>会生成<code>&lt;link rel=&quot;mask-icon&quot; href=&quot;logo.svg&quot;&gt;</code>，它会覆盖标签栏上的<code>favicon</code>图标，由于在设置这个属性的时候，错误的使用了非<code>svg</code>文件(用的是png)导致了图标不能正确显示。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>设置正确的<code>svg</code>文件，或者就不设置<code>&lt;link rel=&quot;mask-icon&quot;&gt;</code>属性，只使用<code>&lt;link rel=&quot;icon&quot; &gt;</code>设置<code>favicon</code>图标即可。如果不设置<code>&lt;link rel=&quot;mask-icon&quot;&gt;</code>属性，需要在配置文件中把<code>safari_pinned_tab</code>的值留空，而不是不设置或注释掉，这样做会使用next 主题中的默认设置，造成<code>favicon</code>图标显示为Next官网的图标</p><h1 id="关于safari缓存图标的问题"><a href="#关于safari缓存图标的问题" class="headerlink" title="关于safari缓存图标的问题"></a>关于<code>safari</code>缓存图标的问题</h1><p><code>safari</code>会对图标按域名进行缓存，从而造成更新图标后不能马上更新显示的问题，需要对缓存的图标进行清理。</p><ul><li>首先要清理它的缓存：<code>setting</code>-&gt;<code>privacy</code>-&gt;<code>Manage Website Date</code>，搜索相关域名，删除即可。</li><li>磁盘缓存文件：<code>~/Library/Safari</code>目录下，删除<code>Template Icons</code>文件夹，如果不起作用，删除<code>Favicon Cache</code>，<code>Touch Icons Cache</code>文件夹</li></ul>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/software/">软件</category>
      
      
      <category domain="https://www.gagahappy.com/tags/safari/">safari</category>
      
      
      <comments>https://www.gagahappy.com/safari-favicon-setting/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
