<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>睡月飞天膏药</title>
    <link>https://www.gagahappy.com/</link>
    
    <image>
      <url>https://www.gagahappy.com/icon.png</url>
      <title>睡月飞天膏药</title>
      <link>https://www.gagahappy.com/</link>
    </image>
    
    <atom:link href="https://www.gagahappy.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>后端, 操作系统, 互联网, 程序开发, Linux, 数据库, MySql, Golang, Ruby</description>
    <pubDate>Wed, 09 Jun 2021 09:18:55 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Ruby 字符和 Ascii 码之间的转换</title>
      <link>https://www.gagahappy.com/ruby-character-to-ascii/</link>
      <guid>https://www.gagahappy.com/ruby-character-to-ascii/</guid>
      <pubDate>Wed, 09 Jun 2021 09:05:03 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;字符-转-ascii&quot;&gt;&lt;a href=&quot;#字符-转-ascii&quot; class=&quot;headerlink&quot; title=&quot;字符 转 ascii&quot;&gt;&lt;/a&gt;字符 转 ascii&lt;/h1&gt;&lt;figure class=&quot;highlight</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="字符-转-ascii"><a href="#字符-转-ascii" class="headerlink" title="字符 转 ascii"></a>字符 转 ascii</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;a&#x27;</span>.ord <span class="comment"># =&gt; 97</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;a&quot;</span>.unpack(<span class="string">&#x27;c&#x27;</span>) <span class="comment">#=&gt; 97 `c` 提取一个字符作为整数</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;string&quot;</span>.each_byte <span class="keyword">do</span> <span class="params">|c|</span></span><br><span class="line">    puts c</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.each_byte.to_a</span><br><span class="line">[<span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">32</span>, <span class="number">119</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.bytes</span><br><span class="line">[<span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">32</span>, <span class="number">119</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><h1 id="Ascii-转-字符"><a href="#Ascii-转-字符" class="headerlink" title="Ascii 转 字符"></a>Ascii 转 字符</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">97</span>.chr <span class="comment"># =&gt; &quot;a&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.bytes <span class="comment"># =&gt; [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]</span></span><br><span class="line">[<span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">32</span>, <span class="number">119</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>].map&#123;<span class="params">|m|</span>m.chr&#125;</span><br><span class="line"><span class="comment"># =&gt; [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot; &quot;, &quot;w&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;]</span></span><br></pre></td></tr></table></figure><h1 id="字符转二进制"><a href="#字符转二进制" class="headerlink" title="字符转二进制"></a>字符转二进制</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;aa&quot;</span>.unpack(<span class="string">&#x27;b8B8&#x27;</span>)  <span class="comment">#=&gt; [&quot;10000110&quot;, &quot;01100001&quot;]</span></span><br></pre></td></tr></table></figure><p><code>B</code> 从每个字符中提取位（首先是最高有效位）</p><p><code>b</code> 从每个字符中提取位（首先是最低有效位）</p>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/ruby/">Ruby</category>
      
      
      <comments>https://www.gagahappy.com/ruby-character-to-ascii/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 语言 bufio.Peek 源码</title>
      <link>https://www.gagahappy.com/go-bufio-reader-peek/</link>
      <guid>https://www.gagahappy.com/go-bufio-reader-peek/</guid>
      <pubDate>Tue, 08 Jun 2021 07:03:58 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt; &lt;code&gt;bufio.Peek(n)&lt;/code&gt;返回前N个未读字节 ，不会更改已读计数的值。在方法调用后，要查看返回参数&lt;code&gt;error&lt;/code&gt;是否为nil，以确保操作满足要求&lt;/p&gt;
&lt;figure class=&quot;highlight</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p> <code>bufio.Peek(n)</code>返回前N个未读字节 ，不会更改已读计数的值。在方法调用后，要查看返回参数<code>error</code>是否为nil，以确保操作满足要求</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">Peek</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrNegativeCount</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.lastByte = <span class="number">-1</span></span><br><span class="line">b.lastRuneSize = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当未读字节数小于n，且缓冲区不满(b.w-b.r &lt; len(b.buf))，</span></span><br><span class="line"><span class="comment">// 即缓冲区中从头到尾必须都是未读字节才算是缓冲区已经满</span></span><br><span class="line"><span class="comment">// 且 b.err 为nil，这三者都满足时，开始调用b.fill()填充缓冲区</span></span><br><span class="line"><span class="comment">// fill()方法会把未读数据移动到缓冲区头部，并把后面空出来的部分写满</span></span><br><span class="line"><span class="comment">// for 保证了至少可以把缓冲区填满</span></span><br><span class="line"><span class="keyword">for</span> b.w-b.r &lt; n &amp;&amp; b.w-b.r &lt; <span class="built_in">len</span>(b.buf) &amp;&amp; b.err == <span class="literal">nil</span> &#123;</span><br><span class="line">b.fill() <span class="comment">// b.w-b.r &lt; len(b.buf) =&gt; buffer is not full</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当要读取的字节数大于缓冲区长度时，返回所有未读节字，并附带错误信息</span></span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="built_in">len</span>(b.buf) &#123;</span><br><span class="line"><span class="keyword">return</span> b.buf[b.r:b.w], ErrBufferFull</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 &lt;= n &lt;= len(b.buf)</span></span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="comment">// 当要读取的字节数大于所有未读节字数时，返回所有未读节字，并附带错误信息</span></span><br><span class="line"><span class="keyword">if</span> avail := b.w - b.r; avail &lt; n &#123;</span><br><span class="line"><span class="comment">// not enough data in buffer</span></span><br><span class="line">n = avail</span><br><span class="line">err = b.readErr()</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">err = ErrBufferFull</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当 n 小于 未读字节数时，程序直接跳到这里</span></span><br><span class="line"><span class="keyword">return</span> b.buf[b.r : b.r+n], err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/golang/">golang</category>
      
      
      <comments>https://www.gagahappy.com/go-bufio-reader-peek/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 语言 对指针类型接收者本身赋值</title>
      <link>https://www.gagahappy.com/golang-assign_receiver_of_ptr/</link>
      <guid>https://www.gagahappy.com/golang-assign_receiver_of_ptr/</guid>
      <pubDate>Mon, 07 Jun 2021 14:50:29 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;code&gt;r&lt;/code&gt; 是指针类型接收者，可以对其进行解引赋值。结构体的&lt;code&gt;0值&lt;/code&gt;不是&lt;code&gt;nil&lt;/code&gt;，而是其各个成员的&lt;code&gt;0值&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><code>r</code> 是指针类型接收者，可以对其进行解引赋值。结构体的<code>0值</code>不是<code>nil</code>，而是其各个成员的<code>0值</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">newReader()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> reader <span class="keyword">struct</span> &#123;</span><br><span class="line">buf  []<span class="keyword">byte</span></span><br><span class="line">r, w <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newReader</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := <span class="built_in">new</span>(reader)</span><br><span class="line">fmt.Println(r) <span class="comment">// &amp;&#123;[] 0 0&#125;</span></span><br><span class="line">r.reset(<span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">5</span>))</span><br><span class="line">fmt.Println(r) <span class="comment">// &amp;&#123;[0 0 0 0 0] -1 -1&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *reader)</span> <span class="title">reset</span><span class="params">(buf []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">*r = reader&#123;buf: buf, r: <span class="number">-1</span>, w: <span class="number">-1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/golang/">golang</category>
      
      
      <comments>https://www.gagahappy.com/golang-assign_receiver_of_ptr/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Mac OS 安装 Gdb</title>
      <link>https://www.gagahappy.com/gdb-setup-on-macos/</link>
      <guid>https://www.gagahappy.com/gdb-setup-on-macos/</guid>
      <pubDate>Sun, 06 Jun 2021 07:14:15 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gdb</span><br></pre></td></tr></table></figure><p>也可以从源码进安装，<a href="https://www.gnu.org/software/gdb/">官网</a>，目前GDB对下列语言进行了支持</p><blockquote><p>Ada<br>Assembly<br>C<br>C++<br>D<br>Fortran<br>Go<br>Objective-C<br>OpenCL<br>Modula-2<br>Pascal<br>Rust</p></blockquote><p>安装后还不能直接使用，MacOS 对安全性有效高的要求，不允许没有许可的程序运行其它程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gdb helloworld</span><br><span class="line">(gdb) run</span><br><span class="line"></span><br><span class="line">Unable to find Mach task port <span class="keyword">for</span> process-id 798: (os/kern) failure (0x5).</span><br><span class="line"> (please check gdb is codesigned - see taskgated(8))</span><br></pre></td></tr></table></figure><p>提示<code>please check gdb is codesigned - see taskgated(8)</code>，原因是还没有为<code>gdb</code>签名，需要在系统的<code>Keychain</code>中创建用于签名的证书</p><h1 id="创建certificate"><a href="#创建certificate" class="headerlink" title="创建certificate"></a>创建certificate</h1><p>步骤如下：</p><ol><li>Launch Keychain Access application: Applications &gt; Utilities &gt; Keychain Access.</li><li>From the Keychains list on the left, right-click on the System item and select Unlock Keychain “System”.</li><li>From the toolbar, go to Keychain Access &gt; Certificate Assistant &gt; Create a Certificate.</li><li>Choose a name (e.g. gdb-cert).</li><li>Set Identity Type to Self Signed Root.</li><li>Set Certificate Type to Code Signing.</li><li>Check the Let me override defaults checkbox.</li><li>At this point, you can go on with the installation process until you get the Specify a Location For The Certificate dialogue box. Here you need to set Keychain to System. Finally, you can click on the Create button.</li><li>After these steps, you can see the new certificate under System keychains. From the contextual menu of the newly created certificate (right-click on it) select the Get info option. In the dialogue box, expand the Trust item and set Code signing to Always Trust.</li><li>Then, from the Keychains list on the left, right-click on the System item and select Lock Keychain “System”.</li><li>Finally, reboot your system.</li></ol><h1 id="gdb签名"><a href="#gdb签名" class="headerlink" title="gdb签名"></a>gdb签名</h1><p>在创建你自己的证书后，就可以给gdb进行签名了，在签名前要先配置<code>gdb-entitlement.xml</code>文件，它允许MacOs信任gdb</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">plist</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.allow-jit<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.allow-unsigned-executable-memory<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.allow-dyld-environment-variables<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.disable-library-validation<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.disable-executable-page-protection<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.debugger<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.get-task-allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在命令行运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codesign --entitlements gdb-entitlement.xml -fs gdb-cert <span class="string">&quot;<span class="subst">$(which gdb)</span>&quot;</span></span><br></pre></td></tr></table></figure><p><code>-fs</code>: 要填写你刚刚生成的证书的名子，<code>$(which gdb)</code>: 是gdb的安装路径</p><p>接着在<code>home</code>目录创建<code>~/.gdbinit</code>文件，并写入如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;set startup-with-shell off&quot;</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><h1 id="编译文件"><a href="#编译文件" class="headerlink" title="编译文件"></a>编译文件</h1><p>为了解决<code>No symbol table is loaded</code>问题，可以在编译时加入<code>-ggdb</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">gcc hello_world.c -o hello_world -ggdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">gdb hello_world</span><br><span class="line">(gdb) list</span><br><span class="line">1<span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line">2</span><br><span class="line">3int my_strlen(char *string);</span><br><span class="line">4</span><br><span class="line">5int main(int argc, char const *argv[])</span><br><span class="line">6&#123;</span><br><span class="line">7  // char *string;</span><br><span class="line">8  // string = <span class="string">&quot;hello world haha&quot;</span>;</span><br><span class="line">9  char string[] = <span class="string">&quot;hello world haha&quot;</span>;</span><br><span class="line">10  <span class="built_in">printf</span>(<span class="string">&quot;The string &#x27;%s&#x27; len is \&quot;%d\&quot;\n&quot;</span>, string, my_strlen(string));</span><br><span class="line">(gdb) run</span><br><span class="line">Starting program: /Users/ga/m/book/c-lang/ch02-basic/hello_world</span><br><span class="line">[New Thread 0x2603 of process 6002]</span><br><span class="line">[New Thread 0x1803 of process 6002]</span><br><span class="line">warning: unhandled dyld version (16)</span><br><span class="line">The string <span class="string">&#x27;hello world haha&#x27;</span> len is <span class="string">&quot;16&quot;</span></span><br><span class="line">[Inferior 1 (process 6002) exited normally]</span><br></pre></td></tr></table></figure><h1 id="使用gdb调试golang"><a href="#使用gdb调试golang" class="headerlink" title="使用gdb调试golang"></a>使用gdb调试golang</h1><p>本博没有成功，一直提示错误<code>No symbol table is loaded.  Use the &quot;file&quot; command.</code> ，后来查看了Go的官方文档，官方建议使用<code>Delve</code>进行调试。<a href="https://golang.org/doc/gdb">官方原文</a></p><blockquote><p><em>Note that <a href="https://github.com/go-delve/delve">Delve</a> is a better alternative to GDB when debugging Go programs built with the standard toolchain. It understands the Go runtime, data structures, and expressions better than GDB. Delve currently supports Linux, OSX, and Windows on <code>amd64</code>. For the most up-to-date list of supported platforms, please see <a href="https://github.com/go-delve/delve/tree/master/Documentation/installation">the Delve documentation</a>.</em></p></blockquote><p>并且在官方给出的示例中，也不保证你照着运行也可以成功</p><blockquote><p>In short, the instructions below should be taken only as a guide to how to use GDB when it works, not as a guarantee of success. Besides this overview you might want to consult the <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/">GDB manual</a>.</p></blockquote><p>最后祝你一切顺利</p>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/software/">软件</category>
      
      
      <category domain="https://www.gagahappy.com/tags/gdb/">gdb</category>
      
      
      <comments>https://www.gagahappy.com/gdb-setup-on-macos/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Git 创建标签</title>
      <link>https://www.gagahappy.com/git-create-tag/</link>
      <guid>https://www.gagahappy.com/git-create-tag/</guid>
      <pubDate>Sat, 05 Jun 2021 14:16:35 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;Git-创建标签&quot;&gt;&lt;a href=&quot;#Git-创建标签&quot; class=&quot;headerlink&quot; title=&quot;Git 创建标签&quot;&gt;&lt;/a&gt;Git 创建标签&lt;/h1&gt;&lt;p&gt;Git 标签分两种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;附注标签: annotated: 是存储在</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Git-创建标签"><a href="#Git-创建标签" class="headerlink" title="Git 创建标签"></a>Git 创建标签</h1><p>Git 标签分两种</p><ul><li>附注标签: annotated: 是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息</li><li>轻量级标签: lightweight: 像一个不会改变的分支——它只是某个特定提交的引用。在实践中不推荐使用</li></ul><h2 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 附注标签</span></span><br><span class="line">git tag -a v0.0.1 -m <span class="string">&quot;first release try&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布标签</span></span><br><span class="line"><span class="comment"># 标签不会随push而自动被push到远程，需要单独push</span></span><br><span class="line">git push origin v0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给某个commit单独打tag</span></span><br><span class="line"><span class="comment"># 这种操作多用于给历史commit打tag,原因可能是当时没有打</span></span><br><span class="line">git tag -a v0.0.2 2234093</span><br></pre></td></tr></table></figure><h2 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个tag的具体内容</span></span><br><span class="line">git show v0.0.1</span><br><span class="line">git cat-file -p v0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除标签</span></span><br><span class="line">git tag -d v0.0.1</span><br><span class="line">=&gt; Deleted tag <span class="string">&#x27;v0.0.1&#x27;</span> (was 79db751)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程标签</span></span><br><span class="line">git push origin :v0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag的sha1</span></span><br><span class="line">cat .git/refs/tags/v5.4.1 <span class="comment"># 在标签被删除的时候会显示这个值</span></span><br><span class="line"><span class="comment"># =&gt; 79db751</span></span><br></pre></td></tr></table></figure><h2 id="签名tag"><a href="#签名tag" class="headerlink" title="签名tag"></a>签名tag</h2><p>前置条件：要先配置GPG</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 强制给tag 签名</span></span><br><span class="line"><span class="comment"># 直接编辑  ~/.gitconfig 也可以</span></span><br><span class="line">git config --global tag.forcesignannotated <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/software/">软件</category>
      
      
      <category domain="https://www.gagahappy.com/tags/git/">git</category>
      
      
      <comments>https://www.gagahappy.com/git-create-tag/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
