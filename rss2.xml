<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>睡月飞天膏药</title>
    <link>https://www.gagahappy.com/</link>
    
    <image>
      <url>https://www.gagahappy.com/icon.png</url>
      <title>睡月飞天膏药</title>
      <link>https://www.gagahappy.com/</link>
    </image>
    
    <atom:link href="https://www.gagahappy.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>后端, 操作系统, 互联网, 程序开发, Linux, 数据库, MySql, Golang, Ruby</description>
    <pubDate>Sat, 12 Jun 2021 12:33:06 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Linux 中的文件描述符</title>
      <link>https://www.gagahappy.com/linux-fd-in-linux/</link>
      <guid>https://www.gagahappy.com/linux-fd-in-linux/</guid>
      <pubDate>Sat, 12 Jun 2021 11:08:09 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;文件描述符&quot;&gt;&lt;a href=&quot;#文件描述符&quot; class=&quot;headerlink&quot; title=&quot;文件描述符&quot;&gt;&lt;/a&gt;文件描述符&lt;/h1&gt;&lt;p&gt;即&lt;code&gt;file descriptor&lt;/code&gt;，简称&lt;code&gt;FD&lt;/code&gt;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h1><p>即<code>file descriptor</code>，简称<code>FD</code> ，用于指代被打开的文件，用一个非负的整数表示</p><h1 id="对文件描述符的误区"><a href="#对文件描述符的误区" class="headerlink" title="对文件描述符的误区"></a>对文件描述符的误区</h1><p>每个程序启动的时候，都会打开3个文件，分别是，0标准输入，1标准输出，2标准错误，此后再打开文件的文件描述符就是3，依次类推。之前的误区是，当在进程中打开一个文件，它的文件描述符应该已经很大了，不应该是<code>3</code>，因为系统本身已经运行了很多程序。正确的应该是：进程只能看到自己的文件描述符，每个进程的文件描述符的编号都是从0开始，进程启动，默认都会打开<code>标准输入，标准输出，标准错误</code>这三个文件，之后再打开的文件的描述符从编号3开始</p><h1 id="文件件描述符列表"><a href="#文件件描述符列表" class="headerlink" title="文件件描述符列表"></a>文件件描述符列表</h1><p>每个进程都有着自己的文件描述符列表。进程A启动后，拥有<code>stdin,stdout,stderr</code>这三个文件描述符 ，再打开一个文件，这个文件的文件描述符就是3。进程B启动后，拥有<code>stdin,stdout,stderr</code>这三个文件描述符，再打一个文件，它的文件描述符也是3，和进程A的一样。所以，不同进程，可以拥有相同的文件描述符。</p><p>当一个文件在同一个进程中，被打开多次，那么这个文件具有不同的文件描述符，在同一个进程中，每个文件描述符只能对应一个文件。同一个进程，不同文件描述符可以指向同一个文件。</p><p>不同进程，如果都打开了同一个文件(文件描述符都指向同一个文件)，那么它们都具有这个文件的句柄，其中一个进程对文件的修改，对其它进程是可见的。比如进程A对文件写入了10个字节，进程B在对文件进行写入时，是从第11个字节处开始写入的，而不是从文件头开始写入，这些操作包括<code>read(),write(),seek()</code>等</p><h1 id="文件描述符限制"><a href="#文件描述符限制" class="headerlink" title="文件描述符限制"></a>文件描述符限制</h1><p>内核为了不让某个进程消耗掉所有的文件资源，会对单个进程最大打开文件数做默认值处理（称之为用户级限制），默认值一般是1024。注意：同一个文件，可以有多个文件句柄，这可能是不同进程打开了同一个文件，或者是同一个进程内，对一个文件打开了多次</p>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/os/">操作系统</category>
      
      
      <category domain="https://www.gagahappy.com/tags/linux/">linux</category>
      
      
      <comments>https://www.gagahappy.com/linux-fd-in-linux/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 语言 截取0长度的Slice</title>
      <link>https://www.gagahappy.com/golang-create-slice-with-zero-length/</link>
      <guid>https://www.gagahappy.com/golang-create-slice-with-zero-length/</guid>
      <pubDate>Fri, 11 Jun 2021 03:48:13 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;截取0长度的&lt;code&gt;slice&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>截取0长度的<code>slice</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">s2 := s1[<span class="number">1</span>:<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(s2), <span class="built_in">len</span>(s2), s2) <span class="comment">// 5 0 []</span></span><br><span class="line"></span><br><span class="line">s2 = s1[<span class="number">6</span>:<span class="number">6</span>]</span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(s2), <span class="built_in">len</span>(s2), s2) <span class="comment">// 0 0 []</span></span><br><span class="line"></span><br><span class="line">s2 = s1[<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(s2), <span class="built_in">len</span>(s2), s2) <span class="comment">// 5 1 [2]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>s1[1:1]</code>表示截取的位置从第一个元素最后一个字节的后面开始，到第一个元素最后一个字节的后面结束，所以生成的<code>slice</code>的长度是0，容量是5(6-1)</p><p><code>s1[6:6]</code>表示截取的位置从最后一个元素最后一个字节的后面开始，到最后一个元素最后一个字节的后面结束，所以生成的<code>slice</code>的长度是0，容量是0(6-6)</p><p><code>s1[1:2]</code>表示截取的位置从第一个元素最后一个字节的后面开始，到第二个元素最后一个字节的后面结束，在这个范围内的元素只有 <code>2</code>，所以生成的<code>slice</code>的长度是1，容量是5(1-6)</p>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/golang/">golang</category>
      
      
      <comments>https://www.gagahappy.com/golang-create-slice-with-zero-length/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ruby 字符和 Ascii 码之间的转换</title>
      <link>https://www.gagahappy.com/ruby-character-to-ascii/</link>
      <guid>https://www.gagahappy.com/ruby-character-to-ascii/</guid>
      <pubDate>Wed, 09 Jun 2021 09:05:03 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;字符-转-ascii&quot;&gt;&lt;a href=&quot;#字符-转-ascii&quot; class=&quot;headerlink&quot; title=&quot;字符 转 ascii&quot;&gt;&lt;/a&gt;字符 转 ascii&lt;/h1&gt;&lt;figure class=&quot;highlight</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="字符-转-ascii"><a href="#字符-转-ascii" class="headerlink" title="字符 转 ascii"></a>字符 转 ascii</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;a&#x27;</span>.ord <span class="comment"># =&gt; 97</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;a&quot;</span>.unpack(<span class="string">&#x27;c&#x27;</span>) <span class="comment">#=&gt; 97 `c` 提取一个字符作为整数</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;string&quot;</span>.each_byte <span class="keyword">do</span> <span class="params">|c|</span></span><br><span class="line">    puts c</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.each_byte.to_a</span><br><span class="line">[<span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">32</span>, <span class="number">119</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.bytes</span><br><span class="line">[<span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">32</span>, <span class="number">119</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><h1 id="Ascii-转-字符"><a href="#Ascii-转-字符" class="headerlink" title="Ascii 转 字符"></a>Ascii 转 字符</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">97</span>.chr <span class="comment"># =&gt; &quot;a&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.bytes <span class="comment"># =&gt; [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]</span></span><br><span class="line">[<span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">32</span>, <span class="number">119</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>].map&#123;<span class="params">|m|</span>m.chr&#125;</span><br><span class="line"><span class="comment"># =&gt; [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot; &quot;, &quot;w&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;]</span></span><br></pre></td></tr></table></figure><h1 id="字符转二进制"><a href="#字符转二进制" class="headerlink" title="字符转二进制"></a>字符转二进制</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;aa&quot;</span>.unpack(<span class="string">&#x27;b8B8&#x27;</span>)  <span class="comment">#=&gt; [&quot;10000110&quot;, &quot;01100001&quot;]</span></span><br></pre></td></tr></table></figure><p><code>B</code> 从每个字符中提取位（首先是最高有效位）</p><p><code>b</code> 从每个字符中提取位（首先是最低有效位）</p>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/ruby/">Ruby</category>
      
      
      <comments>https://www.gagahappy.com/ruby-character-to-ascii/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 语言 bufio.Peek 源码</title>
      <link>https://www.gagahappy.com/golang-bufio-reader-peek/</link>
      <guid>https://www.gagahappy.com/golang-bufio-reader-peek/</guid>
      <pubDate>Tue, 08 Jun 2021 07:03:58 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt; &lt;code&gt;bufio.Peek(n)&lt;/code&gt;返回前N个未读字节 ，不会更改已读计数的值。在方法调用后，要查看返回参数&lt;code&gt;error&lt;/code&gt;是否为nil，以确保操作满足要求&lt;/p&gt;
&lt;figure class=&quot;highlight</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p> <code>bufio.Peek(n)</code>返回前N个未读字节 ，不会更改已读计数的值。在方法调用后，要查看返回参数<code>error</code>是否为nil，以确保操作满足要求</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">Peek</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrNegativeCount</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.lastByte = <span class="number">-1</span></span><br><span class="line">b.lastRuneSize = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当未读字节数小于n，且缓冲区不满(b.w-b.r &lt; len(b.buf))，</span></span><br><span class="line"><span class="comment">// 即缓冲区中从头到尾必须都是未读字节才算是缓冲区已经满</span></span><br><span class="line"><span class="comment">// 且 b.err 为nil，这三者都满足时，开始调用b.fill()填充缓冲区</span></span><br><span class="line"><span class="comment">// fill()方法会把未读数据移动到缓冲区头部，并把后面空出来的部分写满</span></span><br><span class="line"><span class="comment">// for 保证了至少可以把缓冲区填满</span></span><br><span class="line"><span class="keyword">for</span> b.w-b.r &lt; n &amp;&amp; b.w-b.r &lt; <span class="built_in">len</span>(b.buf) &amp;&amp; b.err == <span class="literal">nil</span> &#123;</span><br><span class="line">b.fill() <span class="comment">// b.w-b.r &lt; len(b.buf) =&gt; buffer is not full</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当要读取的字节数大于缓冲区长度时，返回所有未读节字，并附带错误信息</span></span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="built_in">len</span>(b.buf) &#123;</span><br><span class="line"><span class="keyword">return</span> b.buf[b.r:b.w], ErrBufferFull</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 &lt;= n &lt;= len(b.buf)</span></span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="comment">// 当要读取的字节数大于所有未读节字数时，返回所有未读节字，并附带错误信息</span></span><br><span class="line"><span class="keyword">if</span> avail := b.w - b.r; avail &lt; n &#123;</span><br><span class="line"><span class="comment">// not enough data in buffer</span></span><br><span class="line">n = avail</span><br><span class="line">err = b.readErr()</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">err = ErrBufferFull</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当 n 小于 未读字节数时，程序直接跳到这里</span></span><br><span class="line"><span class="keyword">return</span> b.buf[b.r : b.r+n], err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/golang/">golang</category>
      
      
      <comments>https://www.gagahappy.com/golang-bufio-reader-peek/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 语言 对指针类型接收者本身赋值</title>
      <link>https://www.gagahappy.com/golang-assign_receiver_of_ptr/</link>
      <guid>https://www.gagahappy.com/golang-assign_receiver_of_ptr/</guid>
      <pubDate>Mon, 07 Jun 2021 14:50:29 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;code&gt;r&lt;/code&gt; 是指针类型接收者，可以对其进行解引赋值。结构体的&lt;code&gt;0值&lt;/code&gt;不是&lt;code&gt;nil&lt;/code&gt;，而是其各个成员的&lt;code&gt;0值&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><code>r</code> 是指针类型接收者，可以对其进行解引赋值。结构体的<code>0值</code>不是<code>nil</code>，而是其各个成员的<code>0值</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">newReader()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> reader <span class="keyword">struct</span> &#123;</span><br><span class="line">buf  []<span class="keyword">byte</span></span><br><span class="line">r, w <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newReader</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := <span class="built_in">new</span>(reader)</span><br><span class="line">fmt.Println(r) <span class="comment">// &amp;&#123;[] 0 0&#125;</span></span><br><span class="line">r.reset(<span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">5</span>))</span><br><span class="line">fmt.Println(r) <span class="comment">// &amp;&#123;[0 0 0 0 0] -1 -1&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *reader)</span> <span class="title">reset</span><span class="params">(buf []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">*r = reader&#123;buf: buf, r: <span class="number">-1</span>, w: <span class="number">-1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/golang/">golang</category>
      
      
      <comments>https://www.gagahappy.com/golang-assign_receiver_of_ptr/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
