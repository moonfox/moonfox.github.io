<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>睡月花儿</title>
    <link>https://www.gagahappy.com/</link>
    
    <image>
      <url>https://www.gagahappy.com/icon.png</url>
      <title>睡月花儿</title>
      <link>https://www.gagahappy.com/</link>
    </image>
    
    <atom:link href="https://www.gagahappy.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>后端, 操作系统, 互联网, 程序开发, Linux, 数据库, MySql, Golang, Ruby</description>
    <pubDate>Fri, 23 Jul 2021 06:13:38 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>go 语言 性能测试函数中的计时器</title>
      <link>https://www.gagahappy.com/golang-test-benchmark-timer/</link>
      <guid>https://www.gagahappy.com/golang-test-benchmark-timer/</guid>
      <pubDate>Mon, 19 Jul 2021 23:41:47 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;计时器&quot;&gt;&lt;a href=&quot;#计时器&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h1><p>用来记录性能测试函数在每次运行时消耗的时间，同时它也记录了此次运行对内存分配的字节数和分配的次数。与之相关的有三个方法<code>StartTimer</code>、<code>StopTimer</code>和<code>ResetTimer</code></p><p>运行go test 时就用到了计时器，命令会启用这个函数的计时器，当函数执行完成，停止计时器，记录下此次的运行时间，然后与默认执行时间上限(默认为1秒)做比较，如果没有超过，则增大<code>b.N</code>的值，再次执行该函数，如此反复，直到函数的运行时间大于或等于执行时间上限，从而得到<code>b.N</code>的值，即函数的最大执行次数及对应的时间，从而得出最终的测试结果</p><p>通过对 StartTimer、StopTimer的调用，我们可以在测试中去除那些本不应该计入测试时间的代码的执行时间，比如一些测试前的准备代码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BenchmarkGetPrimes</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 模拟某个耗时但与被测程序关系不大的操作</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">)</span>max <span class="token operator">:=</span> <span class="token number">10000</span>b<span class="token punctuation">.</span><span class="token function">StartTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token function">GetPrimes</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>time.Sleep</code>用来模拟得到<code>max</code>的值所要进行的耗时操作，而我们要测试的是<code>GetPrimes()</code>的性能，不应计入计算<code>max</code>值所用的时间，所以要把开始时间设置在得到<code>max</code>之后。</p><p>通过 <code>b.StopTimer()</code> 与 <code>b.StartTimer()</code>的配合使用，就可以去除任何一段代码的执行时间，<code>b.ResetTimer()</code>是去除它之前代码的执行时间。通过对计时器的调用，可以让测试函数的执行时间更加准确。</p>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/golang/">golang</category>
      
      
      <comments>https://www.gagahappy.com/golang-test-benchmark-timer/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GitHub Actions Workflows 部署 Hexo</title>
      <link>https://www.gagahappy.com/github-actions-workflows-hexo/</link>
      <guid>https://www.gagahappy.com/github-actions-workflows-hexo/</guid>
      <pubDate>Wed, 14 Jul 2021 15:04:55 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;Github-Action&quot;&gt;&lt;a href=&quot;#Github-Action&quot; class=&quot;headerlink&quot; title=&quot;Github Action&quot;&gt;&lt;/a&gt;Github Action&lt;/h1&gt;&lt;p&gt;是Github 提供的免费可持续集成服务，在</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h1><p>是Github 提供的免费可持续集成服务，在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。 可以发现、创建和共享操作以执行任何作业（包括 CI/CD），并将操作合并到完全自定义的工作流程中。</p><p>GitHub Actions 简单易用，在仓库根目录下建立<code>.github/workflows</code>文件夹，把workflows工作流文件(<code>YAML</code>)放到这个目录下，就可以使用Github Action服务了</p><h1 id="workflows-文件"><a href="#workflows-文件" class="headerlink" title="workflows 文件"></a>workflows 文件</h1><p>由多个job组合而成，其指定了持续集成要完成的工作，每个工作流文件代表着一个持续集成工程</p><ul><li>每个<code>workflow</code>由多个<code>job</code>组成，每个<code>job</code>就是你指定的任务</li><li>每个<code>job</code>由多个<code>step</code>组成，每个<code>step</code>代表任务的具体步骤</li><li>每个<code>step</code>由多个<code>action</code>组成，代表具体要执行的指令，<code>actoin</code> 是<code>workflows</code>中的最小单位</li></ul><p><img src="//img.gagahappy.cn/blog/2021/07/github-actions-workflows-hexo.jpg_b1" alt="GitHub Actions Workflows" title="GitHub Actions Workflows"></p><h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><p>GitHub提供了大量方便的工具，使你可以轻松的完成各种任务。比如克隆仓库并检出，向仓库提交内容，安装各种语言环境，同步文件等等，都有对应的工具，它们就是 Action，只需要调用它们就可以了，几乎不用写任何命令，你需要的在<a href="https://github.com/marketplace?type=actions">Action市场</a>几乎全部可以找到。如<code> actions/checkout</code>是用来checout仓库的，<code>actions</code>表示这个工具是官方的，如果是其它名称，则表示是第三方提供的</p><h1 id="Hexo-发布到-Github-Pages-及-Ailyun"><a href="#Hexo-发布到-Github-Pages-及-Ailyun" class="headerlink" title="Hexo 发布到  Github Pages  及  Ailyun"></a>Hexo 发布到  Github Pages  及  Ailyun</h1><p>没有使用 GitHub Actions 的发布流程</p><ol><li><code>push</code></li><li>生成静态页：Hexo或hugo，Jekyll等静态博客生成器</li><li><code>push</code>静态页，在 <code>github pages</code>上完成发布</li><li>登录远程服务器，拉取静态页，在自己的站点完成发布</li></ol><p>使用 GitHub Actions 的发布流程</p><ol><li><code>push</code></li></ol><p>后面的工作完全自动化完成</p><ul><li>你不需要在你的本机上安装Hexo等静态站点生成器运行环境</li><li>文章的Build的工作在GitHub 的 <code>work runner</code>中完成，不需要占用的你电脑的资源</li><li>在GitHub 上构建速度快，软硬件兼容性问题也少</li><li>可以随时随地的部署：比如你发布后发现有个错别字要改，那么你用手机登录Github，直接在页面上修改，提交后就会触发部署，甚至都不需要打开电脑，方便快捷。</li></ul><h2 id="建立SSH密钥对"><a href="#建立SSH密钥对" class="headerlink" title="建立SSH密钥对"></a>建立SSH密钥对</h2><p>博客涉及到三个仓库：</p><ul><li>Hexo.git，用来存放Hexo项目和文章</li><li>next.git博客主题</li><li>gagahappy.github.io 用来存放发布的HTML页，设置为 Github Pages</li></ul><p>为什么会用到密钥对</p><ul><li><p>Aliyun服务器：构建过程中要远程登录到Aliyun服务器，要用密钥进行身份验证，需要用到密钥对</p></li><li><p>Github Pages：Github的建议是把源文件即Hexo.git放到master分支，把gagahappy.github.io放到gh-pages分支。但Github Pages必须是公开仓库才可以发布，这样就让存放源文件的Hexo.git也可以被访问，这显然是不安全的，所以没有把这两个仓库放在一起，那么对gagahappy.github.io进行发布就需要使用密钥对，才能对仓库进行操作。如果你遵循了Github的建议，那这么在发布Github pages时就不用设置密钥对了。</p></li></ul><p>生成密钥对</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -b <span class="token number">4096</span> -C <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> config user.email<span class="token variable">)</span></span>"</span> -f gh-pages -N <span class="token string">""</span><span class="token comment"># You will get 2 files:</span><span class="token comment">#   gh-pages.pub (public key)</span><span class="token comment">#   gh-pages     (private key)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>把<code>gh-pages.pub</code>中的内容添加到远程服务器的<code>~/.ssh/authorized_keys</code>中或把文件上传到<code>~/.ssh/</code>目录，执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> gh-pages.pub <span class="token operator">>></span> authorized_keys<span class="token function">chmod</span> <span class="token number">600</span> -R ~/.ssh <span class="token comment"># 设置~/ssh目录权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="设置-github-Secrets"><a href="#设置-github-Secrets" class="headerlink" title="设置 github Secrets"></a>设置 github Secrets</h2><p>Secrets 是用来存放敏感信息的，如数据库的密码，用户名，密钥，等信息，不会让这些信息在日志输出中暴露出来，会以星号(*)代替这些敏感信息。</p><p>在Hexo.git仓库的首页点击 <code>settings</code>，在左侧找到<code>Secrets</code>，点击右上<code>New repository secret </code>，<code>name</code>填写<code>ACTIONS_DEPLOY_KEY</code> ，<code>value</code>填写密钥<code>gh-pages</code>的内容， 点击<code>Add secret</code>，这样就创建了一个<code>secret</code>。之后可以用这个<code>secret</code>操作 gagahappy.github.io 仓库。</p><p>你还可以创建其它的<code>secret</code>，比如MySQL连接的密码，可以新建一个名称为<code>mysql_passwd</code>，内容为MySQL密码的<code>Secret</code>。更多信息可以查看官方 <a href="https://docs.github.com/en/actions/reference/encrypted-secrets">Secrets 帮助</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># secret 在日志中使用 * 号输出敏感信息</span>SOURCE: public/REMOTE_HOST: ***REMOTE_USER: ***TARGET: ***SSH_PRIVATE_KEY: ***<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置-Deploy-keys"><a href="#设置-Deploy-keys" class="headerlink" title="设置 Deploy keys"></a>设置 Deploy keys</h2><p>打开<code>gagahappy.github.io</code>仓库，在仓库的首页点击 <code>settings</code>，在左侧找到<code>Deploy keys</code>，把<code>gh-pages.pub</code>的内容复制进去，勾选下面的<code>Allow write access</code>，点击<code>Add Key</code>，这样在之后的部署过程中，Hexo.git仓库所在的<code>runner</code>就可以通过<code>secrets.ACTIONS_DEPLOY_KEY</code>对其进行操作了。</p><h2 id="编写工作流文件"><a href="#编写工作流文件" class="headerlink" title="编写工作流文件"></a>编写工作流文件</h2><p>在Hexo.git项目根目录下建立<code>.github/wrokflows</code>文件夹，在这个文件夹下创建以<code>yml</code>结尾的文件<code>build.yml</code>。每当你<code>push</code>到github后，github会自动寻找仓库根目录下的<code>.github/wrokflows</code>中扩展名为<code>yml</code>的所文件，运行其中的指令，完成自动部署。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p .github/workflows<span class="token function">touch</span> .github/workflows/build.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要持续集成完成的工作有</p><ol><li>Checkout <code>hexo.git</code>中的内容</li><li>Checkout <code>next.git</code>主题内容到 theme目录</li><li>安装 <code>node.js</code>环境</li><li>安装Hexo</li><li>使用Hexo生成静态页面</li><li>发布静态页面到 <code>gagahappy.github.io</code></li><li>同步静态页到Aliyun服务器</li></ol><p>把以上内容翻译为要执行的配置命令就是</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>master<span class="token punctuation">]</span> <span class="token comment"># 在master分支push时触发部署</span>    <span class="token key atrule">paths-ignore</span><span class="token punctuation">:</span> <span class="token comment"># 以下文件的变更不触发部署</span>      <span class="token punctuation">-</span> README.md  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span><span class="token key atrule">env</span><span class="token punctuation">:</span> <span class="token comment"># 统一设置环境变量</span>  <span class="token key atrule">GIT_USER</span><span class="token punctuation">:</span> git  <span class="token key atrule">GIT_EMAIL</span><span class="token punctuation">:</span> email@example.com  <span class="token key atrule">THEME_REPO</span><span class="token punctuation">:</span> git/next <span class="token comment"># 你使用的主题仓库地址</span>  <span class="token key atrule">THEME_BRANCH</span><span class="token punctuation">:</span> master  <span class="token key atrule">DEPLOY_REPO</span><span class="token punctuation">:</span> git/gagahappy.github.io <span class="token comment"># 你用来发布github pages的仓库地址</span>  <span class="token key atrule">DEPLOY_BRANCH</span><span class="token punctuation">:</span> master<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span> <span class="token comment"># job_id，其它job可以引用，比如两个job有先后顺序</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Build Github Page And Deploy On Aliyun <span class="token comment"># job名称</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest <span class="token comment"># 构建使用的系统，支持 linux/mac/windows</span>    <span class="token key atrule">timeout-minutes</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment"># job超时时间，超过后job会被停止运行</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span> <span class="token comment"># 一个job由多个 step 组成，本博的由7个step组成</span>    <span class="token comment"># 1. Checkout hexo.git 中的内容</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout Hexo repo      <span class="token comment"># 检出项目，如果不指定名称，默认使用运行Github Action 的仓库，即hexo.git</span>        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2    <span class="token comment"># 2. Checkout next.git 主题内容到 theme目录</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout Theme repo      <span class="token comment"># actions/checkout 就是Acton工具，实现checkout项目，每个action也是一个git仓库</span>      <span class="token comment"># 可以直接通过 github.com/工具名称进行访问，即github.com/actions/checkout</span>        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">repository</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.THEME_REPO <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># 要checkout的仓库地址</span>          <span class="token key atrule">ref</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.THEME_BRANCH <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> themes/next <span class="token comment"># 要checkout到的路径</span>    <span class="token comment"># 3. 安装 node.js 环境</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v2 <span class="token comment"># 使用actions/setup-node安装nodejs</span>        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 4. 安装Heox</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Hexo        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span> <span class="token comment"># 运行command命令</span>          npm install <span class="token punctuation">-</span>g hexo<span class="token punctuation">-</span>cli          npm install    <span class="token comment"># 5. 使用Hexo生成静态页面</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Generate Blog        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          hexo generate</span>    <span class="token comment"># 6. 发布静态页面到 gagahappy.github.io</span><span class="token comment"># 使用 peaceiris/actions-gh-pages 第三方Action工具，发布静态内容到 github pages</span><span class="token comment"># 重要:</span><span class="token comment"># 如果你的源码文件与Html文件在两个仓库，请在源码文件仓库设置</span><span class="token comment"># secrets 的 ACTIONS_DEPLOY_KEY 值为密钥内容，</span><span class="token comment"># 在html文件仓库即youname.github.io中设置 Deploy keys 的值设置为公钥内容，</span><span class="token comment"># 在构建过程中会使用密钥对youname.github.io进行操作</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy Github Page        <span class="token key atrule">uses</span><span class="token punctuation">:</span> peaceiris/actions<span class="token punctuation">-</span>gh<span class="token punctuation">-</span>pages@v3        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token comment"># 在 hexo.git 上设置的私钥</span>          <span class="token key atrule">deploy_key</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.ACTIONS_DEPLOY_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># ACTIONS_DEPLOY_KEY 不能修改</span>          <span class="token key atrule">external_repository</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.DEPLOY_REPO <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># Hexo.git 的仓库地址</span>          <span class="token key atrule">publish_branch</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.DEPLOY_BRANCH <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">publish_dir</span><span class="token punctuation">:</span> ./public <span class="token comment"># 使用Hexo/hugo等生成静态页面的目录</span>          <span class="token key atrule">user_name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.GIT_USER <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">user_email</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.GIT_EMAIL <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 7. 同步静态页到Aliyun服务器</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy Github Page on Aliyun        <span class="token key atrule">uses</span><span class="token punctuation">:</span> easingthemes/ssh<span class="token punctuation">-</span>deploy@main        <span class="token key atrule">env</span><span class="token punctuation">:</span>            <span class="token key atrule">SSH_PRIVATE_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.ACTIONS_DEPLOY_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>            <span class="token key atrule">ARGS</span><span class="token punctuation">:</span> <span class="token string">"-rltgoDzvO --delete"</span>            <span class="token key atrule">SOURCE</span><span class="token punctuation">:</span> <span class="token string">"public/"</span> <span class="token comment"># 使用Hexo/hugo等生成静态页面的目录</span>            <span class="token key atrule">REMOTE_HOST</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.REMOTE_HOST <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>            <span class="token key atrule">REMOTE_USER</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.REMOTE_USER <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>            <span class="token key atrule">TARGET</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.REMOTE_TARGET <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以点击仓库主页上的<code>Actions</code>，查看正在运行的<code>workflows</code>，里面有详细的日志信息</p><p><img src="//img.gagahappy.cn/blog/2021/07/github-actions-workflows-hexo-2.png_b1" alt="GitHub Actions Workflows" title="GitHub Actions Workflows"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>GitHub <a href="https://github.com/marketplace?type=actions">官方市场</a></li><li><a href="https://github.com/actions">https://github.com/actions</a></li><li>Action <a href="https://github.com/sdras/awesome-actions">awesome actions</a> 仓库</li><li><a href="https://help.github.com/en/articles/about-actions">https://help.github.com/en/articles/about-actions</a></li><li><a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions">https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions</a></li><li><a href="https://github.com/peaceiris/actions-gh-pages">https://github.com/peaceiris/actions-gh-pages</a></li><li><a href="https://docs.github.com/en/actions/reference/encrypted-secrets">https://docs.github.com/en/actions/reference/encrypted-secrets</a></li><li><a href="https://docs.github.com/cn/actions">https://docs.github.com/cn/actions</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/ci/">ci</category>
      
      
      <comments>https://www.gagahappy.com/github-actions-workflows-hexo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go 语言 test 测试工具的标记 flag</title>
      <link>https://www.gagahappy.com/golang-test-flag-cpu-count-parallel/</link>
      <guid>https://www.gagahappy.com/golang-test-flag-cpu-count-parallel/</guid>
      <pubDate>Sun, 11 Jul 2021 17:16:54 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;cpu-标记&quot;&gt;&lt;a href=&quot;#cpu-标记&quot; class=&quot;headerlink&quot; title=&quot;cpu 标记&quot;&gt;&lt;/a&gt;cpu</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="cpu-标记"><a href="#cpu-标记" class="headerlink" title="cpu 标记"></a>cpu 标记</h1><p>用来设置运行时，P的最大数量，即<code>GOMAXPROCS</code>的值。可以设置一组值，在运行测试时，P被设置为不同的值分别运行测试函数。</p><p>最大P数量代表着 go 运行时系统同时运行goroutine的能力，可以被视为最大逻辑CPU的数量，在默认情况下，最大 P 数量就等于当前计算机 CPU 核心的实际数量，最大P可以大于或小于实际CPU的核心数量。</p><p>通过设置<code>-cpu</code>的值，就可以来模拟程序在不同CPU数量下的表现。设置<code>-cpu=2,4,8</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -cpu<span class="token operator">=</span><span class="token number">2,4</span>,8 -bench<span class="token operator">=</span>. gott/hellogoos: darwingoarch: amd64pkg: gott/helloBenchmarkHello-2         <span class="token number">5081475</span>               <span class="token number">228.6</span> ns/opBenchmarkHello-4         <span class="token number">5190867</span>               <span class="token number">215.8</span> ns/opBenchmarkHello-8         <span class="token number">5256798</span>               <span class="token number">212.6</span> ns/opPASSok      gott/hello      <span class="token number">4</span>.129s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>性能测试函数<code>BenchmarkHello</code>被执行了3次，最大P数量分别为<code>2,4,8</code></p><p>如果没有指定<code>-cpu</code>参数，测试运行时使用默认的最大P的数量，这个数量就等于当前CPU实际的核心数(比如你的CPU是4核，那么这个数量就是4)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -bench<span class="token operator">=</span>.  gott/hellogoos: darwingoarch: amd64pkg: gott/helloBenchmarkHello-4         <span class="token number">4670545</span>               <span class="token number">234.7</span> ns/opPASSok      gott/hello      <span class="token number">1</span>.381s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>BenchmarkHello-4 </code>表明默认P的值为4，即cpu是4核</p><h1 id="count-标记"><a href="#count-标记" class="headerlink" title="count 标记"></a>count 标记</h1><p>设置重复执行测试函数的次数</p><p>性能函数总的执行次数=<code>-cpu</code>标记的值中正整数的个数 x <code>-count</code>标记的值 x 探索式执行中测试函数的实际执行次数=2 * 2 * 5 =20</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -count<span class="token operator">=</span><span class="token number">2</span> -bench<span class="token operator">=</span>. -cpu<span class="token operator">=</span><span class="token number">2,4</span>  gott/hellogoos: darwingoarch: amd64pkg: gott/helloBenchmarkHello-2         <span class="token number">5184015</span>               <span class="token number">224.1</span> ns/op--- BENCH: BenchmarkHello-2    hello_test.go:30: NNNNN: <span class="token number">1</span>    hello_test.go:30: NNNNN: <span class="token number">100</span>    hello_test.go:30: NNNNN: <span class="token number">10000</span>    hello_test.go:30: NNNNN: <span class="token number">1000000</span>    hello_test.go:30: NNNNN: <span class="token number">5184015</span>BenchmarkHello-2         <span class="token number">5676196</span>               <span class="token number">214.5</span> ns/op--- BENCH: BenchmarkHello-2    hello_test.go:30: NNNNN: <span class="token number">1</span>    hello_test.go:30: NNNNN: <span class="token number">100</span>    hello_test.go:30: NNNNN: <span class="token number">10000</span>    hello_test.go:30: NNNNN: <span class="token number">1000000</span>    hello_test.go:30: NNNNN: <span class="token number">4618954</span>    hello_test.go:30: NNNNN: <span class="token number">5676196</span>BenchmarkHello-4         <span class="token number">5304111</span>               <span class="token number">213.8</span> ns/op--- BENCH: BenchmarkHello-4    hello_test.go:30: NNNNN: <span class="token number">1</span>    hello_test.go:30: NNNNN: <span class="token number">100</span>    hello_test.go:30: NNNNN: <span class="token number">10000</span>    hello_test.go:30: NNNNN: <span class="token number">1000000</span>    hello_test.go:30: NNNNN: <span class="token number">5304111</span>BenchmarkHello-4         <span class="token number">5286376</span>               <span class="token number">212.4</span> ns/op--- BENCH: BenchmarkHello-4    hello_test.go:30: NNNNN: <span class="token number">1</span>    hello_test.go:30: NNNNN: <span class="token number">100</span>    hello_test.go:30: NNNNN: <span class="token number">10000</span>    hello_test.go:30: NNNNN: <span class="token number">1000000</span>    hello_test.go:30: NNNNN: <span class="token number">5286376</span>PASSok      gott/hello      <span class="token number">6</span>.601s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>功能函数总的执行次数=<code>-cpu</code>标记的值中正整数的个数 x <code>-count</code>标记的值=3 x 2 = 6</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v -count<span class="token operator">=</span><span class="token number">2</span>  -cpu<span class="token operator">=</span><span class="token number">2,4</span>,8  gott/hello<span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello    hello_test.go:17: number of runtime.GOMAXPROCS: <span class="token number">2</span><span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello    hello_test.go:17: number of runtime.GOMAXPROCS: <span class="token number">2</span><span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello    hello_test.go:17: number of runtime.GOMAXPROCS: <span class="token number">4</span><span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello    hello_test.go:17: number of runtime.GOMAXPROCS: <span class="token number">4</span><span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello    hello_test.go:17: number of runtime.GOMAXPROCS: <span class="token number">8</span><span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello    hello_test.go:17: number of runtime.GOMAXPROCS: <span class="token number">8</span>ok      gott/hello      <span class="token number">0</span>.009s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于功能测试，并不需要重复的执行多次，只需要执行一次即可，所以可以把<code>-cpu</code>的数值设置为1，<code>-count</code>的值不用设置，使用默认值为1就可以。功能测试关注的重点是验证逻辑是否正确，而不是程序的性能</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v   -cpu<span class="token operator">=</span><span class="token number">1</span> gott/hello<span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello    hello_test.go:17: number of runtime.GOMAXPROCS: <span class="token number">1</span>--- PASS: TestHello <span class="token punctuation">(</span><span class="token number">0</span>.00s<span class="token punctuation">)</span>PASSok      gott/hello      <span class="token number">0</span>.008s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Parallel-标记"><a href="#Parallel-标记" class="headerlink" title="Parallel 标记"></a>Parallel 标记</h1><p><code>-parallel</code>标记可以指定同时运行测试用例的最大并发执行数，但仅适用于单个二进制测试文件，通过修改<code>GOMAXPROCS</code>的值实现，该标记的默认值是测试运行时的最大 P 数量。</p><p>可以通过在测试函数中添加<code>t.Parallel()</code>调用，以同时运行多个功能测试。默认情况下 go test 在运行测试时，为了加快测试速度，package 是被并行运行的，但每个包中的功能测试用例是被串行执行的。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestParallelPrintHello</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"==========Hello=========="</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">TestParallelPrintWorld</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"number of runtime.GOMAXPROCS:"</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"==========World=========="</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>t.Parallel()</code>指定需要并行执行的测试，在测试结果中可以看到TestParallelPrintWorld与TestParallelPrintHello交替输出，说明这两个测试函数是并行执行的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v -parallel<span class="token operator">=</span><span class="token number">8</span> gott/hello<span class="token operator">==</span><span class="token operator">=</span> RUN   TestParallelPrintHello<span class="token operator">==</span><span class="token operator">=</span> PAUSE TestParallelPrintHello<span class="token operator">==</span><span class="token operator">=</span> RUN   TestParallelPrintWorld<span class="token operator">==</span><span class="token operator">=</span> PAUSE TestParallelPrintWorld<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld    hello_test.go:43: number of runtime.GOMAXPROCS: <span class="token number">4</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>--- PASS: TestParallelPrintWorld <span class="token punctuation">(</span><span class="token number">1</span>.02s<span class="token punctuation">)</span>--- PASS: TestParallelPrintHello <span class="token punctuation">(</span><span class="token number">1</span>.02s<span class="token punctuation">)</span>PASSok      gott/hello      <span class="token number">1</span>.026s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试结果中<code>runtime.GOMAXPROCS: 4  </code>的值为4，并不是指定的<code>8</code>，说明<code>-parallel</code>标记并没有生成，因为测试运行的不是二进制文件，此时，即使不指定<code>-parallel</code>也是可以的，如果想让更多的测试用例同时运行，可以在运行<code>go test</code>时，指定<code>-p</code>参数，运行更多的P，来同时执行更多的测试用例，比如设置p的值为4，让同时并行执行的最大并发数为4</li><li>使用<code>t.Parallel()</code>后，输出的信息多了<code>PAUSE</code>和<code>CONT</code>字段</li></ul><p>如果加入<code>-count=2</code>标记，对于测试用例来说，此时的并发不会是2个count之间的并发，这两个count也是串行执行的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v -count<span class="token operator">=</span><span class="token number">2</span>  gott/hello<span class="token comment"># 这里是第一遍count</span><span class="token operator">==</span><span class="token operator">=</span> RUN   TestParallelPrintHello<span class="token operator">==</span><span class="token operator">=</span> PAUSE TestParallelPrintHello<span class="token operator">==</span><span class="token operator">=</span> RUN   TestParallelPrintWorld<span class="token operator">==</span><span class="token operator">=</span> PAUSE TestParallelPrintWorld<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld    hello_test.go:43: number of runtime.GOMAXPROCS: <span class="token number">4</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>--- PASS: TestParallelPrintWorld <span class="token punctuation">(</span><span class="token number">1</span>.02s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>--- PASS: TestParallelPrintHello <span class="token punctuation">(</span><span class="token number">1</span>.02s<span class="token punctuation">)</span><span class="token comment"># 这里是第二遍count</span><span class="token operator">==</span><span class="token operator">=</span> RUN   TestParallelPrintHello<span class="token operator">==</span><span class="token operator">=</span> PAUSE TestParallelPrintHello<span class="token operator">==</span><span class="token operator">=</span> RUN   TestParallelPrintWorld<span class="token operator">==</span><span class="token operator">=</span> PAUSE TestParallelPrintWorld<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello<span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld    hello_test.go:43: number of runtime.GOMAXPROCS: <span class="token number">4</span>    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintWorld    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>    hello_test.go:46: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>World<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> CONT  TestParallelPrintHello    hello_test.go:36: <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Hello<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>--- PASS: TestParallelPrintWorld <span class="token punctuation">(</span><span class="token number">1</span>.01s<span class="token punctuation">)</span>--- PASS: TestParallelPrintHello <span class="token punctuation">(</span><span class="token number">1</span>.01s<span class="token punctuation">)</span>PASSok      gott/hello      <span class="token number">2</span>.036s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="源码文件"><a href="#源码文件" class="headerlink" title="源码文件"></a>源码文件</h1><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// hello.go</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"max"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span><span class="token string">"hello "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// hello_test.go</span><span class="token keyword">func</span> <span class="token function">TestHello</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>name <span class="token operator">:=</span> <span class="token string">"Max"</span>expected <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"hello %s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>greeting <span class="token operator">:=</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">if</span> greeting <span class="token operator">!=</span> expected <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"hello(%s) = %s, expected = %s"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> greeting<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"number of runtime.GOMAXPROCS:"</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">TestPrint</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"just Print"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">BenchmarkHello</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"Max"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>b<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"NNNNN:"</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>N<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">TestParallelPrintHello</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"==========Hello=========="</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">TestParallelPrintWorld</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"number of runtime.GOMAXPROCS:"</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"==========World=========="</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>可以通过运行<code>runtime.GOMAXPROCS(0)</code>获得运行时的最大P的数量</li><li>在功能测试中，无法避免依赖一些外部环境，比如数据库的连接，第三方接口的调用，应该对这些外部环境进行仿造(mock)，从而得到一个纯净的测试环境</li><li><code>go help testflag  </code>查看 flag 帮助文件</li></ul>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/golang/">golang</category>
      
      
      <comments>https://www.gagahappy.com/golang-test-flag-cpu-count-parallel/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go 语言 基准测试 结果解读</title>
      <link>https://www.gagahappy.com/golang-test-benchmark-result-introducing/</link>
      <guid>https://www.gagahappy.com/golang-test-benchmark-result-introducing/</guid>
      <pubDate>Thu, 08 Jul 2021 15:16:54 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;基准测试&quot;&gt;&lt;a href=&quot;#基准测试&quot; class=&quot;headerlink&quot; title=&quot;基准测试&quot;&gt;&lt;/a&gt;基准测试&lt;/h1&gt;&lt;p&gt;是测量一个程序在固定工作负载下的性能，使用 &lt;code&gt;-bench&lt;/code&gt;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h1><p>是测量一个程序在固定工作负载下的性能，使用 <code>-bench</code> 标记可以对代码进行基准测试</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> test <span class="token operator">-</span>v <span class="token operator">-</span>bench<span class="token operator">=</span><span class="token punctuation">.</span> <span class="token operator">-</span>run<span class="token operator">=</span><span class="token operator">^</span>$ gott<span class="token operator">/</span>hellogoos<span class="token punctuation">:</span> darwingoarch<span class="token punctuation">:</span> amd64pkg<span class="token punctuation">:</span> gott<span class="token operator">/</span>helloBenchmarkHello<span class="token operator">-</span><span class="token number">4</span>         <span class="token number">4964053</span>               <span class="token number">228.5</span> ns<span class="token operator">/</span>opPASSok      gott<span class="token operator">/</span>hello      <span class="token number">2.386</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>.</code>表示执行代码包中所有的基准测试用例(前缀为<code>Benchmark</code>的方法)，由于功能测试也会被运行，但同时运行功能测试会影响性能测试的结果，通过加入<code>-run=^$</code>，来禁止功能测试与性能测试一起执行。<code>^$</code>意味着：只执行名称为空的功能测试函数，即不执行任何测试函数。PS：在MacOS上要对<code>^</code>进行转义<code>-run=\^$</code>，不然无法执行</p></li><li><p>指定运行某个基准测试</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> test <span class="token operator">-</span>v <span class="token operator">-</span>bench<span class="token operator">=</span>BenchmarkHello gott<span class="token operator">/</span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>功能测试也会一起运行。。。。。。</p></li></ul><h1 id="b-N值的确定"><a href="#b-N值的确定" class="headerlink" title="b.N值的确定"></a><code>b.N</code>值的确定</h1><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BenchmarkHello</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"Max"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当测试开始时，<code>b.N</code>的值被设置为1，执行后如果没有超过默认执行时间上限(默认为1秒)，则加大<code>b.N</code>的值，按某种规则一直递增，直到执行时间等于或超过上限，那么就用这一次的<code>b.N</code>的值，做为测试的最终结果</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">BenchmarkHello<span class="token operator">-</span><span class="token number">4</span>         <span class="token number">4964053</span>               <span class="token number">228.5</span> ns<span class="token operator">/</span>opPASSok      gott<span class="token operator">/</span>hello      <span class="token number">2.386</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>BenchmarkHello-4</code>表示执行 BenchmarkHello 时，所用的最大P的数量为4</li><li><code>4964053</code>:  表示<code>hello()</code>方法在达到这个执行次数时，等于或超过了1秒</li><li><code>228.5 ns/op</code>： 表示每次执行<code>hello()</code>所消耗的平均执行时间</li><li><code>2.386s</code>：表示测试总共用时</li></ul><h1 id="测试总时间的计算"><a href="#测试总时间的计算" class="headerlink" title="测试总时间的计算"></a>测试总时间的计算</h1><p>既然<code>4964053</code>表示1秒或大于1秒时执行的次数，那么测试总时间用时却是<code>2.386s</code>，超出了不少，这是为什么呢</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BenchmarkHello</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"Max"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>b<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"NNNNN:"</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>N<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在测试中加入<code>b.Log(&quot;NNNNN:&quot;, b.N)</code>，再执行基准测试，并加入<code>-v</code>，打印测试中的日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v -bench<span class="token operator">=</span>. -run<span class="token operator">=</span>^$ gott/hello<span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello    hello_test.go:15: hello Max--- PASS: TestHello <span class="token punctuation">(</span><span class="token number">0</span>.00s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">=</span> RUN   TestPrint    hello_test.go:19: just Print--- PASS: TestPrint <span class="token punctuation">(</span><span class="token number">0</span>.00s<span class="token punctuation">)</span>goos: darwingoarch: amd64pkg: gott/helloBenchmarkHello    hello_test.go:26: NNNNN: <span class="token number">1</span>    hello_test.go:26: NNNNN: <span class="token number">100</span>    hello_test.go:26: NNNNN: <span class="token number">10000</span>    hello_test.go:26: NNNNN: <span class="token number">1000000</span>    hello_test.go:26: NNNNN: <span class="token number">3541896</span>    hello_test.go:26: NNNNN: <span class="token number">4832275</span>BenchmarkHello-4         <span class="token number">4832275</span>               <span class="token number">236.8</span> ns/opPASSok      gott/hello      <span class="token number">2</span>.395s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<code>b.Log(&quot;NNNNN:&quot;, b.N)</code>被执行了6次，这证明了之前提到的，测试会对<code>b.N</code>依次递增，直到执行时间等于或超过上限。在对<code>BenchmarkHello()</code>运行基准测试时，N值依次按<code>1,100,10000,1000000,3541896,4832275</code>递增，直到执行次数为<code>4832275</code>时，执行时间等于或超过了上限。</p><p>同时也说明<code>BenchmarkHello()</code>一共被调用了6次，每次运行<code>BenchmarkHello()</code>都要消耗一定的时间，所以测试总耗时为这6次调用时间之和，<code>2.395s</code>，超过了1秒</p><p>可以通过<code> -benchtime</code>标记修改默认时间上限，比如改为3秒</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v -bench<span class="token operator">=</span>. -benchtime<span class="token operator">=</span>3s -run<span class="token operator">=</span>^$ gott/hellogoos: darwingoarch: amd64pkg: gott/hellocpu: Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Core<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> i5-3317U CPU @ <span class="token number">1</span>.70GHzBenchmarkHello    hello_test.go:31: NNNNN: <span class="token number">1</span>    hello_test.go:32: /Users/ga/m/opt/go/go_root    hello_test.go:31: NNNNN: <span class="token number">100</span>    hello_test.go:32: /Users/ga/m/opt/go/go_root    hello_test.go:31: NNNNN: <span class="token number">10000</span>    hello_test.go:32: /Users/ga/m/opt/go/go_root    hello_test.go:31: NNNNN: <span class="token number">1000000</span>    hello_test.go:32: /Users/ga/m/opt/go/go_root    hello_test.go:31: NNNNN: <span class="token number">15927812</span>    hello_test.go:32: /Users/ga/m/opt/go/go_rootBenchmarkHello-4   <span class="token number">15927812</span>       <span class="token number">223.4</span> ns/opPASSok  gott/hello<span class="token number">3</span>.802s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题：是否测试总时间一定会超过1秒？答：因为要找到最大可执行次数，而在这之前肯定要进行多次尝试，所以测试总时间应该总是会超过1秒的。</p><h1 id="平均执行时间的计算"><a href="#平均执行时间的计算" class="headerlink" title="平均执行时间的计算"></a>平均执行时间的计算</h1><p>应该用，运行<code>4832275</code>时所消耗的时间 <code>t</code>，<code>t / 4832275 = 236.8 ns/op</code></p><ul><li>如果用 测试总共用时 / 最多可以执行的次数  则不等于 平均执行时间，即 <code>2.386 * (1000 ** 3) / 4832275 = 493.7 </code> 大于测试结果中的<code>236.8 ns/op</code>。</li><li>如果用 <code>1 秒 / 4832275 = 206 ns</code> ，与<code>236.8 ns/op</code>并不是很接近</li><li>如果把尝试过程中的运行次数也加入进来<code>total = 1 + 100 + 10000 + 1000000 + 3541896 + 4832275</code>，即<code>2.386 * (1000 ** 3) / 9384272 = 254.25</code>与<code>236.8 ns/op</code>接近</li><li>反推运行时间：<code>4832275 * 236.8 ns / 1000 ** 3 = 1.14s</code> ，测试结果使用了运行时间超过1秒上限时的数值</li></ul>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/golang/">golang</category>
      
      
      <comments>https://www.gagahappy.com/golang-test-benchmark-result-introducing/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go 语言 测试日志打印</title>
      <link>https://www.gagahappy.com/golang-test-log-print/</link>
      <guid>https://www.gagahappy.com/golang-test-log-print/</guid>
      <pubDate>Mon, 05 Jul 2021 15:37:07 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;缓存目录&quot;&gt;&lt;a href=&quot;#缓存目录&quot; class=&quot;headerlink&quot; title=&quot;缓存目录&quot;&gt;&lt;/a&gt;缓存目录&lt;/h1&gt;&lt;p&gt;Go</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="缓存目录"><a href="#缓存目录" class="headerlink" title="缓存目录"></a>缓存目录</h1><p>Go 总是会缓存程序构建的结果，以便在将来使用(可以加速构建速度)。当有任何变动时，缓存就会失效，构建过程会真正的被执行。被缓存的构建结果保存在<code>go env GOCACHE</code>目录中，为了防止目录中的数据越来越多，go会自动删除不经常使用的缓存文件。可以手动清除缓存结果，执行<code>go clean -cache</code>即可。</p><p><code>go test</code>命令也会把测试成功的结果缓存起来，如果测试代码和源代码没有改动，再次运行测试时，直接使用缓存的结果。当源码和测试代码有改动时，缓存结果就会失效，测试会被真正的运行。运行<code>go clean -testcache</code>可以删除测试的缓存结果，但不会删除构建结果缓存</p><h1 id="测试日志打印"><a href="#测试日志打印" class="headerlink" title="测试日志打印"></a>测试日志打印</h1><p>可以使用<code>t.Log</code>与<code>t.Logf</code>方法打印测试日志，这两个方法会在测试失败时，进行打印，在测试成功的时候，是不进行打印的。如果想在测试结果中看到所有的日志，可以使用<code>-v</code>参数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestIntroduce</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>intro <span class="token operator">:=</span> <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span>expected <span class="token operator">:=</span> <span class="token string">"Welcome to my Golang column."</span><span class="token keyword">if</span> intro <span class="token operator">!=</span> expected <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"The actual introduce %q is not the expected."</span><span class="token punctuation">,</span>intro<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 默认只在测试失败的时候，才打印日志内容</span>t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"The expected introduce is %q.\n"</span><span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试失败，显示t.Logf()中的内容</span><span class="token operator">--</span><span class="token operator">-</span> FAIL<span class="token punctuation">:</span> TestIntroduce <span class="token punctuation">(</span><span class="token number">0.00</span>s<span class="token punctuation">)</span>    demo53_test<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">41</span><span class="token punctuation">:</span> The actual introduce <span class="token string">"Welcome to my Golang column."</span> is not the expected<span class="token punctuation">.</span>    demo53_test<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">44</span><span class="token punctuation">:</span> The expected introduce is <span class="token string">"Welcome to my golang column."</span><span class="token punctuation">.</span>FAILFAILpuzzlers<span class="token operator">/</span>article20<span class="token operator">/</span>q2<span class="token number">0.013</span>sFAIL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="t-Fail-与t-FailNow"><a href="#t-Fail-与t-FailNow" class="headerlink" title="t.Fail()与t.FailNow()"></a><code>t.Fail()</code>与<code>t.FailNow()</code></h1><p><code>t.Fail()</code>令测试结果为失败，但其后的代码依然会被执行。go 语言测试用例失败的触发必须手动调用<code>t.Fail/t.FailNow/t.Errorf/t.Fatalf</code>等方法才可以，并不像其它语言支持测试断言，由断言失败触发。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestFail</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Failed."</span><span class="token punctuation">)</span> <span class="token comment">// 可以被执行到</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>t.FailNow()</code>也会令测试结果为失败，但其后的代码不再执行，不会影响其它测试用例的执行</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestFail</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Failed"</span><span class="token punctuation">)</span> <span class="token comment">// 不能被执行到</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="t-Errorf-与t-Error"><a href="#t-Errorf-与t-Error" class="headerlink" title="t.Errorf()与t.Error()"></a><code>t.Errorf()</code>与<code>t.Error()</code></h1><p>打印日志并使测试失败，等效于调用<code>t.Logf/t.Log</code>后，又调用了<code>t.Fail</code></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// t.Error 等效于在调用 t.Log 后，接着又调用了 t.Fail</span><span class="token comment">// Error is equivalent to Log followed by Fail.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>common<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintln</span><span class="token punctuation">(</span>args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Errorf is equivalent to Logf followed by Fail.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>common<span class="token punctuation">)</span> <span class="token function">Errorf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="t-Fatal与t-Fatalf方法"><a href="#t-Fatal与t-Fatalf方法" class="headerlink" title="t.Fatal与t.Fatalf方法"></a><code>t.Fatal</code>与<code>t.Fatalf</code>方法</h1><p>打印日志并使测试失败，在其后的代码不会被执行，当前测试用例立即结束，但不会影响其它测试用例，等效于调用<code>t.Logf/t.Log</code>后，又调用了<code>t.FailNow</code></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Fatal is equivalent to Log followed by FailNow.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>common<span class="token punctuation">)</span> <span class="token function">Fatal</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintln</span><span class="token punctuation">(</span>args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Fatalf is equivalent to Logf followed by FailNow.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>common<span class="token punctuation">)</span> <span class="token function">Fatalf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/golang/">golang</category>
      
      
      <comments>https://www.gagahappy.com/golang-test-log-print/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
