<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>睡月花儿</title>
    <link>https://www.gagahappy.com/</link>
    
    <image>
      <url>https://www.gagahappy.com/icon.png</url>
      <title>睡月花儿</title>
      <link>https://www.gagahappy.com/</link>
    </image>
    
    <atom:link href="https://www.gagahappy.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>后端, 操作系统, 互联网, 程序开发, Linux, 数据库, MySql, Golang, Ruby</description>
    <pubDate>Thu, 11 Aug 2022 08:05:36 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>mysql or 导致的全表扫描</title>
      <link>https://www.gagahappy.com/mysql-scan-full-by-or/</link>
      <guid>https://www.gagahappy.com/mysql-scan-full-by-or/</guid>
      <pubDate>Tue, 14 Dec 2021 13:56:15 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;or-导致的全表扫描&quot;&gt;&lt;a href=&quot;#or-导致的全表扫描&quot; class=&quot;headerlink&quot; title=&quot;or 导致的全表扫描&quot;&gt;&lt;/a&gt;or 导致的全表扫描&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-sql&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="or-导致的全表扫描"><a href="#or-导致的全表扫描" class="headerlink" title="or 导致的全表扫描"></a>or 导致的全表扫描</h1><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> id <span class="token keyword">from</span> tradelog <span class="token keyword">where</span> tradeid <span class="token operator">=</span> <span class="token string">'12'</span> <span class="token operator">or</span> operator <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+---------------+------+---------+------+--------+----------+-------------+</span><span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span>   <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+---------------+------+---------+------+--------+----------+-------------+</span><span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> tradeid       <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">389107</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+---------------+------+---------+------+--------+----------+-------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询条件中有 or 时，mysql 会分别查询每一个条件，然后再把结果合并在一起。</p><p>先对 tradeid = ‘12’ 进行判断，发现可以使用索引，再对 operator = 10 进行判断，发现不能使用索引，只好全表扫描，即然都全表扫描了，顺带也就可以判断当前记录的 tradeid 是否等于 12，就不需要在单独再搜索 tradeid 索引树了。</p><p>所以当 or 条件中出现没有索引的字段会导致使用全表扫描。如果出现的字段都有索引，mysql会尽量使用每个列的索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> id <span class="token keyword">from</span> tradelog <span class="token keyword">where</span> tradeid <span class="token operator">=</span> <span class="token string">'12'</span> <span class="token operator">or</span> id <span class="token operator">=</span><span class="token number">10</span>  <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+----------+-------------+-----------------+-----------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span>    <span class="token operator">|</span> <span class="token keyword">type</span>        <span class="token operator">|</span> possible_keys   <span class="token operator">|</span> <span class="token keyword">key</span>             <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+----------+-------------+-----------------+-----------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> tradelog <span class="token operator">|</span> index_merge <span class="token operator">|</span> <span class="token keyword">PRIMARY</span><span class="token punctuation">,</span>tradeid <span class="token operator">|</span> tradeid<span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+----------+-------------+-----------------+-----------------+</span><span class="token operator">+</span><span class="token comment">---------+------+------+----------+-------------------------------------------+</span><span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+------+------+----------+-------------------------------------------+</span><span class="token operator">|</span> <span class="token number">131</span><span class="token punctuation">,</span><span class="token number">4</span>   <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">union</span><span class="token punctuation">(</span>tradeid<span class="token punctuation">,</span><span class="token keyword">PRIMARY</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+------+------+----------+-------------------------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然条件中也有 or ，但 tradeid 和 id 都有索引，mysql 分别单独对这两个索引扫描，然后把找到的结果再合并到一起。执行计划显示 <code>type:index_merge</code> ， <code>key:tradeid,PRIMARY</code>，<code>Extra:Using union</code></p><p>同样的条件，把 or 换成 and 时是可以走索引的，因为找的是要满足所有条件的记录，那么就可以在最小的索引树先找到一条满足条件的记录，再检查这条记录是否还满足其它条件</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> id <span class="token keyword">from</span> tradelog <span class="token keyword">where</span> tradeid <span class="token operator">=</span> <span class="token string">'12'</span> <span class="token operator">and</span>  operator <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+---------------+---------+---------+-------+------+----------+-------------+</span><span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>     <span class="token operator">|</span> key_len <span class="token operator">|</span> ref   <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+---------------+---------+---------+-------+------+----------+-------------+</span><span class="token operator">|</span> ref  <span class="token operator">|</span> tradeid       <span class="token operator">|</span> tradeid <span class="token operator">|</span> <span class="token number">131</span>     <span class="token operator">|</span> const <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+---------------+---------+---------+-------+------+----------+-------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>key:tradeid  显示使用了 tradeid 索引。通过索引树先找到一条  tradeid = ‘12’的记录，再回表查询 operator 是否等于 10。</p>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/database/">数据库</category>
      
      
      <category domain="https://www.gagahappy.com/tags/mysql/">mysql</category>
      
      
      <comments>https://www.gagahappy.com/mysql-scan-full-by-or/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mysql 如何为字符串合理创建索引</title>
      <link>https://www.gagahappy.com/mysql-how-add-index-for-string/</link>
      <guid>https://www.gagahappy.com/mysql-how-add-index-for-string/</guid>
      <pubDate>Sat, 20 Nov 2021 19:21:16 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;对于一般长度的字符串，用整个字符串直接作为索引即可，但对于比较长的字符串，比如email，身份证号如果直接作为索引，会占用较大的磁盘空间&lt;/p&gt;
&lt;h1 id=&quot;前缀索引&quot;&gt;&lt;a href=&quot;#前缀索引&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>对于一般长度的字符串，用整个字符串直接作为索引即可，但对于比较长的字符串，比如email，身份证号如果直接作为索引，会占用较大的磁盘空间</p><h1 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h1><p>可以为较长的字符串设置前缀索引，缩短索引字段的长度，减少占用磁盘的空间</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> users <span class="token keyword">add</span> <span class="token keyword">index</span> index1<span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> users <span class="token keyword">add</span> <span class="token keyword">index</span> index2<span class="token punctuation">(</span>email<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>索引 index1 包含了整个字符串，而 index2 只包含了前6个字符串，比 index1 占用更少的空间。那么如何定义前缀长度呢？如果太短，索引的区分度就会不高，增加额外的扫描次数，查询效率下降，太长又不能节省空间。可以用下面的方法进行判断，选择最接近1的，同时长度最短的来作为前缀。</p><h2 id="前缀索引的长度"><a href="#前缀索引的长度" class="headerlink" title="前缀索引的长度"></a>前缀索引的长度</h2><p>首先计算出这个列上有多少个不同的值(计为total)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> email<span class="token punctuation">)</span> <span class="token keyword">as</span> total <span class="token keyword">from</span> users<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后取不同长度的前缀，计算有多少个不同的值，分别除以 total，选择最接近1的且前缀较短的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>   <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>）<span class="token operator">/</span> total <span class="token keyword">as</span> L4<span class="token punctuation">,</span>  <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>）<span class="token operator">/</span> total <span class="token keyword">as</span> L5<span class="token punctuation">,</span>  <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>）<span class="token operator">/</span> total <span class="token keyword">as</span> L6<span class="token punctuation">,</span>  <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>）<span class="token operator">/</span> total <span class="token keyword">as</span> L7<span class="token punctuation">,</span><span class="token keyword">from</span> users<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设结果为： L4 40%，L5  90%， L6 96% ，L7 96%。而你只接受大于95%的区分度，L6/L7等符合，那么选择前缀为6的最为适合。</p><h2 id="增加扫描次数"><a href="#增加扫描次数" class="headerlink" title="增加扫描次数"></a>增加扫描次数</h2><p>假设users表有如下记录，分别建立索引 index1(email)，index2(email,5)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id<span class="token punctuation">,</span>  email<span class="token punctuation">,</span>              <span class="token punctuation">,</span>username<span class="token punctuation">,</span> addersid1<span class="token punctuation">,</span> xiaoming123<span class="token variable">@xyz.com</span> <span class="token punctuation">,</span>省略id2<span class="token punctuation">,</span> xiaoming456<span class="token variable">@xyz.com</span> <span class="token punctuation">,</span>省略id3<span class="token punctuation">,</span> xiaoming789<span class="token variable">@xyz.com</span> <span class="token punctuation">,</span>省略id4<span class="token punctuation">,</span> xiaomingABC<span class="token variable">@xyz.com</span> <span class="token punctuation">,</span>省略id5<span class="token punctuation">,</span> zhanghao123<span class="token variable">@xyz.com</span>    <span class="token punctuation">,</span>省略id6<span class="token punctuation">,</span> zhanghao456<span class="token variable">@xyz.com</span>    <span class="token punctuation">,</span>省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>索引 index1的页节点数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">(</span>xiaoming123<span class="token variable">@xyz.com</span><span class="token punctuation">,</span>id1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>xiaoming456<span class="token variable">@xyz.com</span><span class="token punctuation">,</span>id2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>xiaoming789<span class="token variable">@xyz.com</span><span class="token punctuation">,</span>id3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>xiaomingABC<span class="token variable">@xyz.com</span><span class="token punctuation">,</span>id4<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>zhang123<span class="token variable">@xyz.com</span><span class="token punctuation">,</span>id5<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>zhang456<span class="token variable">@xyz.com</span><span class="token punctuation">,</span>id6<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>索引 index2的页节点数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">(</span>xiaom<span class="token punctuation">,</span>id1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>xiaom<span class="token punctuation">,</span>id2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>xiaom<span class="token punctuation">,</span>id3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>xiaom<span class="token punctuation">,</span>id4<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>zhang<span class="token punctuation">,</span>id5<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>zhang<span class="token punctuation">,</span>id6<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，前缀索引占用更少的数据空间</p><p>索引查询过程</p><p>现查询email为<code>xiaoming456@xyz.com&#39;</code>的用户信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> email<span class="token operator">=</span><span class="token string">'xiaoming456@xyz.com'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>index1索引查询过程</p><ol><li>搜索index1索引树，找到等于 <code>xiaoming456@xyz.com</code> 的记录，取出主键的值 <code>id2</code></li><li>根据主键值 id2 回表查询，把记录放入返回结果集中</li><li>再接着向右移动，发现记录不符，返回，查询结束，把结果集返回客户端</li></ol><p>index2索引查询过程</p><ol><li>搜索index2索引树，找到等于 <code>xiaom</code> 的记录(取前5位进行查询)，取出主键的值 <code>id1</code></li><li>根据主键值 id1 回表查询，发现email值不等于<code>xiaoming456@xyz.com</code></li><li>再接着向右移动，发现等于<code>xiaom</code>，取出主键的值 <code>id2</code></li><li>根据主键值 id2  回表查询，发现email值等于<code>xiaoming456@xyz.com</code>，放入返回结果集</li><li>重复以上过程，直到遇到<code>zhang</code>时，查询结束</li></ol><p>使用前缀索引 index2 一共需要查找4次，增加了扫描的次数。但如果把前缀索引设置为email(9)，也只需要查找一次，因为等于<code>xiaoming4</code>只有一条，找到后查询也结束了。</p><p>通过选择适当的前缀索引的长度，即节省空间，查询成本也不会太高</p><h2 id="覆盖索引无效"><a href="#覆盖索引无效" class="headerlink" title="覆盖索引无效"></a>覆盖索引无效</h2><p>同样是查询<code>select id, email from users where email=&#39;xiaoming456@xyz.com&#39;;</code></p><ul><li>如果在 email 上建立普通索引，在找到记录后，由于索引包含了id的值，不用回表，直接返回结果即可</li><li>如果在 email 上建立前缀索引，在找到记录后，由于索引信息不完整，即使包含了id的值，也需要回表查询是否与email的完整值相匹配</li></ul><p>这样就导致了在前缀索引上，无法使用覆盖索引对查询性能的优化</p><h1 id="Hash字段"><a href="#Hash字段" class="headerlink" title="Hash字段"></a>Hash字段</h1><p>比如对身份证进行查询，其长度为18位，直接建立索引会占用较多的空间，如果使用前缀索引只取前几位但相同的概率很大，取太长又不能节省空间，此时可以添加一个字段，用来存放身份证的 hash 值，并为这个hash字段建立索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> t <span class="token keyword">add</span> idcard_hash <span class="token keyword">int</span> <span class="token keyword">unsigned</span><span class="token punctuation">,</span> <span class="token keyword">add</span> <span class="token keyword">index</span><span class="token punctuation">(</span>idcard_hash<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>索引的长度变成了 4 个字节，就算算上hash字段本身占用的空间，也要比原来小了很多。由于hash值存在冲突，在查询时还要加上身份证字段，确保精确匹配以取到正确的记录，这样就可以即节省空间，又高效的查询了</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> idcard_hash<span class="token operator">=</span>hash_algorithm<span class="token punctuation">(</span><span class="token string">'input_id_card_string'</span><span class="token punctuation">)</span> <span class="token operator">and</span> id_card<span class="token operator">=</span><span class="token string">'input_id_card_string'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>hash字段的缺点</p><ul><li>不能进行范围查询</li><li>使用hash函数会消耗CPU</li></ul><p>这里其实还有一个思路，把身份证倒序存储，这样就不用额外再建立字段，同时可以使用前缀索引，但至少要用前8位来建立前缀索引，即8字节，其占用空间和使用hash字段就差不多了，因为是前缀索引，必定要回表查询，增加了扫描次数，查询性能也有没hash字段稳定，况且8位应该是不够的，占用空间肯定要比使用hash字段要大。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol><li>直接创建完整索引，这样可能比较占用空间</li><li>创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引</li><li>倒序存储，再创建前缀索引，用于绕过字符串本身前缀的区分度不够的问题</li><li>创建 hash 字段索引，查询性能稳定，有额外的存储和计算消耗，跟第三种方式一样，都不支持范围扫描</li></ol>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/database/">数据库</category>
      
      
      <category domain="https://www.gagahappy.com/tags/mysql/">mysql</category>
      
      
      <comments>https://www.gagahappy.com/mysql-how-add-index-for-string/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mysql 自增值规则</title>
      <link>https://www.gagahappy.com/mysql-auto-increment/</link>
      <guid>https://www.gagahappy.com/mysql-auto-increment/</guid>
      <pubDate>Mon, 15 Nov 2021 15:28:20 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;Auto-increment&quot;&gt;&lt;a href=&quot;#Auto-increment&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Auto-increment"><a href="#Auto-increment" class="headerlink" title="Auto_increment"></a>Auto_increment</h1><p>表结构如下，且假设当前系统中只有一个连接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>a<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>b<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>a<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>a<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>b<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>b<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建表时把主键id设置为<code>id int(11) NOT NULL AUTO_INCREMEN</code>，在插入数据时，如果不指定id，系统会为id自动设置值 ，并把Auto_increment的值，作为下一条记录id的值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+------+------+</span><span class="token operator">|</span> id     <span class="token operator">|</span> a    <span class="token operator">|</span> b    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+------+------+</span><span class="token operator">|</span> <span class="token number">200001</span> <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+------+------+</span><span class="token keyword">show</span> <span class="token keyword">table</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'t'</span>\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>   Index_length: <span class="token number">32768</span>      Data_free: <span class="token number">10485760</span> <span class="token keyword">Auto_increment</span>: <span class="token number">200002</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再插入时如果没有指定id，则使用200002作为其值，Auto_increment的值更新为200003</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+------+------+</span><span class="token operator">|</span> id     <span class="token operator">|</span> a    <span class="token operator">|</span> b    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+------+------+</span><span class="token operator">|</span> <span class="token number">200001</span> <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">200002</span> <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+------+------+</span><span class="token keyword">show</span> <span class="token keyword">table</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'t'</span>\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>   Index_length: <span class="token number">32768</span>      Data_free: <span class="token number">10485760</span> <span class="token keyword">Auto_increment</span>: <span class="token number">200003</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果把id=200001记录删除，然后指定id的值为200001，插入这样一条记录，那么Auto_increment的值不增长，依然为200003。同时可以看到，由于默认是主键索引排序，即使id=200001被删除后，再次插入，也排在了200002的前面</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">200001</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t<span class="token punctuation">(</span>id<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">200001</span><span class="token punctuation">,</span><span class="token number">200001</span><span class="token punctuation">,</span><span class="token number">200001</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+--------+--------+</span><span class="token operator">|</span> id     <span class="token operator">|</span> a      <span class="token operator">|</span> b      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+--------+--------+</span><span class="token operator">|</span> <span class="token number">200001</span> <span class="token operator">|</span> <span class="token number">200001</span> <span class="token operator">|</span> <span class="token number">200001</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">200002</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+--------+--------+</span><span class="token keyword">show</span> <span class="token keyword">table</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'t'</span>\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>   Index_length: <span class="token number">32768</span>      Data_free: <span class="token number">10485760</span> <span class="token keyword">Auto_increment</span>: <span class="token number">200003</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再插入一条记录也可以验证，新记录的id值为200003。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+--------+--------+</span><span class="token operator">|</span> id     <span class="token operator">|</span> a      <span class="token operator">|</span> b      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+--------+--------+</span><span class="token operator">|</span> <span class="token number">200001</span> <span class="token operator">|</span> <span class="token number">200001</span> <span class="token operator">|</span> <span class="token number">200001</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">200002</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">200003</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+--------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以手动插入一个不连续的id:200006</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t<span class="token punctuation">(</span>id<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">200006</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时 Auto_increment的值为 200007，如果插入id比它小的值，则 Auto_incrementr的值不增长，依然为 200007</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t<span class="token punctuation">(</span>id<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">200005</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+--------+--------+</span><span class="token operator">|</span> id     <span class="token operator">|</span> a      <span class="token operator">|</span> b      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+--------+--------+</span><span class="token operator">|</span> <span class="token number">200001</span> <span class="token operator">|</span> <span class="token number">200001</span> <span class="token operator">|</span> <span class="token number">200001</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">200002</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">200003</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">200005</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">200006</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+--------+--------+</span><span class="token keyword">show</span> <span class="token keyword">table</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'t'</span>\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>   Index_length: <span class="token number">32768</span>      Data_free: <span class="token number">10485760</span> <span class="token keyword">Auto_increment</span>: <span class="token number">200007</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在以上操作中，如果通过<code>show table status like</code>查看<code>Auto_increment</code>的值没有变化，运行<code>analyze table t</code>手动更新表的统计信息后再查看</p>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/database/">数据库</category>
      
      
      <category domain="https://www.gagahappy.com/tags/mysql/">mysql</category>
      
      
      <comments>https://www.gagahappy.com/mysql-auto-increment/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mysql limit 的妙用</title>
      <link>https://www.gagahappy.com/mysql-update-with-limit/</link>
      <guid>https://www.gagahappy.com/mysql-update-with-limit/</guid>
      <pubDate>Sat, 04 Sep 2021 13:15:32 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;更新无索引的列，会导致全表被锁，其它线程无法更新表中的数据，如果加入了&lt;code&gt;limit N&lt;/code&gt;关键字，可以减少被锁定的行，在一定程度上可以提高并发&lt;/p&gt;
&lt;p&gt;表结构及数据如下&lt;/p&gt;
&lt;pre class=&quot;line-numbers</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>更新无索引的列，会导致全表被锁，其它线程无法更新表中的数据，如果加入了<code>limit N</code>关键字，可以减少被锁定的行，在一定程度上可以提高并发</p><p>表结构及数据如下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>t<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">null</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token boolean">null</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>ismale<span class="token punctuation">`</span> <span class="token keyword">tinyint</span> <span class="token keyword">default</span> <span class="token boolean">null</span><span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'d001'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'d003'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'d005'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'d007'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'d009'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">'d011'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+------+------+--------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> age  <span class="token operator">|</span> ismale <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+------+------+--------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> d001 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> d003 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> d005 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span> d007 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">9</span> <span class="token operator">|</span> d009 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span> d011 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+------+------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不加入limit锁全表"><a href="#不加入limit锁全表" class="headerlink" title="不加入limit锁全表"></a>不加入<code>limit</code>锁全表</h2><table><thead><tr><th>时刻</th><th>Session A</th><th>Session B</th></tr></thead><tbody><tr><td>T1</td><td>begin;</td><td></td></tr><tr><td></td><td>update t set age=31 where name=’d003’;</td><td></td></tr><tr><td>T2</td><td></td><td>Begin;</td></tr><tr><td></td><td></td><td>update t set age=31 where name=’d005’;<font color=red>(blocked)</font></td></tr><tr><td></td><td></td><td>update t set age=31 where id=5;<font color=red>(blocked)</font></td></tr><tr><td></td><td></td><td>insert into t values(2,’d002’,30,1);<font color=red>(blocked)</font></td></tr><tr><td></td><td></td><td>insert into t values(12,’d012’,30,1);<font color=red>(blocked)</font></td></tr></tbody></table><h3 id="SessionA的加锁范围"><a href="#SessionA的加锁范围" class="headerlink" title="SessionA的加锁范围"></a>SessionA的加锁范围</h3><p>主键索引<code>id</code>锁的范围是[infimum，supremum]</p><p>由于name列没有索引，<code>where name=&#39;d003&#39;</code>查询时走主键索引，全表扫描。先找到id=1的行，加<code>next-key</code>锁，发现name的值不匹配，继续向右查找，给id=3的行上锁，name匹配，返回结果给server层，然后继续向右查找直到最后一行id=11，查找过程中涉及到的行都被加了<code>next-key</code>锁(id=5,7,9,11的行)，由于事务没有提交，这些行锁没有被释放。</p><h3 id="SessionB被阻塞在哪里"><a href="#SessionB被阻塞在哪里" class="headerlink" title="SessionB被阻塞在哪里"></a>SessionB被阻塞在哪里</h3><p>更新条件 <code>where name=&#39;d005&#39;</code>，由于name列没有索引，查询时也要走主键索引。先找到id=1的行，加<code>next-key</code>锁，由于SessionA已经加了<code>next-key</code>锁，SessionB只能等待，它在此时发生了阻塞</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> t <span class="token keyword">set</span> age<span class="token operator">=</span><span class="token number">31</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'d005'</span><span class="token comment"># 被SessionA上的 id=1的行的 next-key锁阻塞</span>RECORD LOCKS space id <span class="token number">5</span> page <span class="token keyword">no</span> <span class="token number">4</span> n bits <span class="token number">80</span> <span class="token keyword">index</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">of</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>t<span class="token punctuation">`</span>trx id <span class="token number">4366</span> lock_mode X waiting <span class="token number">0</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">80000001</span><span class="token punctuation">;</span> <span class="token keyword">asc</span> <span class="token number">1</span>: len <span class="token number">6</span><span class="token punctuation">;</span> hex <span class="token number">000000000</span>d98<span class="token punctuation">;</span> <span class="token keyword">asc</span> <span class="token number">2</span>: len <span class="token number">7</span><span class="token punctuation">;</span> hex <span class="token number">81000000</span>a70110<span class="token punctuation">;</span> <span class="token keyword">asc</span> <span class="token number">3</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">64303031</span><span class="token punctuation">;</span> <span class="token keyword">asc</span> d001 <span class="token number">4</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">8000001</span>e<span class="token punctuation">;</span> <span class="token keyword">asc</span> <span class="token number">5</span>: len <span class="token number">1</span><span class="token punctuation">;</span> hex <span class="token number">81</span><span class="token punctuation">;</span> <span class="token keyword">asc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过Id=5更新也会被SessinA的<code>next-key</code>锁阻塞，虽然SessionB加要的是<code>行锁</code>，这也从则面说明了<code>next-key</code>是由<code>行锁</code>和<code>间隙锁</code>组成</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> t <span class="token keyword">set</span> age<span class="token operator">=</span><span class="token number">31</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">5</span><span class="token comment"># 被id=5的记录上行锁阻塞</span>RECORD LOCKS space id <span class="token number">5</span> page <span class="token keyword">no</span> <span class="token number">4</span> n bits <span class="token number">80</span> <span class="token keyword">index</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">of</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>t<span class="token punctuation">`</span>trx id <span class="token number">4367</span> lock_mode X locks rec but <span class="token operator">not</span> gap waiting <span class="token number">0</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">80000005</span><span class="token punctuation">;</span> <span class="token keyword">asc</span> <span class="token number">1</span>: len <span class="token number">6</span><span class="token punctuation">;</span> hex <span class="token number">000000000</span>d9e<span class="token punctuation">;</span> <span class="token keyword">asc</span> <span class="token number">2</span>: len <span class="token number">7</span><span class="token punctuation">;</span> hex <span class="token number">82000000</span>a80110<span class="token punctuation">;</span> <span class="token keyword">asc</span> <span class="token number">3</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">64303034</span><span class="token punctuation">;</span> <span class="token keyword">asc</span> d004 <span class="token number">4</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">8000001</span>e<span class="token punctuation">;</span> <span class="token keyword">asc</span> <span class="token number">5</span>: len <span class="token number">1</span><span class="token punctuation">;</span> hex <span class="token number">81</span><span class="token punctuation">;</span> <span class="token keyword">asc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入数据也被阻塞，因为插入Id的值都落在了<code>间隙锁</code>[infimum，supremum]内，无法插入任何的值。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'d002'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入id=2的值，被间隙锁(1,3)阻塞</span>RECORD LOCKS space id <span class="token number">5</span> page <span class="token keyword">no</span> <span class="token number">4</span> n bits <span class="token number">80</span> <span class="token keyword">index</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">of</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>t<span class="token punctuation">`</span>trx id <span class="token number">4365</span> lock_mode X locks gap before rec <span class="token keyword">insert</span> intention waiting <span class="token number">0</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">80000003</span><span class="token punctuation">;</span> <span class="token keyword">asc</span> <span class="token number">1</span>: len <span class="token number">6</span><span class="token punctuation">;</span> hex <span class="token number">000000001106</span><span class="token punctuation">;</span> <span class="token keyword">asc</span> <span class="token number">2</span>: len <span class="token number">7</span><span class="token punctuation">;</span> hex <span class="token number">01000001120488</span><span class="token punctuation">;</span> <span class="token keyword">asc</span> <span class="token number">3</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">64303033</span><span class="token punctuation">;</span> <span class="token keyword">asc</span> d003 <span class="token number">4</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">8000001</span>f<span class="token punctuation">;</span> <span class="token keyword">asc</span> <span class="token number">5</span>: len <span class="token number">1</span><span class="token punctuation">;</span> hex <span class="token number">81</span><span class="token punctuation">;</span> <span class="token keyword">asc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加入limit减少被锁的行"><a href="#加入limit减少被锁的行" class="headerlink" title="加入limit减少被锁的行"></a>加入<code>limit</code>减少被锁的行</h2><table><thead><tr><th>时刻</th><th>Session A</th><th>Session B</th></tr></thead><tbody><tr><td>T1</td><td>begin;</td><td></td></tr><tr><td>T2</td><td>update t set age=31 where name=’d003’ limit 1;</td><td></td></tr><tr><td>T3</td><td></td><td>begin;</td></tr><tr><td>T4</td><td></td><td>update t set age=31 where name=’d005’;<font color=red>(blocked)</font></td></tr><tr><td></td><td></td><td>insert into t values(2,’d002’,30,1);<font color=red>(blocked)</font></td></tr><tr><td>T5</td><td></td><td>insert into t values(4,’d004’,30,1);<font color=green>(Query Ok)</font></td></tr></tbody></table><h3 id="SessionA加锁的范围是怎么样的"><a href="#SessionA加锁的范围是怎么样的" class="headerlink" title="SessionA加锁的范围是怎么样的"></a>SessionA加锁的范围是怎么样的</h3><p>主键索引<code>id</code>锁的范围是[infimum，3]</p><p>由于name列没有索引，查询时走主键索引，全表扫描。先找到id=1的行，加<code>next-key</code>锁，发现name的值不匹配，继续向右查找，给id=3的行上锁，name匹配，返回结果给server层，由于使用了<code>limit 1</code>，满足条件，不再向后查找，查询结束。记录(id:1),(id:3)的行上了<code>next-key</code>锁，之后的记录没有上锁。</p><h3 id="SessionB被阻塞在哪里-1"><a href="#SessionB被阻塞在哪里-1" class="headerlink" title="SessionB被阻塞在哪里"></a>SessionB被阻塞在哪里</h3><p>更新条件 <code>where name=&#39;d005&#39;</code>，由于name列没有索引，查询时也要走主键索引。先找到id=1的行，加<code>next-key</code>锁，由于SessionA已经加了<code>next-key</code>锁，SessionB只能等待，它在此时发生了阻塞</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> t <span class="token keyword">set</span> age<span class="token operator">=</span><span class="token number">31</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'d005'</span><span class="token comment"># 被SessionA上的 id=1的行的 next-key锁阻塞</span>RECORD LOCKS space id <span class="token number">5</span> page <span class="token keyword">no</span> <span class="token number">4</span> n bits <span class="token number">80</span> <span class="token keyword">index</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">of</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>t<span class="token punctuation">`</span> trx id <span class="token number">4871</span> lock_mode X waiting <span class="token number">0</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">80000001</span><span class="token punctuation">;</span> <span class="token keyword">asc</span> <span class="token number">1</span>: len <span class="token number">6</span><span class="token punctuation">;</span> hex <span class="token number">000000000</span>d98<span class="token punctuation">;</span> <span class="token keyword">asc</span> <span class="token number">2</span>: len <span class="token number">7</span><span class="token punctuation">;</span> hex <span class="token number">81000000</span>a70110<span class="token punctuation">;</span> <span class="token keyword">asc</span> <span class="token number">3</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">64303031</span><span class="token punctuation">;</span> <span class="token keyword">asc</span> d001 <span class="token number">4</span>: len <span class="token number">4</span><span class="token punctuation">;</span> hex <span class="token number">8000001</span>e<span class="token punctuation">;</span> <span class="token keyword">asc</span> <span class="token number">5</span>: len <span class="token number">1</span><span class="token punctuation">;</span> hex <span class="token number">81</span><span class="token punctuation">;</span> <span class="token keyword">asc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为<code>id</code>锁的范围是[infimum，3]，(id=5,7,9,11)的行没有被上锁，可以更新及插入id &gt; 3的数据。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># Session B</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'d004'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>Query Ok<span class="token punctuation">)</span><span class="token comment"># 虽然不能通过 where name='d005' 修改</span><span class="token comment"># 但可以通过where id=5 修改，也说明了id=5的行没有被锁</span><span class="token comment"># 同时也绕过了需要等待id=1的锁的限制</span><span class="token keyword">update</span> t <span class="token keyword">set</span> age<span class="token operator">=</span><span class="token number">31</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">(</span>Query Ok<span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+------+------+--------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> age  <span class="token operator">|</span> ismale <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+------+------+--------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> d001 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> d003 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> d004 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> d005 <span class="token operator">|</span>   <span class="token number">31</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span> d007 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">9</span> <span class="token operator">|</span> d009 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span> d011 <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+------+------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/database/">数据库</category>
      
      
      <category domain="https://www.gagahappy.com/tags/mysql/">mysql</category>
      
      
      <comments>https://www.gagahappy.com/mysql-update-with-limit/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mysql 死锁</title>
      <link>https://www.gagahappy.com/mysql-deadlock/</link>
      <guid>https://www.gagahappy.com/mysql-deadlock/</guid>
      <pubDate>Wed, 25 Aug 2021 13:10:32 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;死锁的发生&quot;&gt;&lt;a href=&quot;#死锁的发生&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="死锁的发生"><a href="#死锁的发生" class="headerlink" title="死锁的发生"></a>死锁的发生</h1><p>不同线程出现资源的循环依赖，都在等待对方释放自己所需要的资源，就会导致这几个线程进行无限等待的状态，发生死锁。</p><table><thead><tr><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>Begin;</td><td>Begin;</td></tr><tr><td>update t set k=k+1 where id = 1;</td><td></td></tr><tr><td></td><td>update t set k=k+1 where id = 2;</td></tr><tr><td>update t set k=k+1 where id = 2;(block)</td><td></td></tr><tr><td></td><td>update t set k=k+1 where id = 1;<br><font color=red><br>&lt;ERROR 1213 (40001): <br>Deadlock found when trying to get lock;<br> try restarting transaction</font></td></tr><tr><td><font color=green>Query OK, 1 row affected (6.99 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0</font></td><td></td></tr></tbody></table><p>事务A在等待事物B释放 id=2的行锁，而事务B在等待事物A释放id=1的行锁，双方都在等待对方释放资源，就发生了死锁。由于MySQL有死锁检测，会马上发现这个死锁，并对事务B进行回滚。</p><p>发生死锁的线程都是要锁至少2行(参与的有2个资源，一个资源是自己已经加锁，但别人也要加，另一个资源是别人已经加锁，但自己也要加)。如果一个事务只锁一行是不会发生死锁的，只会发生锁阻塞。</p><h2 id="应对策略"><a href="#应对策略" class="headerlink" title="应对策略"></a>应对策略</h2><ul><li><p>什么都不做，直接等到超时</p><p>上面的事务B，会发生超时。</p><p>通过设置<code>innodb_lock_wait_timeout</code>来指定超时时间，默认值是50s</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%innodb_lock_wait_timeout%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------------+-------+</span><span class="token operator">|</span> Variable_name            <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------+-------+</span><span class="token operator">|</span> innodb_lock_wait_timeout <span class="token operator">|</span> <span class="token number">50</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>进行死锁检测</p><p>开启死锁检测功能，检测到死锁后，对回滚成本比较低的事务进行回滚，让其它事务继续执行。设置参数<code>innodb_deadlock_detect</code>为on，开启此功能(默认为开启)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment">------------------------+-------+</span><span class="token operator">|</span> Variable_name          <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------------+-------+</span><span class="token operator">|</span> innodb_deadlock_detect <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="哪种策略更好"><a href="#哪种策略更好" class="headerlink" title="哪种策略更好"></a>哪种策略更好</h2><ul><li><p>缩短等待的超时时间</p><p><code>innodb_lock_wait_timeout</code>的默认等待为50秒，对于生产环境，这显然是无法接受的。如果设置为1秒呢，虽然等待的时间变短，但也会误伤那些只是等待锁，而不是陷入死锁的线程。比如2秒以后就可以拿到锁的那些线程。</p></li><li><p>启用死锁检测</p><p>MySql默认启用死锁检测，当发现加入进来的线程会产生死锁时，会回滚成本较低的事务。MySQL发现死锁的速度很快，所以推荐使用死锁检测</p></li><li><p>关闭死锁检测</p><p>如果可以确定所有的SQL不会产生死锁问题，可以关闭死锁检测。死锁检测虽然好使，但也是有代价的，会占用CPU的资源。</p></li></ul><h1 id="死锁检测的成本"><a href="#死锁检测的成本" class="headerlink" title="死锁检测的成本"></a>死锁检测的成本</h1><p>当一个线程新加入到某个资源的阻塞队列时，会检测它的加入是否与其它正在发生阻塞的线程存在资源的相互依赖，从而导致死锁的发生。如果这是一个高并发的资源，阻塞队列里有大量排队的线程，那么每个线程都要把其它线程检查一遍，每个线程要检查的时间复杂度就是<code>O(N)</code>。</p><p>比如有1000个并发线程，那么要总共要检测的数量就是 1000 * 1000 = 100W，即<code>O(N^2)</code>，这种数量级的检测就会导致消耗大量的CPU资源，你看到的现象就是CPU占用率很高，却处理不了多少事务，或是你发现理处的事务很少，但CPU占用率却很高。</p><h1 id="控制并发度"><a href="#控制并发度" class="headerlink" title="控制并发度"></a>控制并发度</h1><p>要想从根本上减少死锁及锁等待，就要降低对同一资源的并发访问数量</p><p>可以使用的方法</p><ul><li><p>分摊热点资源的访问量</p><p>比如参加秒杀的商品，它的库存如果存放在一条记录中，那么在高并发下，比如有1000个请求，就会同时更新，这样就会导致线程的阻塞或发生死锁。</p><p>可以把保存库存的记录一条拆成N条，让请求随机访问这N条记录，比如分别放在100个记录中，那么每个记录最多只有10个更新请求，这样可以把并发量降为原来的<code>1/N</code>，大大减小了死锁的发生和锁的等待， 以及死锁检测的成本</p></li><li><p>把并发请求放入队列</p><p>数据库中间件可以把请求放入队列，使并发请求变为顺序访问</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/database/">数据库</category>
      
      
      <category domain="https://www.gagahappy.com/tags/mysql/">mysql</category>
      
      
      <comments>https://www.gagahappy.com/mysql-deadlock/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
