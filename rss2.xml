<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>睡月飞天膏药</title>
    <link>https://www.gagahappy.com/</link>
    
    <image>
      <url>https://www.gagahappy.com/icon.png</url>
      <title>睡月飞天膏药</title>
      <link>https://www.gagahappy.com/</link>
    </image>
    
    <atom:link href="https://www.gagahappy.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>后端, 操作系统, 互联网, 程序开发, Linux, 数据库, MySql, Golang, Ruby</description>
    <pubDate>Sun, 06 Jun 2021 09:32:22 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Mac OS 安装 Gdb</title>
      <link>https://www.gagahappy.com/setup-gdb-on-macos/</link>
      <guid>https://www.gagahappy.com/setup-gdb-on-macos/</guid>
      <pubDate>Sun, 06 Jun 2021 07:14:15 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gdb</span><br></pre></td></tr></table></figure><p>也可以从源码进安装，<a href="https://www.gnu.org/software/gdb/">官网</a>，目前GDB对下列语言进行了支持</p><blockquote><p>Ada<br>Assembly<br>C<br>C++<br>D<br>Fortran<br>Go<br>Objective-C<br>OpenCL<br>Modula-2<br>Pascal<br>Rust</p></blockquote><p>安装后还不能直接使用，MacOS 对安全性有效高的要求，不允许没有许可的程序运行其它程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gdb helloworld</span><br><span class="line">(gdb) run</span><br><span class="line"></span><br><span class="line">Unable to find Mach task port <span class="keyword">for</span> process-id 798: (os/kern) failure (0x5).</span><br><span class="line"> (please check gdb is codesigned - see taskgated(8))</span><br></pre></td></tr></table></figure><p>提示<code>please check gdb is codesigned - see taskgated(8)</code>，原因是还没有为<code>gdb</code>签名，需要在系统的<code>Keychain</code>中创建用于签名的证书</p><h1 id="创建certificate"><a href="#创建certificate" class="headerlink" title="创建certificate"></a>创建certificate</h1><p>步骤如下：</p><ol><li>Launch Keychain Access application: Applications &gt; Utilities &gt; Keychain Access.</li><li>From the Keychains list on the left, right-click on the System item and select Unlock Keychain “System”.</li><li>From the toolbar, go to Keychain Access &gt; Certificate Assistant &gt; Create a Certificate.</li><li>Choose a name (e.g. gdb-cert).</li><li>Set Identity Type to Self Signed Root.</li><li>Set Certificate Type to Code Signing.</li><li>Check the Let me override defaults checkbox.</li><li>At this point, you can go on with the installation process until you get the Specify a Location For The Certificate dialogue box. Here you need to set Keychain to System. Finally, you can click on the Create button.</li><li>After these steps, you can see the new certificate under System keychains. From the contextual menu of the newly created certificate (right-click on it) select the Get info option. In the dialogue box, expand the Trust item and set Code signing to Always Trust.</li><li>Then, from the Keychains list on the left, right-click on the System item and select Lock Keychain “System”.</li><li>Finally, reboot your system.</li></ol><h1 id="gdb签名"><a href="#gdb签名" class="headerlink" title="gdb签名"></a>gdb签名</h1><p>在创建你自己的证书后，就可以给gdb进行签名了，在签名前要先配置<code>gdb-entitlement.xml</code>文件，它允许MacOs信任gdb</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">plist</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.allow-jit<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.allow-unsigned-executable-memory<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.allow-dyld-environment-variables<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.disable-library-validation<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.disable-executable-page-protection<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.debugger<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.get-task-allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在命令行运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codesign --entitlements gdb-entitlement.xml -fs gdb-cert <span class="string">&quot;<span class="subst">$(which gdb)</span>&quot;</span></span><br></pre></td></tr></table></figure><p><code>-fs</code>: 要填写你刚刚生成的证书的名子，<code>$(which gdb)</code>: 是gdb的安装路径</p><p>接着在<code>home</code>目录创建<code>~/.gdbinit</code>文件，并写入如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;set startup-with-shell off&quot;</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><h1 id="编译文件"><a href="#编译文件" class="headerlink" title="编译文件"></a>编译文件</h1><p>为了解决<code>No symbol table is loaded</code>问题，可以在编译时加入<code>-ggdb</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">gcc hello_world.c -o hello_world -ggdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">gdb hello_world</span><br><span class="line">(gdb) list</span><br><span class="line">1<span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line">2</span><br><span class="line">3int my_strlen(char *string);</span><br><span class="line">4</span><br><span class="line">5int main(int argc, char const *argv[])</span><br><span class="line">6&#123;</span><br><span class="line">7  // char *string;</span><br><span class="line">8  // string = <span class="string">&quot;hello world haha&quot;</span>;</span><br><span class="line">9  char string[] = <span class="string">&quot;hello world haha&quot;</span>;</span><br><span class="line">10  <span class="built_in">printf</span>(<span class="string">&quot;The string &#x27;%s&#x27; len is \&quot;%d\&quot;\n&quot;</span>, string, my_strlen(string));</span><br><span class="line">(gdb) run</span><br><span class="line">Starting program: /Users/ga/m/book/c-lang/ch02-basic/hello_world</span><br><span class="line">[New Thread 0x2603 of process 6002]</span><br><span class="line">[New Thread 0x1803 of process 6002]</span><br><span class="line">warning: unhandled dyld version (16)</span><br><span class="line">The string <span class="string">&#x27;hello world haha&#x27;</span> len is <span class="string">&quot;16&quot;</span></span><br><span class="line">[Inferior 1 (process 6002) exited normally]</span><br></pre></td></tr></table></figure><h1 id="使用gdb调试golang"><a href="#使用gdb调试golang" class="headerlink" title="使用gdb调试golang"></a>使用gdb调试golang</h1><p>本博没有成功，一直提示错误<code>No symbol table is loaded.  Use the &quot;file&quot; command.</code> ，后来查看了Go的官方文档，官方建议使用<code>Delve</code>进行调试。<a href="https://golang.org/doc/gdb">官方原文</a></p><blockquote><p><em>Note that <a href="https://github.com/go-delve/delve">Delve</a> is a better alternative to GDB when debugging Go programs built with the standard toolchain. It understands the Go runtime, data structures, and expressions better than GDB. Delve currently supports Linux, OSX, and Windows on <code>amd64</code>. For the most up-to-date list of supported platforms, please see <a href="https://github.com/go-delve/delve/tree/master/Documentation/installation">the Delve documentation</a>.</em></p></blockquote><p>并且在官方给出的示例中，也不保证你照着运行也可以成功</p><blockquote><p>In short, the instructions below should be taken only as a guide to how to use GDB when it works, not as a guarantee of success. Besides this overview you might want to consult the <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/">GDB manual</a>.</p></blockquote><p>最后祝你一切顺利</p>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/software/">软件</category>
      
      
      <category domain="https://www.gagahappy.com/tags/gdb/">gdb</category>
      
      
      <comments>https://www.gagahappy.com/setup-gdb-on-macos/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Git 创建标签</title>
      <link>https://www.gagahappy.com/git-create-tag/</link>
      <guid>https://www.gagahappy.com/git-create-tag/</guid>
      <pubDate>Sat, 05 Jun 2021 14:16:35 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;Git-创建标签&quot;&gt;&lt;a href=&quot;#Git-创建标签&quot; class=&quot;headerlink&quot; title=&quot;Git 创建标签&quot;&gt;&lt;/a&gt;Git 创建标签&lt;/h1&gt;&lt;p&gt;Git 标签分两种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;附注标签: annotated: 是存储在</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Git-创建标签"><a href="#Git-创建标签" class="headerlink" title="Git 创建标签"></a>Git 创建标签</h1><p>Git 标签分两种</p><ul><li>附注标签: annotated: 是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息</li><li>轻量级标签: lightweight: 像一个不会改变的分支——它只是某个特定提交的引用。在实践中不推荐使用</li></ul><h2 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 附注标签</span></span><br><span class="line">git tag -a v0.0.1 -m <span class="string">&quot;first release try&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布标签</span></span><br><span class="line"><span class="comment"># 标签不会随push而自动被push到远程，需要单独push</span></span><br><span class="line">git push origin v0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给某个commit单独打tag</span></span><br><span class="line"><span class="comment"># 这种操作多用于给历史commit打tag,原因可能是当时没有打</span></span><br><span class="line">git tag -a v0.0.2 2234093</span><br></pre></td></tr></table></figure><h2 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个tag的具体内容</span></span><br><span class="line">git show v0.0.1</span><br><span class="line">git cat-file -p v0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除标签</span></span><br><span class="line">git tag -d v0.0.1</span><br><span class="line">=&gt; Deleted tag <span class="string">&#x27;v0.0.1&#x27;</span> (was 79db751)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程标签</span></span><br><span class="line">git push origin :v0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag的sha1</span></span><br><span class="line">cat .git/refs/tags/v5.4.1 <span class="comment"># 在标签被删除的时候会显示这个值</span></span><br><span class="line"><span class="comment"># =&gt; 79db751</span></span><br></pre></td></tr></table></figure><h2 id="签名tag"><a href="#签名tag" class="headerlink" title="签名tag"></a>签名tag</h2><p>前置条件：要先配置GPG</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 强制给tag 签名</span></span><br><span class="line"><span class="comment"># 直接编辑  ~/.gitconfig 也可以</span></span><br><span class="line">git config --global tag.forcesignannotated <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/software/">软件</category>
      
      
      <category domain="https://www.gagahappy.com/tags/git/">git</category>
      
      
      <comments>https://www.gagahappy.com/git-create-tag/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Fmt对string中零值的处理</title>
      <link>https://www.gagahappy.com/go-fmt-string-with-zerovalue/</link>
      <guid>https://www.gagahappy.com/go-fmt-string-with-zerovalue/</guid>
      <pubDate>Sat, 05 Jun 2021 06:32:08 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;code&gt;fmt&lt;/code&gt;格式化含有0值的&lt;code&gt;string&lt;/code&gt;时，是如何显示的&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><code>fmt</code>格式化含有0值的<code>string</code>时，是如何显示的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">10</span>)</span><br><span class="line">buf[<span class="number">8</span>] = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="built_in">copy</span>(buf, []<span class="keyword">byte</span>(<span class="string">&quot;hello&quot;</span>))</span><br><span class="line">fmt.Printf(<span class="string">&quot;cap(%d),len(%d)\n&quot;</span>, <span class="built_in">cap</span>(buf), <span class="built_in">len</span>(buf))</span><br><span class="line">fmt.Println(<span class="string">&quot;buf:&quot;</span>, buf)</span><br><span class="line">fmt.Printf(<span class="string">&quot;buf:%q\n&quot;</span>, buf)</span><br><span class="line">fmt.Println(<span class="string">&quot;buf:&quot;</span>, <span class="keyword">string</span>(buf))</span><br><span class="line"></span><br><span class="line">str := <span class="keyword">string</span>(buf)</span><br><span class="line">str = str + <span class="string">&quot; world&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(str)) <span class="comment">// =&gt; 16</span></span><br><span class="line">fmt.Println(str)      <span class="comment">// =&gt; helloA world</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">cap(10),len(10)</span></span><br><span class="line"><span class="comment">buf: [104 101 108 108 111 0 0 0 65 0]</span></span><br><span class="line"><span class="comment">buf:&quot;hello\x00\x00\x00A\x00&quot;</span></span><br><span class="line"><span class="comment">buf: helloA</span></span><br><span class="line"><span class="comment">16</span></span><br><span class="line"><span class="comment">helloA world</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>1. 使用<code>fmt</code>打印<code>string(buf)</code>虽然显示为<code>helloA</code>，看上去字符数变少了，只有6个(0值没有显示，其<code>ascii码</code>是不可打印码)，但底层数据没变，依然是<code>[104 101 108 108 111 0 0 0 65 0]</code></p><p>2. 格式化参数<code>%q</code>直接对0值进行了输出<code>hello\x00\x00\x00A\x00</code>，它打印了<code>string</code>中的每一个字节，包括不可打印的字节</p><p>3. <code>str + &quot; world&quot;</code>的长度为16，也证明了<code>str</code>中的0值没有被去除(10 + 6 = 16)</p><p>4.使用<code>fmt</code>查看数据”长什么样子”有时候是不准确的</p>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/golang/">golang</category>
      
      
      <comments>https://www.gagahappy.com/go-fmt-string-with-zerovalue/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>io.Writer 接口</title>
      <link>https://www.gagahappy.com/go-io-writer/</link>
      <guid>https://www.gagahappy.com/go-io-writer/</guid>
      <pubDate>Fri, 04 Jun 2021 06:46:58 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;io-Writer接口实现要求&quot;&gt;&lt;a href=&quot;#io-Writer接口实现要求&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="io-Writer接口实现要求"><a href="#io-Writer接口实现要求" class="headerlink" title="io.Writer接口实现要求"></a><code>io.Writer</code>接口实现要求</h1><p>开始以为只是实现了<code>Write</code>方法就行，看了源码发现还有很多细节上的要求</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/io/io.go</span></span><br><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">Write(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.要把 <code>p</code>写入实现类型的底层数据中</p><p>2.要返回实际写入的长度和在写入时遇到的错误，如果实际写入的长度小于<code>len(p)</code>，返回的<code>err</code>必须是非<code>nil</code>的</p><p>3. <code>p</code>不能在方法内部被修改，即使临时性的也不可以</p><p>4. 不能对<code>p</code>进行保存</p>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/development/">后端</category>
      
      
      <category domain="https://www.gagahappy.com/tags/golang/">golang</category>
      
      
      <comments>https://www.gagahappy.com/go-io-writer/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>安装 Gitalk 评论系统</title>
      <link>https://www.gagahappy.com/gitalk-install/</link>
      <guid>https://www.gagahappy.com/gitalk-install/</guid>
      <pubDate>Tue, 01 Jun 2021 06:25:33 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;申请GitHub应用&quot;&gt;&lt;a href=&quot;#申请GitHub应用&quot; class=&quot;headerlink&quot; title=&quot;申请GitHub应用&quot;&gt;&lt;/a&gt;申请GitHub应用&lt;/h1&gt;&lt;h2 id=&quot;1-注册一个新应用&quot;&gt;&lt;a href=&quot;#1-注册一个新应用&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="申请GitHub应用"><a href="#申请GitHub应用" class="headerlink" title="申请GitHub应用"></a>申请GitHub应用</h1><h2 id="1-注册一个新应用"><a href="#1-注册一个新应用" class="headerlink" title="1.  注册一个新应用"></a>1.  注册一个新应用</h2><p><a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a> 有三项内容必须填写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Application name：这个随意填写</span><br><span class="line">Homepage URL：你的网站的URL地址，包含http部分。</span><br><span class="line">Authorization callback URL：你的网站的URL地址，包含http部分，和上面的 Homepage URL 一致就行</span><br></pre></td></tr></table></figure><h2 id="2-Homepage-URL与Authorization-callback-URL的填写"><a href="#2-Homepage-URL与Authorization-callback-URL的填写" class="headerlink" title="2. Homepage URL与Authorization callback URL的填写"></a>2. <code>Homepage URL</code>与<code>Authorization callback URL</code>的填写</h2><ol><li>如果你的网站是host在github上的，是通过github分配给你的网址进行访问的，直接填写github分配给你的网站就可以，类似 <code>yourgithub.github.io</code></li><li>如果你有自己的域名，但网站内容是host在github上的，是通过cname的方式访问的，那么这两项都填你的域名</li><li>如果你有自己的域名，也有自己的站点，那么这两项都填你的域名</li></ol><p>在调试阶段，可以把这两项设置为你的本地地址，这样方便测试，而不用一次又一次的部署网站，等测试好之后再统一部署。</p><h2 id="3-生成Client信息"><a href="#3-生成Client信息" class="headerlink" title="3. 生成Client信息"></a>3. 生成Client信息</h2><p>点击 “register application”完成注册，系统会生成<code>Client ID</code>和<code>Client secrets</code>(需要手动点一下旁边的按钮)</p><h1 id="配置Gitalk"><a href="#配置Gitalk" class="headerlink" title="配置Gitalk"></a>配置Gitalk</h1><h2 id="通过Next主题进行配置"><a href="#通过Next主题进行配置" class="headerlink" title="通过Next主题进行配置"></a>通过<code>Next</code>主题进行配置</h2><p>如果你的网点是用Hexo驱动，且主题是<code>Next</code>，这个主题已经为我们配置了gitalk，只需配置即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">你的Github登录账号</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">gitalk</span> <span class="string">你的</span> <span class="string">Github仓库的名称</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">上面刚刚申请的</span> <span class="string">Client</span> <span class="string">ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">上面刚刚申请的</span> <span class="string">Client</span> <span class="string">Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">你的Github登录账号</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">proxy:</span> <span class="string">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure><h2 id="使用官网配置"><a href="#使用官网配置" class="headerlink" title="使用官网配置"></a>使用官网配置</h2><p>官网地址：<a href="https://github.com/gitalk/gitalk">https://github.com/gitalk/gitalk</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span><br><span class="line">  clientID: <span class="string">&#x27;GitHub Application Client ID&#x27;</span>,</span><br><span class="line">  clientSecret: <span class="string">&#x27;GitHub Application Client Secret&#x27;</span>,</span><br><span class="line">  repo: <span class="string">&#x27;GitHub repo&#x27;</span>,      <span class="comment">// The repository of store comments,</span></span><br><span class="line">  owner: <span class="string">&#x27;GitHub repo owner&#x27;</span>,</span><br><span class="line">  admin: [<span class="string">&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;</span>],</span><br><span class="line">  id: location.pathname,      <span class="comment">// Ensure uniqueness and length less than 50</span></span><br><span class="line">  distractionFreeMode: <span class="literal">false</span>  <span class="comment">// Facebook-like distraction free mode</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gitalk.render(<span class="string">&#x27;gitalk-container&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p>注：官网配置的参数和Hexo主题Next的参数是通用的</p><ul><li><code>repo</code>: 要求填写你的Github仓库的名称，这个仓库可以是你的github上的任意一个，但必须是公开的。评论内容会以 <code>issue</code>的形式保存到仓库的<code>issues</code>中，所以建议为评论单独新建一个仓库</li><li><code>admin</code>: 指定了可以初始化文章评论的github用户，一般只填写你自己就可以了</li><li><code>id</code>: 文章的URL路径，不包括域名，这个路径要求必须是唯一的，且不能超过50个字符(如果超过了，可以使用md5等工具对路径进行摘要缩短长度即可)。每一扁文章的评论和这个路径相关联，所以即使域名不同，只要文章的URL一样，就会显示相关联的评论。在Next主题中是自动配置的Hexo主题Next的参数定义在<code>layout/_third-party/comments/gitalk.njk</code>中</li><li><code>distractionFreeMode</code>：是否是聚精会神模式，即评论框在写评论的时候，周围是否变成黑</li></ul><h1 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h1><p>1. Error: Not Found：一般是仓库名称没有正确设置，请依据上面的参数说明部分进行设置</p><p>2. Related Issues not found：未找到相关的issue进行评论，出现这种情况是因为文章评论还未初始化，只需要点击下面的按钮，登录 GitHub 账户即可</p><p>3. 评论区一直加载不上：配置中的<code>proxy</code>地址不正确或已经失效。官网默认地址是<code>https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</code>。如果你使用的是Next主题，请确保也是这个地址</p><p>4.  评论时是黑色的：设置<code>distractionFreeMode</code>为false</p>]]></content:encoded>
      
      
      <category domain="https://www.gagahappy.com/categories/software/">软件</category>
      
      
      <category domain="https://www.gagahappy.com/tags/git/">git</category>
      
      
      <comments>https://www.gagahappy.com/gitalk-install/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
